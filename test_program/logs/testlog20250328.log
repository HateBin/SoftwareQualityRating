2025-03-28 12:42:08,427 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG修复情况评分计算测试开始==========
2025-03-28 12:42:09,120 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ====开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG====
2025-03-28 12:42:09,120 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===执行用例：入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG 成功====
2025-03-28 12:42:09,121 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==开始执行用例：入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG==
2025-03-28 12:42:09,121 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =执行用例：入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功==
2025-03-28 12:42:09,122 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =====开始执行用例：入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG=====
2025-03-28 12:42:09,122 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ====执行用例：入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功=====
2025-03-28 12:42:09,123 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ====开始执行用例：入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG=====
2025-03-28 12:42:09,123 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ====执行用例：入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功====
2025-03-28 12:42:09,124 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ======开始执行用例：不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG======
2025-03-28 12:42:09,124 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =====执行用例：不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功======
2025-03-28 12:42:09,125 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===开始执行用例：入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG===
2025-03-28 12:42:09,125 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==执行用例：入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功===
2025-03-28 12:42:09,125 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG
2025-03-28 12:42:09,125 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG 成功
2025-03-28 12:42:09,126 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG
2025-03-28 12:42:09,126 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG 成功
2025-03-28 12:42:09,126 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG
2025-03-28 12:42:09,127 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG 成功
2025-03-28 12:42:09,127 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG
2025-03-28 12:42:09,127 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG 成功
2025-03-28 12:42:09,128 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG
2025-03-28 12:42:09,128 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG 成功
2025-03-28 12:42:09,128 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG
2025-03-28 12:42:09,128 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG 成功
2025-03-28 12:42:09,129 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG
2025-03-28 12:42:09,129 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG 成功
2025-03-28 12:42:09,130 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG
2025-03-28 12:42:09,130 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG 成功
2025-03-28 12:42:09,130 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG
2025-03-28 12:42:09,130 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG 成功
2025-03-28 12:42:09,131 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG
2025-03-28 12:42:09,131 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG 成功
2025-03-28 12:42:09,132 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG
2025-03-28 12:42:09,132 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG 成功
2025-03-28 12:42:09,132 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG
2025-03-28 12:42:09,132 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG 成功
2025-03-28 12:42:09,133 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG
2025-03-28 12:42:09,133 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG 成功
2025-03-28 12:42:09,134 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG
2025-03-28 12:42:09,134 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG 成功
2025-03-28 12:42:09,134 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG
2025-03-28 12:42:09,134 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG 成功
2025-03-28 12:42:09,135 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG
2025-03-28 12:42:09,135 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG 成功
2025-03-28 12:42:09,136 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG
2025-03-28 12:42:09,136 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG 成功
2025-03-28 12:42:09,136 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG
2025-03-28 12:42:09,136 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG 成功
2025-03-28 12:42:09,137 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG
2025-03-28 12:42:09,137 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG 成功
2025-03-28 12:42:09,137 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG
2025-03-28 12:42:09,137 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG 成功
2025-03-28 12:42:09,138 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG
2025-03-28 12:42:09,138 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG 成功
2025-03-28 12:42:09,139 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG
2025-03-28 12:42:09,139 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG 成功
2025-03-28 12:42:09,139 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG
2025-03-28 12:42:09,139 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG 成功
2025-03-28 12:42:09,140 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为小写英文==================
2025-03-28 12:42:09,140 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为小写英文 成功=================
2025-03-28 12:42:09,141 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为大写英文==================
2025-03-28 12:42:09,141 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为大写英文 成功=================
2025-03-28 12:42:09,142 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为整数===================
2025-03-28 12:42:09,142 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==================执行用例：入参值为整数 成功==================
2025-03-28 12:42:09,142 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为浮点数==================
2025-03-28 12:42:09,142 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为浮点数 成功==================
2025-03-28 12:42:09,143 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为汉字===================
2025-03-28 12:42:09,143 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==================执行用例：入参值为汉字 成功==================
2025-03-28 12:42:09,144 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为特殊符号==================
2025-03-28 12:42:09,144 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为特殊符号 成功=================
2025-03-28 12:42:09,144 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为空字符串==================
2025-03-28 12:42:09,144 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为空字符串 成功=================
2025-03-28 12:42:09,145 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为空格===================
2025-03-28 12:42:09,145 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==================执行用例：入参值为空格 成功==================
2025-03-28 12:42:09,145 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为空列表==================
2025-03-28 12:42:09,146 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为空列表 成功==================
2025-03-28 12:42:09,146 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG修复情况评分计算测试结束==========
2025-03-28 13:30:48,239 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 13:30:50,569 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 13:30:50,964 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 13:31:34,003 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 13:31:59,082 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 13:32:16,665 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 13:32:17,224 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 13:34:54,049 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 13:34:54,816 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 13:34:55,247 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 13:35:20,399 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 13:35:20,725 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 13:35:30,141 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 13:35:30,427 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 13:35:40,893 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 13:35:41,216 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 13:48:44,962 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 13:48:45,261 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 13:49:12,822 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 13:49:30,610 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 13:49:31,935 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 13:50:03,566 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 13:50:53,571 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 13:50:54,064 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 13:50:58,191 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 13:50:59,077 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 13:50:59,445 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 13:51:43,861 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 13:51:44,150 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 13:52:02,168 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 13:52:02,469 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 13:52:21,819 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 13:52:22,145 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 13:55:39,300 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 13:55:39,621 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 13:57:21,294 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 13:57:21,631 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 14:12:56,258 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 14:12:56,595 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 14:14:53,842 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 14:14:54,132 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 14:15:18,965 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 14:15:19,304 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 14:47:52,574 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 14:47:52,864 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 14:48:28,900 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 14:48:29,194 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 14:49:56,916 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 14:49:57,206 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 14:50:09,654 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 14:50:09,963 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 14:53:22,972 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 14:53:23,260 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 14:55:59,525 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 14:56:58,688 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 14:58:31,887 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 14:58:49,173 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 14:58:51,687 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 14:58:52,126 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 15:02:59,796 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 15:03:00,196 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 15:06:44,760 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 15:06:45,059 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 15:07:03,998 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 15:07:07,412 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 15:07:42,946 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 15:07:47,475 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 15:13:48,928 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 15:13:49,280 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 15:16:09,455 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 15:16:09,800 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 15:17:24,506 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 15:17:24,839 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 15:17:35,252 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 15:17:35,586 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 15:18:18,714 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 15:18:19,035 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 15:18:43,663 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 15:18:44,006 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 15:23:22,908 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 15:23:23,201 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 15:41:27,864 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 15:41:28,279 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 15:41:55,419 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 15:41:55,771 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 15:43:46,785 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 15:43:47,125 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 15:45:43,010 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 15:45:43,354 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 15:48:14,099 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 15:48:14,444 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 15:49:48,355 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 15:49:48,716 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 15:50:32,081 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 15:50:32,415 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 15:50:44,655 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 15:50:44,993 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 15:51:24,613 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 15:51:24,926 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 15:57:53,608 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 15:57:53,953 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 16:00:57,032 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 16:00:57,361 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 16:39:53,856 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 16:40:02,926 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 16:41:04,259 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 16:41:12,720 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 16:57:14,249 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 16:57:23,309 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 17:01:22,925 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 17:01:26,448 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 17:02:07,916 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 17:02:11,375 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 17:04:17,696 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 17:04:18,037 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 17:08:50,244 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 17:08:50,609 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 17:09:05,420 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 17:09:06,098 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 17:09:08,624 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 17:09:08,924 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 17:44:22,474 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 17:44:39,243 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 17:45:09,590 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 17:46:17,204 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 17:47:48,216 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 17:48:47,219 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 17:48:47,626 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 17:49:04,103 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 17:49:04,451 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 17:58:50,775 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 17:58:51,189 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 18:36:18,478 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 18:36:18,916 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 18:59:14,321 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 18:59:14,654 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 19:01:33,134 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 19:01:33,481 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 19:02:29,549 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 19:02:29,872 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 19:20:35,278 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 19:20:38,769 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 19:20:55,110 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 19:20:55,924 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 19:20:58,667 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 19:20:59,418 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 19:23:00,678 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 19:23:00,979 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 19:23:03,601 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 19:23:03,908 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 19:37:51,262 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 19:37:54,798 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 19:38:43,624 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 19:38:47,044 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 19:39:42,234 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 19:39:45,715 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 19:49:19,022 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 19:49:22,647 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 19:50:18,632 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 19:50:22,045 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 19:51:33,425 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 19:51:33,738 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 19:51:41,938 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 19:51:42,297 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 19:51:53,841 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG密度计算BUG数评分测试开始==========
2025-03-28 19:51:54,146 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG密度为0，期望20分===============
2025-03-28 19:51:54,146 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为0，期望20分 成功===============
2025-03-28 19:51:54,148 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为0.1，期望20分==============
2025-03-28 19:51:54,148 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为0.1，期望20分 成功==============
2025-03-28 19:51:54,148 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为0.9，期望20分==============
2025-03-28 19:51:54,148 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为0.9，期望20分 成功==============
2025-03-28 19:51:54,149 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG密度为1，期望20分===============
2025-03-28 19:51:54,149 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为1，期望20分 成功===============
2025-03-28 19:51:54,150 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.1，期望15分==============
2025-03-28 19:51:54,150 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.1，期望15分 成功==============
2025-03-28 19:51:54,151 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.2，期望15分==============
2025-03-28 19:51:54,151 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.2，期望15分 成功==============
2025-03-28 19:51:54,152 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.4，期望15分==============
2025-03-28 19:51:54,152 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.4，期望15分 成功==============
2025-03-28 19:51:54,152 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.5，期望15分==============
2025-03-28 19:51:54,152 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.5，期望15分 成功==============
2025-03-28 19:51:54,153 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.6，期望10分==============
2025-03-28 19:51:54,153 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.6，期望10分 成功==============
2025-03-28 19:51:54,154 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.7，期望10分==============
2025-03-28 19:51:54,154 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.7，期望10分 成功==============
2025-03-28 19:51:54,155 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.9，期望10分==============
2025-03-28 19:51:54,155 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.9，期望10分 成功==============
2025-03-28 19:51:54,155 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG密度为2，期望10分===============
2025-03-28 19:51:54,155 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为2，期望10分 成功===============
2025-03-28 19:51:54,156 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为2.1，期望5分===============
2025-03-28 19:51:54,156 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为2.1，期望5分 成功==============
2025-03-28 19:51:54,157 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为2.2，期望5分===============
2025-03-28 19:51:54,157 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为2.2，期望5分 成功==============
2025-03-28 19:51:54,158 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为2.9，期望5分===============
2025-03-28 19:51:54,158 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为2.9，期望5分 成功==============
2025-03-28 19:51:54,158 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG密度为3，期望5分================
2025-03-28 19:51:54,158 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG密度为3，期望5分 成功===============
2025-03-28 19:51:54,159 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为3.1，期望1分===============
2025-03-28 19:51:54,159 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为3.1，期望1分 成功==============
2025-03-28 19:51:54,159 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为999，期望1分===============
2025-03-28 19:51:54,159 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为999，期望1分 成功==============
2025-03-28 19:51:54,160 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ================开始执行用例：BUG密度为很多小数点================
2025-03-28 19:51:54,160 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG密度为很多小数点 成功================
2025-03-28 19:51:54,161 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===========开始执行用例：BUG密度为-1，输入值不在任何评分区间内===========
2025-03-28 19:51:54,161 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==========执行用例：BUG密度为-1，输入值不在任何评分区间内 成功===========
2025-03-28 19:51:54,161 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==========开始执行用例：BUG密度为小写英文，输入参数X必须是数字类型==========
2025-03-28 19:51:54,161 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =========执行用例：BUG密度为小写英文，输入参数X必须是数字类型 成功==========
2025-03-28 19:51:54,162 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==========开始执行用例：BUG密度为大写英文，输入参数X必须是数字类型==========
2025-03-28 19:51:54,162 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =========执行用例：BUG密度为大写英文，输入参数X必须是数字类型 成功==========
2025-03-28 19:51:54,163 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===========开始执行用例：BUG密度为汉字，输入参数X必须是数字类型===========
2025-03-28 19:51:54,163 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==========执行用例：BUG密度为汉字，输入参数X必须是数字类型 成功===========
2025-03-28 19:51:54,163 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==========开始执行用例：BUG密度为特殊符号，输入参数X必须是数字类型==========
2025-03-28 19:51:54,163 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =========执行用例：BUG密度为特殊符号，输入参数X必须是数字类型 成功==========
2025-03-28 19:51:54,164 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===========开始执行用例：BUG密度为空字符串，输入参数X不能为空============
2025-03-28 19:51:54,164 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===========执行用例：BUG密度为空字符串，输入参数X不能为空 成功===========
2025-03-28 19:51:54,165 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =========开始执行用例：BUG密度为字符串空格，输入参数X必须是数字类型==========
2025-03-28 19:51:54,165 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =========执行用例：BUG密度为字符串空格，输入参数X必须是数字类型 成功=========
2025-03-28 19:51:54,165 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===========开始执行用例：BUG密度为null，输入参数X不能为空============
2025-03-28 19:51:54,165 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===========执行用例：BUG密度为null，输入参数X不能为空 成功===========
2025-03-28 19:51:54,166 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：不传值，输入参数X不能为空===============
2025-03-28 19:51:54,166 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：不传值，输入参数X不能为空 成功===============
2025-03-28 19:51:54,166 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG密度计算BUG数评分测试结束==========
2025-03-28 19:51:54,167 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG修复情况评分计算测试开始==========
2025-03-28 19:51:54,167 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ====开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG====
2025-03-28 19:51:54,167 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===执行用例：入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG 成功====
2025-03-28 19:51:54,168 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==开始执行用例：入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG==
2025-03-28 19:51:54,168 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =执行用例：入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功==
2025-03-28 19:51:54,168 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =====开始执行用例：入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG=====
2025-03-28 19:51:54,168 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ====执行用例：入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功=====
2025-03-28 19:51:54,169 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ====开始执行用例：入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG=====
2025-03-28 19:51:54,169 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ====执行用例：入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功====
2025-03-28 19:51:54,170 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ======开始执行用例：不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG======
2025-03-28 19:51:54,170 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =====执行用例：不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功======
2025-03-28 19:51:54,170 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===开始执行用例：入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG===
2025-03-28 19:51:54,170 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==执行用例：入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功===
2025-03-28 19:51:54,171 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG
2025-03-28 19:51:54,171 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG 成功
2025-03-28 19:51:54,171 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG
2025-03-28 19:51:54,171 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG 成功
2025-03-28 19:51:54,172 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG
2025-03-28 19:51:54,172 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG 成功
2025-03-28 19:51:54,173 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG
2025-03-28 19:51:54,173 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG 成功
2025-03-28 19:51:54,173 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG
2025-03-28 19:51:54,173 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG 成功
2025-03-28 19:51:54,174 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG
2025-03-28 19:51:54,174 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG 成功
2025-03-28 19:51:54,174 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG
2025-03-28 19:51:54,174 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG 成功
2025-03-28 19:51:54,175 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG
2025-03-28 19:51:54,175 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG 成功
2025-03-28 19:51:54,176 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG
2025-03-28 19:51:54,176 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG 成功
2025-03-28 19:51:54,176 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG
2025-03-28 19:51:54,176 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG 成功
2025-03-28 19:51:54,177 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG
2025-03-28 19:51:54,177 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG 成功
2025-03-28 19:51:54,178 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG
2025-03-28 19:51:54,178 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG 成功
2025-03-28 19:51:54,178 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG
2025-03-28 19:51:54,178 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG 成功
2025-03-28 19:51:54,179 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG
2025-03-28 19:51:54,179 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG 成功
2025-03-28 19:51:54,180 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG
2025-03-28 19:51:54,180 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG 成功
2025-03-28 19:51:54,181 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG
2025-03-28 19:51:54,181 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG 成功
2025-03-28 19:51:54,182 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG
2025-03-28 19:51:54,182 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG 成功
2025-03-28 19:51:54,182 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG
2025-03-28 19:51:54,182 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG 成功
2025-03-28 19:51:54,183 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG
2025-03-28 19:51:54,183 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG 成功
2025-03-28 19:51:54,184 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG
2025-03-28 19:51:54,184 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG 成功
2025-03-28 19:51:54,184 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG
2025-03-28 19:51:54,184 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG 成功
2025-03-28 19:51:54,185 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG
2025-03-28 19:51:54,185 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG 成功
2025-03-28 19:51:54,186 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG
2025-03-28 19:51:54,186 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG 成功
2025-03-28 19:51:54,186 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为小写英文==================
2025-03-28 19:51:54,186 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为小写英文 成功=================
2025-03-28 19:51:54,187 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为大写英文==================
2025-03-28 19:51:54,187 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为大写英文 成功=================
2025-03-28 19:51:54,187 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为整数===================
2025-03-28 19:51:54,187 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==================执行用例：入参值为整数 成功==================
2025-03-28 19:51:54,188 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为浮点数==================
2025-03-28 19:51:54,188 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为浮点数 成功==================
2025-03-28 19:51:54,189 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为汉字===================
2025-03-28 19:51:54,189 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==================执行用例：入参值为汉字 成功==================
2025-03-28 19:51:54,189 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为特殊符号==================
2025-03-28 19:51:54,189 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为特殊符号 成功=================
2025-03-28 19:51:54,190 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为空字符串==================
2025-03-28 19:51:54,190 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为空字符串 成功=================
2025-03-28 19:51:54,191 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为空格===================
2025-03-28 19:51:54,191 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==================执行用例：入参值为空格 成功==================
2025-03-28 19:51:54,191 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为空列表==================
2025-03-28 19:51:54,191 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为空列表 成功==================
2025-03-28 19:51:54,191 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG修复情况评分计算测试结束==========
2025-03-28 19:51:54,192 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 19:51:54,230 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 19:59:11,131 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG密度计算BUG数评分测试开始==========
2025-03-28 19:59:11,427 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG密度为0，期望20分===============
2025-03-28 19:59:11,428 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为0，期望20分 成功===============
2025-03-28 19:59:11,429 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为0.1，期望20分==============
2025-03-28 19:59:11,429 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为0.1，期望20分 成功==============
2025-03-28 19:59:11,430 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为0.9，期望20分==============
2025-03-28 19:59:11,430 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为0.9，期望20分 成功==============
2025-03-28 19:59:11,430 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG密度为1，期望20分===============
2025-03-28 19:59:11,430 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为1，期望20分 成功===============
2025-03-28 19:59:11,431 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.1，期望15分==============
2025-03-28 19:59:11,431 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.1，期望15分 成功==============
2025-03-28 19:59:11,432 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.2，期望15分==============
2025-03-28 19:59:11,432 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.2，期望15分 成功==============
2025-03-28 19:59:11,432 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.4，期望15分==============
2025-03-28 19:59:11,432 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.4，期望15分 成功==============
2025-03-28 19:59:11,433 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.5，期望15分==============
2025-03-28 19:59:11,433 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.5，期望15分 成功==============
2025-03-28 19:59:11,434 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.6，期望10分==============
2025-03-28 19:59:11,434 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.6，期望10分 成功==============
2025-03-28 19:59:11,434 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.7，期望10分==============
2025-03-28 19:59:11,434 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.7，期望10分 成功==============
2025-03-28 19:59:11,435 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.9，期望10分==============
2025-03-28 19:59:11,435 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.9，期望10分 成功==============
2025-03-28 19:59:11,436 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG密度为2，期望10分===============
2025-03-28 19:59:11,436 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为2，期望10分 成功===============
2025-03-28 19:59:11,436 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为2.1，期望5分===============
2025-03-28 19:59:11,436 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为2.1，期望5分 成功==============
2025-03-28 19:59:11,437 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为2.2，期望5分===============
2025-03-28 19:59:11,437 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为2.2，期望5分 成功==============
2025-03-28 19:59:11,438 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为2.9，期望5分===============
2025-03-28 19:59:11,438 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为2.9，期望5分 成功==============
2025-03-28 19:59:11,438 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG密度为3，期望5分================
2025-03-28 19:59:11,438 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG密度为3，期望5分 成功===============
2025-03-28 19:59:11,439 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为3.1，期望1分===============
2025-03-28 19:59:11,439 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为3.1，期望1分 成功==============
2025-03-28 19:59:11,440 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为999，期望1分===============
2025-03-28 19:59:11,440 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为999，期望1分 成功==============
2025-03-28 19:59:11,440 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ================开始执行用例：BUG密度为很多小数点================
2025-03-28 19:59:11,440 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG密度为很多小数点 成功================
2025-03-28 19:59:11,441 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===========开始执行用例：BUG密度为-1，输入值不在任何评分区间内===========
2025-03-28 19:59:11,441 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==========执行用例：BUG密度为-1，输入值不在任何评分区间内 成功===========
2025-03-28 19:59:11,443 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==========开始执行用例：BUG密度为小写英文，输入参数X必须是数字类型==========
2025-03-28 19:59:11,443 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =========执行用例：BUG密度为小写英文，输入参数X必须是数字类型 成功==========
2025-03-28 19:59:11,443 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==========开始执行用例：BUG密度为大写英文，输入参数X必须是数字类型==========
2025-03-28 19:59:11,443 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =========执行用例：BUG密度为大写英文，输入参数X必须是数字类型 成功==========
2025-03-28 19:59:11,444 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===========开始执行用例：BUG密度为汉字，输入参数X必须是数字类型===========
2025-03-28 19:59:11,444 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==========执行用例：BUG密度为汉字，输入参数X必须是数字类型 成功===========
2025-03-28 19:59:11,445 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==========开始执行用例：BUG密度为特殊符号，输入参数X必须是数字类型==========
2025-03-28 19:59:11,445 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =========执行用例：BUG密度为特殊符号，输入参数X必须是数字类型 成功==========
2025-03-28 19:59:11,445 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===========开始执行用例：BUG密度为空字符串，输入参数X不能为空============
2025-03-28 19:59:11,445 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===========执行用例：BUG密度为空字符串，输入参数X不能为空 成功===========
2025-03-28 19:59:11,446 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =========开始执行用例：BUG密度为字符串空格，输入参数X必须是数字类型==========
2025-03-28 19:59:11,446 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =========执行用例：BUG密度为字符串空格，输入参数X必须是数字类型 成功=========
2025-03-28 19:59:11,447 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===========开始执行用例：BUG密度为null，输入参数X不能为空============
2025-03-28 19:59:11,447 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===========执行用例：BUG密度为null，输入参数X不能为空 成功===========
2025-03-28 19:59:11,447 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：不传值，输入参数X不能为空===============
2025-03-28 19:59:11,447 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：不传值，输入参数X不能为空 成功===============
2025-03-28 19:59:11,448 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG密度计算BUG数评分测试结束==========
2025-03-28 19:59:11,448 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG修复情况评分计算测试开始==========
2025-03-28 19:59:11,449 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ====开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG====
2025-03-28 19:59:11,449 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===执行用例：入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG 成功====
2025-03-28 19:59:11,450 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==开始执行用例：入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG==
2025-03-28 19:59:11,450 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =执行用例：入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功==
2025-03-28 19:59:11,450 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =====开始执行用例：入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG=====
2025-03-28 19:59:11,450 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ====执行用例：入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功=====
2025-03-28 19:59:11,451 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ====开始执行用例：入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG=====
2025-03-28 19:59:11,451 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ====执行用例：入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功====
2025-03-28 19:59:11,456 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ======开始执行用例：不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG======
2025-03-28 19:59:11,461 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =====执行用例：不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功======
2025-03-28 19:59:11,471 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===开始执行用例：入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG===
2025-03-28 19:59:11,474 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==执行用例：入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功===
2025-03-28 19:59:11,479 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG
2025-03-28 19:59:11,482 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG 成功
2025-03-28 19:59:11,483 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG
2025-03-28 19:59:11,483 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG 成功
2025-03-28 19:59:11,484 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG
2025-03-28 19:59:11,484 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG 成功
2025-03-28 19:59:11,484 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG
2025-03-28 19:59:11,484 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG 成功
2025-03-28 19:59:11,485 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG
2025-03-28 19:59:11,485 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG 成功
2025-03-28 19:59:11,486 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG
2025-03-28 19:59:11,486 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG 成功
2025-03-28 19:59:11,486 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG
2025-03-28 19:59:11,486 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG 成功
2025-03-28 19:59:11,487 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG
2025-03-28 19:59:11,487 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG 成功
2025-03-28 19:59:11,488 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG
2025-03-28 19:59:11,488 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG 成功
2025-03-28 19:59:11,488 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG
2025-03-28 19:59:11,488 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG 成功
2025-03-28 19:59:11,489 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG
2025-03-28 19:59:11,489 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG 成功
2025-03-28 19:59:11,490 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG
2025-03-28 19:59:11,490 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG 成功
2025-03-28 19:59:11,490 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG
2025-03-28 19:59:11,491 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG 成功
2025-03-28 19:59:11,491 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG
2025-03-28 19:59:11,491 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG 成功
2025-03-28 19:59:11,492 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG
2025-03-28 19:59:11,492 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG 成功
2025-03-28 19:59:11,493 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG
2025-03-28 19:59:11,493 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG 成功
2025-03-28 19:59:11,493 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG
2025-03-28 19:59:11,493 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG 成功
2025-03-28 19:59:11,495 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG
2025-03-28 19:59:11,495 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG 成功
2025-03-28 19:59:11,495 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG
2025-03-28 19:59:11,495 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG 成功
2025-03-28 19:59:11,496 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG
2025-03-28 19:59:11,496 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG 成功
2025-03-28 19:59:11,497 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG
2025-03-28 19:59:11,497 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG 成功
2025-03-28 19:59:11,498 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG
2025-03-28 19:59:11,498 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG 成功
2025-03-28 19:59:11,498 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG
2025-03-28 19:59:11,498 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG 成功
2025-03-28 19:59:11,499 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为小写英文==================
2025-03-28 19:59:11,499 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为小写英文 成功=================
2025-03-28 19:59:11,500 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为大写英文==================
2025-03-28 19:59:11,500 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为大写英文 成功=================
2025-03-28 19:59:11,500 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为整数===================
2025-03-28 19:59:11,500 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==================执行用例：入参值为整数 成功==================
2025-03-28 19:59:11,501 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为浮点数==================
2025-03-28 19:59:11,501 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为浮点数 成功==================
2025-03-28 19:59:11,502 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为汉字===================
2025-03-28 19:59:11,502 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==================执行用例：入参值为汉字 成功==================
2025-03-28 19:59:11,503 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为特殊符号==================
2025-03-28 19:59:11,503 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为特殊符号 成功=================
2025-03-28 19:59:11,503 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为空字符串==================
2025-03-28 19:59:11,503 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为空字符串 成功=================
2025-03-28 19:59:11,504 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为空格===================
2025-03-28 19:59:11,504 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==================执行用例：入参值为空格 成功==================
2025-03-28 19:59:11,505 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为空列表==================
2025-03-28 19:59:11,505 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为空列表 成功==================
2025-03-28 19:59:11,505 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG修复情况评分计算测试结束==========
2025-03-28 19:59:11,506 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 19:59:11,546 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 20:01:21,056 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG密度计算BUG数评分测试开始==========
2025-03-28 20:01:21,372 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG密度为0，期望20分===============
2025-03-28 20:01:21,373 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为0，期望20分 成功===============
2025-03-28 20:01:21,374 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为0.1，期望20分==============
2025-03-28 20:01:21,374 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为0.1，期望20分 成功==============
2025-03-28 20:01:21,375 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为0.9，期望20分==============
2025-03-28 20:01:21,375 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为0.9，期望20分 成功==============
2025-03-28 20:01:21,375 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG密度为1，期望20分===============
2025-03-28 20:01:21,375 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为1，期望20分 成功===============
2025-03-28 20:01:21,376 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.1，期望15分==============
2025-03-28 20:01:21,376 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.1，期望15分 成功==============
2025-03-28 20:01:21,377 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.2，期望15分==============
2025-03-28 20:01:21,377 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.2，期望15分 成功==============
2025-03-28 20:01:21,378 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.4，期望15分==============
2025-03-28 20:01:21,378 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.4，期望15分 成功==============
2025-03-28 20:01:21,379 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.5，期望15分==============
2025-03-28 20:01:21,379 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.5，期望15分 成功==============
2025-03-28 20:01:21,379 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.6，期望10分==============
2025-03-28 20:01:21,379 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.6，期望10分 成功==============
2025-03-28 20:01:21,380 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.7，期望10分==============
2025-03-28 20:01:21,380 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.7，期望10分 成功==============
2025-03-28 20:01:21,381 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.9，期望10分==============
2025-03-28 20:01:21,381 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.9，期望10分 成功==============
2025-03-28 20:01:21,381 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG密度为2，期望10分===============
2025-03-28 20:01:21,381 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为2，期望10分 成功===============
2025-03-28 20:01:21,382 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为2.1，期望5分===============
2025-03-28 20:01:21,382 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为2.1，期望5分 成功==============
2025-03-28 20:01:21,383 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为2.2，期望5分===============
2025-03-28 20:01:21,383 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为2.2，期望5分 成功==============
2025-03-28 20:01:21,383 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为2.9，期望5分===============
2025-03-28 20:01:21,383 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为2.9，期望5分 成功==============
2025-03-28 20:01:21,384 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG密度为3，期望5分================
2025-03-28 20:01:21,384 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG密度为3，期望5分 成功===============
2025-03-28 20:01:21,385 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为3.1，期望1分===============
2025-03-28 20:01:21,385 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为3.1，期望1分 成功==============
2025-03-28 20:01:21,385 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为999，期望1分===============
2025-03-28 20:01:21,385 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为999，期望1分 成功==============
2025-03-28 20:01:21,386 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ================开始执行用例：BUG密度为很多小数点================
2025-03-28 20:01:21,386 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG密度为很多小数点 成功================
2025-03-28 20:01:21,386 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===========开始执行用例：BUG密度为-1，输入值不在任何评分区间内===========
2025-03-28 20:01:21,387 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==========执行用例：BUG密度为-1，输入值不在任何评分区间内 成功===========
2025-03-28 20:01:21,387 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==========开始执行用例：BUG密度为小写英文，输入参数X必须是数字类型==========
2025-03-28 20:01:21,387 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =========执行用例：BUG密度为小写英文，输入参数X必须是数字类型 成功==========
2025-03-28 20:01:21,388 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==========开始执行用例：BUG密度为大写英文，输入参数X必须是数字类型==========
2025-03-28 20:01:21,388 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =========执行用例：BUG密度为大写英文，输入参数X必须是数字类型 成功==========
2025-03-28 20:01:21,389 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===========开始执行用例：BUG密度为汉字，输入参数X必须是数字类型===========
2025-03-28 20:01:21,389 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==========执行用例：BUG密度为汉字，输入参数X必须是数字类型 成功===========
2025-03-28 20:01:21,389 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==========开始执行用例：BUG密度为特殊符号，输入参数X必须是数字类型==========
2025-03-28 20:01:21,389 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =========执行用例：BUG密度为特殊符号，输入参数X必须是数字类型 成功==========
2025-03-28 20:01:21,390 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===========开始执行用例：BUG密度为空字符串，输入参数X不能为空============
2025-03-28 20:01:21,390 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===========执行用例：BUG密度为空字符串，输入参数X不能为空 成功===========
2025-03-28 20:01:21,390 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =========开始执行用例：BUG密度为字符串空格，输入参数X必须是数字类型==========
2025-03-28 20:01:21,390 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =========执行用例：BUG密度为字符串空格，输入参数X必须是数字类型 成功=========
2025-03-28 20:01:21,391 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===========开始执行用例：BUG密度为null，输入参数X不能为空============
2025-03-28 20:01:21,391 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===========执行用例：BUG密度为null，输入参数X不能为空 成功===========
2025-03-28 20:01:21,392 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：不传值，输入参数X不能为空===============
2025-03-28 20:01:21,392 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：不传值，输入参数X不能为空 成功===============
2025-03-28 20:01:21,392 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG密度计算BUG数评分测试结束==========
2025-03-28 20:01:21,393 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG修复情况评分计算测试开始==========
2025-03-28 20:01:21,393 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ====开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG====
2025-03-28 20:01:21,393 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===执行用例：入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG 成功====
2025-03-28 20:01:21,394 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==开始执行用例：入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG==
2025-03-28 20:01:21,394 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =执行用例：入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功==
2025-03-28 20:01:21,395 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =====开始执行用例：入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG=====
2025-03-28 20:01:21,395 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ====执行用例：入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功=====
2025-03-28 20:01:21,395 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ====开始执行用例：入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG=====
2025-03-28 20:01:21,395 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ====执行用例：入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功====
2025-03-28 20:01:21,396 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ======开始执行用例：不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG======
2025-03-28 20:01:21,396 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =====执行用例：不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功======
2025-03-28 20:01:21,397 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===开始执行用例：入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG===
2025-03-28 20:01:21,397 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==执行用例：入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功===
2025-03-28 20:01:21,398 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG
2025-03-28 20:01:21,398 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG 成功
2025-03-28 20:01:21,398 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG
2025-03-28 20:01:21,398 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG 成功
2025-03-28 20:01:21,399 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG
2025-03-28 20:01:21,399 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG 成功
2025-03-28 20:01:21,400 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG
2025-03-28 20:01:21,400 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG 成功
2025-03-28 20:01:21,400 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG
2025-03-28 20:01:21,400 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG 成功
2025-03-28 20:01:21,401 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG
2025-03-28 20:01:21,401 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG 成功
2025-03-28 20:01:21,402 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG
2025-03-28 20:01:21,402 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG 成功
2025-03-28 20:01:21,402 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG
2025-03-28 20:01:21,402 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG 成功
2025-03-28 20:01:21,403 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG
2025-03-28 20:01:21,403 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG 成功
2025-03-28 20:01:21,404 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG
2025-03-28 20:01:21,404 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG 成功
2025-03-28 20:01:21,405 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG
2025-03-28 20:01:21,405 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG 成功
2025-03-28 20:01:21,405 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG
2025-03-28 20:01:21,405 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG 成功
2025-03-28 20:01:21,406 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG
2025-03-28 20:01:21,406 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG 成功
2025-03-28 20:01:21,407 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG
2025-03-28 20:01:21,407 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG 成功
2025-03-28 20:01:21,408 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG
2025-03-28 20:01:21,408 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG 成功
2025-03-28 20:01:21,408 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG
2025-03-28 20:01:21,408 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG 成功
2025-03-28 20:01:21,409 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG
2025-03-28 20:01:21,409 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG 成功
2025-03-28 20:01:21,410 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG
2025-03-28 20:01:21,410 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG 成功
2025-03-28 20:01:21,410 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG
2025-03-28 20:01:21,411 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG 成功
2025-03-28 20:01:21,411 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG
2025-03-28 20:01:21,411 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG 成功
2025-03-28 20:01:21,412 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG
2025-03-28 20:01:21,412 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG 成功
2025-03-28 20:01:21,413 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG
2025-03-28 20:01:21,413 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG 成功
2025-03-28 20:01:21,413 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG
2025-03-28 20:01:21,413 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG 成功
2025-03-28 20:01:21,414 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为小写英文==================
2025-03-28 20:01:21,414 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为小写英文 成功=================
2025-03-28 20:01:21,415 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为大写英文==================
2025-03-28 20:01:21,415 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为大写英文 成功=================
2025-03-28 20:01:21,415 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为整数===================
2025-03-28 20:01:21,415 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==================执行用例：入参值为整数 成功==================
2025-03-28 20:01:21,416 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为浮点数==================
2025-03-28 20:01:21,416 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为浮点数 成功==================
2025-03-28 20:01:21,417 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为汉字===================
2025-03-28 20:01:21,417 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==================执行用例：入参值为汉字 成功==================
2025-03-28 20:01:21,417 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为特殊符号==================
2025-03-28 20:01:21,417 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为特殊符号 成功=================
2025-03-28 20:01:21,418 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为空字符串==================
2025-03-28 20:01:21,418 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为空字符串 成功=================
2025-03-28 20:01:21,419 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为空格===================
2025-03-28 20:01:21,419 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==================执行用例：入参值为空格 成功==================
2025-03-28 20:01:21,420 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为空列表==================
2025-03-28 20:01:21,420 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为空列表 成功==================
2025-03-28 20:01:21,420 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG修复情况评分计算测试结束==========
2025-03-28 20:01:21,420 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 20:01:21,460 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 20:03:49,676 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG密度计算BUG数评分测试开始==========
2025-03-28 20:03:49,990 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG密度为0，期望20分===============
2025-03-28 20:03:49,990 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为0，期望20分 成功===============
2025-03-28 20:03:49,991 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为0.1，期望20分==============
2025-03-28 20:03:49,991 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为0.1，期望20分 成功==============
2025-03-28 20:03:49,992 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为0.9，期望20分==============
2025-03-28 20:03:49,992 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为0.9，期望20分 成功==============
2025-03-28 20:03:49,993 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG密度为1，期望20分===============
2025-03-28 20:03:49,993 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为1，期望20分 成功===============
2025-03-28 20:03:49,993 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.1，期望15分==============
2025-03-28 20:03:49,993 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.1，期望15分 成功==============
2025-03-28 20:03:49,995 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.2，期望15分==============
2025-03-28 20:03:49,995 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.2，期望15分 成功==============
2025-03-28 20:03:49,996 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.4，期望15分==============
2025-03-28 20:03:49,996 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.4，期望15分 成功==============
2025-03-28 20:03:49,996 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.5，期望15分==============
2025-03-28 20:03:49,996 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.5，期望15分 成功==============
2025-03-28 20:03:49,997 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.6，期望10分==============
2025-03-28 20:03:49,997 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.6，期望10分 成功==============
2025-03-28 20:03:49,998 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.7，期望10分==============
2025-03-28 20:03:49,998 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.7，期望10分 成功==============
2025-03-28 20:03:49,998 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.9，期望10分==============
2025-03-28 20:03:49,998 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.9，期望10分 成功==============
2025-03-28 20:03:49,999 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG密度为2，期望10分===============
2025-03-28 20:03:49,999 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为2，期望10分 成功===============
2025-03-28 20:03:50,000 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为2.1，期望5分===============
2025-03-28 20:03:50,000 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为2.1，期望5分 成功==============
2025-03-28 20:03:50,000 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为2.2，期望5分===============
2025-03-28 20:03:50,000 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为2.2，期望5分 成功==============
2025-03-28 20:03:50,001 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为2.9，期望5分===============
2025-03-28 20:03:50,001 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为2.9，期望5分 成功==============
2025-03-28 20:03:50,001 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG密度为3，期望5分================
2025-03-28 20:03:50,001 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG密度为3，期望5分 成功===============
2025-03-28 20:03:50,002 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为3.1，期望1分===============
2025-03-28 20:03:50,002 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为3.1，期望1分 成功==============
2025-03-28 20:03:50,003 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为999，期望1分===============
2025-03-28 20:03:50,003 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为999，期望1分 成功==============
2025-03-28 20:03:50,003 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ================开始执行用例：BUG密度为很多小数点================
2025-03-28 20:03:50,003 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG密度为很多小数点 成功================
2025-03-28 20:03:50,004 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===========开始执行用例：BUG密度为-1，输入值不在任何评分区间内===========
2025-03-28 20:03:50,004 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==========执行用例：BUG密度为-1，输入值不在任何评分区间内 成功===========
2025-03-28 20:03:50,005 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==========开始执行用例：BUG密度为小写英文，输入参数X必须是数字类型==========
2025-03-28 20:03:50,005 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =========执行用例：BUG密度为小写英文，输入参数X必须是数字类型 成功==========
2025-03-28 20:03:50,006 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==========开始执行用例：BUG密度为大写英文，输入参数X必须是数字类型==========
2025-03-28 20:03:50,006 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =========执行用例：BUG密度为大写英文，输入参数X必须是数字类型 成功==========
2025-03-28 20:03:50,006 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===========开始执行用例：BUG密度为汉字，输入参数X必须是数字类型===========
2025-03-28 20:03:50,006 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==========执行用例：BUG密度为汉字，输入参数X必须是数字类型 成功===========
2025-03-28 20:03:50,007 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==========开始执行用例：BUG密度为特殊符号，输入参数X必须是数字类型==========
2025-03-28 20:03:50,007 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =========执行用例：BUG密度为特殊符号，输入参数X必须是数字类型 成功==========
2025-03-28 20:03:50,007 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===========开始执行用例：BUG密度为空字符串，输入参数X不能为空============
2025-03-28 20:03:50,007 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===========执行用例：BUG密度为空字符串，输入参数X不能为空 成功===========
2025-03-28 20:03:50,008 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =========开始执行用例：BUG密度为字符串空格，输入参数X必须是数字类型==========
2025-03-28 20:03:50,008 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =========执行用例：BUG密度为字符串空格，输入参数X必须是数字类型 成功=========
2025-03-28 20:03:50,009 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===========开始执行用例：BUG密度为null，输入参数X不能为空============
2025-03-28 20:03:50,009 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===========执行用例：BUG密度为null，输入参数X不能为空 成功===========
2025-03-28 20:03:50,009 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：不传值，输入参数X不能为空===============
2025-03-28 20:03:50,009 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：不传值，输入参数X不能为空 成功===============
2025-03-28 20:03:50,010 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG密度计算BUG数评分测试结束==========
2025-03-28 20:03:50,010 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG修复情况评分计算测试开始==========
2025-03-28 20:03:50,010 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ====开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG====
2025-03-28 20:03:50,010 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===执行用例：入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG 成功====
2025-03-28 20:03:50,011 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==开始执行用例：入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG==
2025-03-28 20:03:50,011 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =执行用例：入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功==
2025-03-28 20:03:50,012 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =====开始执行用例：入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG=====
2025-03-28 20:03:50,012 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ====执行用例：入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功=====
2025-03-28 20:03:50,013 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ====开始执行用例：入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG=====
2025-03-28 20:03:50,013 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ====执行用例：入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功====
2025-03-28 20:03:50,013 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ======开始执行用例：不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG======
2025-03-28 20:03:50,013 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =====执行用例：不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功======
2025-03-28 20:03:50,014 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===开始执行用例：入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG===
2025-03-28 20:03:50,014 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==执行用例：入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功===
2025-03-28 20:03:50,015 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG
2025-03-28 20:03:50,015 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG 成功
2025-03-28 20:03:50,015 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG
2025-03-28 20:03:50,015 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG 成功
2025-03-28 20:03:50,016 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG
2025-03-28 20:03:50,016 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG 成功
2025-03-28 20:03:50,017 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG
2025-03-28 20:03:50,017 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG 成功
2025-03-28 20:03:50,018 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG
2025-03-28 20:03:50,018 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG 成功
2025-03-28 20:03:50,018 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG
2025-03-28 20:03:50,018 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG 成功
2025-03-28 20:03:50,019 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG
2025-03-28 20:03:50,019 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG 成功
2025-03-28 20:03:50,020 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG
2025-03-28 20:03:50,020 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG 成功
2025-03-28 20:03:50,021 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG
2025-03-28 20:03:50,021 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG 成功
2025-03-28 20:03:50,021 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG
2025-03-28 20:03:50,021 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG 成功
2025-03-28 20:03:50,022 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG
2025-03-28 20:03:50,022 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG 成功
2025-03-28 20:03:50,022 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG
2025-03-28 20:03:50,022 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG 成功
2025-03-28 20:03:50,023 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG
2025-03-28 20:03:50,023 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG 成功
2025-03-28 20:03:50,024 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG
2025-03-28 20:03:50,024 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG 成功
2025-03-28 20:03:50,024 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG
2025-03-28 20:03:50,024 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG 成功
2025-03-28 20:03:50,025 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG
2025-03-28 20:03:50,025 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG 成功
2025-03-28 20:03:50,026 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG
2025-03-28 20:03:50,026 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG 成功
2025-03-28 20:03:50,026 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG
2025-03-28 20:03:50,026 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG 成功
2025-03-28 20:03:50,027 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG
2025-03-28 20:03:50,027 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG 成功
2025-03-28 20:03:50,028 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG
2025-03-28 20:03:50,028 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG 成功
2025-03-28 20:03:50,028 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG
2025-03-28 20:03:50,028 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG 成功
2025-03-28 20:03:50,029 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG
2025-03-28 20:03:50,029 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG 成功
2025-03-28 20:03:50,030 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG
2025-03-28 20:03:50,030 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG 成功
2025-03-28 20:03:50,030 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为小写英文==================
2025-03-28 20:03:50,030 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为小写英文 成功=================
2025-03-28 20:03:50,031 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为大写英文==================
2025-03-28 20:03:50,031 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为大写英文 成功=================
2025-03-28 20:03:50,031 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为整数===================
2025-03-28 20:03:50,031 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==================执行用例：入参值为整数 成功==================
2025-03-28 20:03:50,032 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为浮点数==================
2025-03-28 20:03:50,032 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为浮点数 成功==================
2025-03-28 20:03:50,033 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为汉字===================
2025-03-28 20:03:50,033 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==================执行用例：入参值为汉字 成功==================
2025-03-28 20:03:50,033 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为特殊符号==================
2025-03-28 20:03:50,033 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为特殊符号 成功=================
2025-03-28 20:03:50,034 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为空字符串==================
2025-03-28 20:03:50,034 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为空字符串 成功=================
2025-03-28 20:03:50,035 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为空格===================
2025-03-28 20:03:50,035 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==================执行用例：入参值为空格 成功==================
2025-03-28 20:03:50,035 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为空列表==================
2025-03-28 20:03:50,035 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为空列表 成功==================
2025-03-28 20:03:50,036 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG修复情况评分计算测试结束==========
2025-03-28 20:03:50,036 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 20:03:50,074 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 20:05:42,832 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG密度计算BUG数评分测试开始==========
2025-03-28 20:05:43,143 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG密度为0，期望20分===============
2025-03-28 20:05:43,143 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为0，期望20分 成功===============
2025-03-28 20:05:43,144 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为0.1，期望20分==============
2025-03-28 20:05:43,144 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为0.1，期望20分 成功==============
2025-03-28 20:05:43,145 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为0.9，期望20分==============
2025-03-28 20:05:43,145 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为0.9，期望20分 成功==============
2025-03-28 20:05:43,146 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG密度为1，期望20分===============
2025-03-28 20:05:43,146 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为1，期望20分 成功===============
2025-03-28 20:05:43,147 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.1，期望15分==============
2025-03-28 20:05:43,147 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.1，期望15分 成功==============
2025-03-28 20:05:43,147 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.2，期望15分==============
2025-03-28 20:05:43,147 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.2，期望15分 成功==============
2025-03-28 20:05:43,148 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.4，期望15分==============
2025-03-28 20:05:43,148 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.4，期望15分 成功==============
2025-03-28 20:05:43,149 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.5，期望15分==============
2025-03-28 20:05:43,149 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.5，期望15分 成功==============
2025-03-28 20:05:43,149 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.6，期望10分==============
2025-03-28 20:05:43,149 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.6，期望10分 成功==============
2025-03-28 20:05:43,150 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.7，期望10分==============
2025-03-28 20:05:43,150 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.7，期望10分 成功==============
2025-03-28 20:05:43,151 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.9，期望10分==============
2025-03-28 20:05:43,151 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.9，期望10分 成功==============
2025-03-28 20:05:43,151 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG密度为2，期望10分===============
2025-03-28 20:05:43,151 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为2，期望10分 成功===============
2025-03-28 20:05:43,152 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为2.1，期望5分===============
2025-03-28 20:05:43,152 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为2.1，期望5分 成功==============
2025-03-28 20:05:43,152 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为2.2，期望5分===============
2025-03-28 20:05:43,153 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为2.2，期望5分 成功==============
2025-03-28 20:05:43,153 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为2.9，期望5分===============
2025-03-28 20:05:43,153 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为2.9，期望5分 成功==============
2025-03-28 20:05:43,154 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG密度为3，期望5分================
2025-03-28 20:05:43,154 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG密度为3，期望5分 成功===============
2025-03-28 20:05:43,155 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为3.1，期望1分===============
2025-03-28 20:05:43,155 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为3.1，期望1分 成功==============
2025-03-28 20:05:43,155 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为999，期望1分===============
2025-03-28 20:05:43,155 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为999，期望1分 成功==============
2025-03-28 20:05:43,156 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ================开始执行用例：BUG密度为很多小数点================
2025-03-28 20:05:43,156 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG密度为很多小数点 成功================
2025-03-28 20:05:43,157 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===========开始执行用例：BUG密度为-1，输入值不在任何评分区间内===========
2025-03-28 20:05:43,157 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==========执行用例：BUG密度为-1，输入值不在任何评分区间内 成功===========
2025-03-28 20:05:43,157 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==========开始执行用例：BUG密度为小写英文，输入参数X必须是数字类型==========
2025-03-28 20:05:43,157 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =========执行用例：BUG密度为小写英文，输入参数X必须是数字类型 成功==========
2025-03-28 20:05:43,158 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==========开始执行用例：BUG密度为大写英文，输入参数X必须是数字类型==========
2025-03-28 20:05:43,158 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =========执行用例：BUG密度为大写英文，输入参数X必须是数字类型 成功==========
2025-03-28 20:05:43,159 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===========开始执行用例：BUG密度为汉字，输入参数X必须是数字类型===========
2025-03-28 20:05:43,159 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==========执行用例：BUG密度为汉字，输入参数X必须是数字类型 成功===========
2025-03-28 20:05:43,159 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==========开始执行用例：BUG密度为特殊符号，输入参数X必须是数字类型==========
2025-03-28 20:05:43,159 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =========执行用例：BUG密度为特殊符号，输入参数X必须是数字类型 成功==========
2025-03-28 20:05:43,160 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===========开始执行用例：BUG密度为空字符串，输入参数X不能为空============
2025-03-28 20:05:43,160 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===========执行用例：BUG密度为空字符串，输入参数X不能为空 成功===========
2025-03-28 20:05:43,161 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =========开始执行用例：BUG密度为字符串空格，输入参数X必须是数字类型==========
2025-03-28 20:05:43,161 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =========执行用例：BUG密度为字符串空格，输入参数X必须是数字类型 成功=========
2025-03-28 20:05:43,162 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===========开始执行用例：BUG密度为null，输入参数X不能为空============
2025-03-28 20:05:43,162 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===========执行用例：BUG密度为null，输入参数X不能为空 成功===========
2025-03-28 20:05:43,162 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：不传值，输入参数X不能为空===============
2025-03-28 20:05:43,162 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：不传值，输入参数X不能为空 成功===============
2025-03-28 20:05:43,162 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG密度计算BUG数评分测试结束==========
2025-03-28 20:05:43,163 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG重启和未修复数量计算评分测试开始==========
2025-03-28 20:05:43,163 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG重启数0，期望20分===============
2025-03-28 20:05:43,163 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG重启数0，期望20分 成功===============
2025-03-28 20:05:43,164 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG重启数1，期望15分===============
2025-03-28 20:05:43,164 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG重启数1，期望15分 成功===============
2025-03-28 20:05:43,164 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG重启数2，期望10分===============
2025-03-28 20:05:43,164 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG重启数2，期望10分 成功===============
2025-03-28 20:05:43,165 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG重启数3，期望5分================
2025-03-28 20:05:43,165 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG重启数3，期望5分 成功===============
2025-03-28 20:05:43,166 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG重启数4，期望1分================
2025-03-28 20:05:43,166 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG重启数4，期望1分 成功===============
2025-03-28 20:05:43,166 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG重启数5，期望1分================
2025-03-28 20:05:43,166 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG重启数5，期望1分 成功===============
2025-03-28 20:05:43,167 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG重启数9999，期望1分==============
2025-03-28 20:05:43,167 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG重启数9999，期望1分 成功==============
2025-03-28 20:05:43,167 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG重启数很长，期望1分===============
2025-03-28 20:05:43,167 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG重启数很长，期望1分 成功===============
2025-03-28 20:05:43,168 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：BUG重启数-1==================
2025-03-28 20:05:43,168 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：BUG重启数-1 成功=================
2025-03-28 20:05:43,169 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ================开始执行用例：BUG重启数为浮点数=================
2025-03-28 20:05:43,169 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ================执行用例：BUG重启数为浮点数 成功================
2025-03-28 20:05:43,169 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ================开始执行用例：BUG重启数为小写英文================
2025-03-28 20:05:43,169 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG重启数为小写英文 成功================
2025-03-28 20:05:43,170 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ================开始执行用例：BUG重启数为大写英文================
2025-03-28 20:05:43,170 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG重启数为大写英文 成功================
2025-03-28 20:05:43,171 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：BUG重启数为汉字=================
2025-03-28 20:05:43,171 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ================执行用例：BUG重启数为汉字 成功=================
2025-03-28 20:05:43,171 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ================开始执行用例：BUG重启数为特殊符号================
2025-03-28 20:05:43,171 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG重启数为特殊符号 成功================
2025-03-28 20:05:43,172 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：BUG重启数为空格=================
2025-03-28 20:05:43,172 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ================执行用例：BUG重启数为空格 成功=================
2025-03-28 20:05:43,172 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ================开始执行用例：BUG重启数为空字符串================
2025-03-28 20:05:43,172 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG重启数为空字符串 成功================
2025-03-28 20:05:43,173 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ================开始执行用例：BUG重启数为null================
2025-03-28 20:05:43,173 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG重启数为null 成功================
2025-03-28 20:05:43,174 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：不传BUG重启数==================
2025-03-28 20:05:43,174 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：不传BUG重启数 成功=================
2025-03-28 20:05:43,174 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG重启和未修复数量计算评分测试结束==========
2025-03-28 20:05:43,174 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG修复情况评分计算测试开始==========
2025-03-28 20:05:43,175 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ====开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG====
2025-03-28 20:05:43,175 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===执行用例：入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG 成功====
2025-03-28 20:05:43,175 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==开始执行用例：入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG==
2025-03-28 20:05:43,175 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =执行用例：入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功==
2025-03-28 20:05:43,176 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =====开始执行用例：入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG=====
2025-03-28 20:05:43,176 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ====执行用例：入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功=====
2025-03-28 20:05:43,176 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ====开始执行用例：入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG=====
2025-03-28 20:05:43,176 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ====执行用例：入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功====
2025-03-28 20:05:43,177 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ======开始执行用例：不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG======
2025-03-28 20:05:43,177 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =====执行用例：不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功======
2025-03-28 20:05:43,178 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===开始执行用例：入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG===
2025-03-28 20:05:43,178 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==执行用例：入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功===
2025-03-28 20:05:43,178 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG
2025-03-28 20:05:43,178 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG 成功
2025-03-28 20:05:43,179 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG
2025-03-28 20:05:43,179 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG 成功
2025-03-28 20:05:43,180 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG
2025-03-28 20:05:43,180 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG 成功
2025-03-28 20:05:43,181 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG
2025-03-28 20:05:43,181 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG 成功
2025-03-28 20:05:43,181 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG
2025-03-28 20:05:43,181 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG 成功
2025-03-28 20:05:43,182 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG
2025-03-28 20:05:43,182 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG 成功
2025-03-28 20:05:43,183 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG
2025-03-28 20:05:43,183 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG 成功
2025-03-28 20:05:43,183 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG
2025-03-28 20:05:43,183 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG 成功
2025-03-28 20:05:43,184 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG
2025-03-28 20:05:43,184 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG 成功
2025-03-28 20:05:43,185 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG
2025-03-28 20:05:43,185 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG 成功
2025-03-28 20:05:43,185 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG
2025-03-28 20:05:43,185 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG 成功
2025-03-28 20:05:43,186 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG
2025-03-28 20:05:43,186 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG 成功
2025-03-28 20:05:43,187 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG
2025-03-28 20:05:43,187 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG 成功
2025-03-28 20:05:43,188 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG
2025-03-28 20:05:43,188 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG 成功
2025-03-28 20:05:43,188 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG
2025-03-28 20:05:43,188 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG 成功
2025-03-28 20:05:43,189 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG
2025-03-28 20:05:43,189 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG 成功
2025-03-28 20:05:43,189 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG
2025-03-28 20:05:43,190 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG 成功
2025-03-28 20:05:43,190 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG
2025-03-28 20:05:43,190 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG 成功
2025-03-28 20:05:43,191 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG
2025-03-28 20:05:43,191 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG 成功
2025-03-28 20:05:43,191 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG
2025-03-28 20:05:43,191 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG 成功
2025-03-28 20:05:43,192 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG
2025-03-28 20:05:43,192 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG 成功
2025-03-28 20:05:43,193 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG
2025-03-28 20:05:43,193 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG 成功
2025-03-28 20:05:43,193 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG
2025-03-28 20:05:43,193 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG 成功
2025-03-28 20:05:43,194 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为小写英文==================
2025-03-28 20:05:43,194 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为小写英文 成功=================
2025-03-28 20:05:43,195 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为大写英文==================
2025-03-28 20:05:43,195 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为大写英文 成功=================
2025-03-28 20:05:43,195 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为整数===================
2025-03-28 20:05:43,195 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==================执行用例：入参值为整数 成功==================
2025-03-28 20:05:43,196 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为浮点数==================
2025-03-28 20:05:43,196 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为浮点数 成功==================
2025-03-28 20:05:43,197 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为汉字===================
2025-03-28 20:05:43,197 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==================执行用例：入参值为汉字 成功==================
2025-03-28 20:05:43,197 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为特殊符号==================
2025-03-28 20:05:43,197 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为特殊符号 成功=================
2025-03-28 20:05:43,198 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为空字符串==================
2025-03-28 20:05:43,198 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为空字符串 成功=================
2025-03-28 20:05:43,199 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为空格===================
2025-03-28 20:05:43,199 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==================执行用例：入参值为空格 成功==================
2025-03-28 20:05:43,199 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为空列表==================
2025-03-28 20:05:43,199 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为空列表 成功==================
2025-03-28 20:05:43,199 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG修复情况评分计算测试结束==========
2025-03-28 20:05:43,200 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 20:05:43,237 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 20:09:09,809 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG密度计算BUG数评分测试开始==========
2025-03-28 20:09:10,116 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG密度为0，期望20分===============
2025-03-28 20:09:10,116 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为0，期望20分 成功===============
2025-03-28 20:09:10,118 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为0.1，期望20分==============
2025-03-28 20:09:10,118 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为0.1，期望20分 成功==============
2025-03-28 20:09:10,118 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为0.9，期望20分==============
2025-03-28 20:09:10,118 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为0.9，期望20分 成功==============
2025-03-28 20:09:10,119 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG密度为1，期望20分===============
2025-03-28 20:09:10,119 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为1，期望20分 成功===============
2025-03-28 20:09:10,120 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.1，期望15分==============
2025-03-28 20:09:10,120 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.1，期望15分 成功==============
2025-03-28 20:09:10,121 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.2，期望15分==============
2025-03-28 20:09:10,121 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.2，期望15分 成功==============
2025-03-28 20:09:10,121 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.4，期望15分==============
2025-03-28 20:09:10,121 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.4，期望15分 成功==============
2025-03-28 20:09:10,122 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.5，期望15分==============
2025-03-28 20:09:10,122 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.5，期望15分 成功==============
2025-03-28 20:09:10,123 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.6，期望10分==============
2025-03-28 20:09:10,123 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.6，期望10分 成功==============
2025-03-28 20:09:10,123 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.7，期望10分==============
2025-03-28 20:09:10,123 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.7，期望10分 成功==============
2025-03-28 20:09:10,124 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为1.9，期望10分==============
2025-03-28 20:09:10,124 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG密度为1.9，期望10分 成功==============
2025-03-28 20:09:10,125 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG密度为2，期望10分===============
2025-03-28 20:09:10,125 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为2，期望10分 成功===============
2025-03-28 20:09:10,125 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为2.1，期望5分===============
2025-03-28 20:09:10,125 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为2.1，期望5分 成功==============
2025-03-28 20:09:10,126 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为2.2，期望5分===============
2025-03-28 20:09:10,126 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为2.2，期望5分 成功==============
2025-03-28 20:09:10,126 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为2.9，期望5分===============
2025-03-28 20:09:10,126 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为2.9，期望5分 成功==============
2025-03-28 20:09:10,127 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG密度为3，期望5分================
2025-03-28 20:09:10,127 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG密度为3，期望5分 成功===============
2025-03-28 20:09:10,128 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为3.1，期望1分===============
2025-03-28 20:09:10,128 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为3.1，期望1分 成功==============
2025-03-28 20:09:10,128 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG密度为999，期望1分===============
2025-03-28 20:09:10,128 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG密度为999，期望1分 成功==============
2025-03-28 20:09:10,129 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ================开始执行用例：BUG密度为很多小数点================
2025-03-28 20:09:10,129 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG密度为很多小数点 成功================
2025-03-28 20:09:10,130 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===========开始执行用例：BUG密度为-1，输入值不在任何评分区间内===========
2025-03-28 20:09:10,130 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==========执行用例：BUG密度为-1，输入值不在任何评分区间内 成功===========
2025-03-28 20:09:10,130 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==========开始执行用例：BUG密度为小写英文，输入参数X必须是数字类型==========
2025-03-28 20:09:10,130 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =========执行用例：BUG密度为小写英文，输入参数X必须是数字类型 成功==========
2025-03-28 20:09:10,131 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==========开始执行用例：BUG密度为大写英文，输入参数X必须是数字类型==========
2025-03-28 20:09:10,131 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =========执行用例：BUG密度为大写英文，输入参数X必须是数字类型 成功==========
2025-03-28 20:09:10,131 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===========开始执行用例：BUG密度为汉字，输入参数X必须是数字类型===========
2025-03-28 20:09:10,131 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==========执行用例：BUG密度为汉字，输入参数X必须是数字类型 成功===========
2025-03-28 20:09:10,132 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==========开始执行用例：BUG密度为特殊符号，输入参数X必须是数字类型==========
2025-03-28 20:09:10,132 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =========执行用例：BUG密度为特殊符号，输入参数X必须是数字类型 成功==========
2025-03-28 20:09:10,133 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===========开始执行用例：BUG密度为空字符串，输入参数X不能为空============
2025-03-28 20:09:10,133 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===========执行用例：BUG密度为空字符串，输入参数X不能为空 成功===========
2025-03-28 20:09:10,133 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =========开始执行用例：BUG密度为字符串空格，输入参数X必须是数字类型==========
2025-03-28 20:09:10,133 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =========执行用例：BUG密度为字符串空格，输入参数X必须是数字类型 成功=========
2025-03-28 20:09:10,134 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===========开始执行用例：BUG密度为null，输入参数X不能为空============
2025-03-28 20:09:10,134 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===========执行用例：BUG密度为null，输入参数X不能为空 成功===========
2025-03-28 20:09:10,134 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：不传值，输入参数X不能为空===============
2025-03-28 20:09:10,135 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：不传值，输入参数X不能为空 成功===============
2025-03-28 20:09:10,135 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG密度计算BUG数评分测试结束==========
2025-03-28 20:09:10,135 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG重启和未修复数量计算评分测试开始==========
2025-03-28 20:09:10,135 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG重启数0，期望20分===============
2025-03-28 20:09:10,135 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG重启数0，期望20分 成功===============
2025-03-28 20:09:10,136 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG重启数1，期望15分===============
2025-03-28 20:09:10,136 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG重启数1，期望15分 成功===============
2025-03-28 20:09:10,137 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG重启数2，期望10分===============
2025-03-28 20:09:10,137 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG重启数2，期望10分 成功===============
2025-03-28 20:09:10,137 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG重启数3，期望5分================
2025-03-28 20:09:10,137 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG重启数3，期望5分 成功===============
2025-03-28 20:09:10,138 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG重启数4，期望1分================
2025-03-28 20:09:10,138 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG重启数4，期望1分 成功===============
2025-03-28 20:09:10,139 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG重启数5，期望1分================
2025-03-28 20:09:10,139 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG重启数5，期望1分 成功===============
2025-03-28 20:09:10,139 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==============开始执行用例：BUG重启数9999，期望1分==============
2025-03-28 20:09:10,139 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =============执行用例：BUG重启数9999，期望1分 成功==============
2025-03-28 20:09:10,140 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===============开始执行用例：BUG重启数很长，期望1分===============
2025-03-28 20:09:10,140 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==============执行用例：BUG重启数很长，期望1分 成功===============
2025-03-28 20:09:10,140 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：BUG重启数-1==================
2025-03-28 20:09:10,140 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：BUG重启数-1 成功=================
2025-03-28 20:09:10,141 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ================开始执行用例：BUG重启数为浮点数=================
2025-03-28 20:09:10,141 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ================执行用例：BUG重启数为浮点数 成功================
2025-03-28 20:09:10,142 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ================开始执行用例：BUG重启数为小写英文================
2025-03-28 20:09:10,142 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG重启数为小写英文 成功================
2025-03-28 20:09:10,142 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ================开始执行用例：BUG重启数为大写英文================
2025-03-28 20:09:10,142 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG重启数为大写英文 成功================
2025-03-28 20:09:10,143 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：BUG重启数为汉字=================
2025-03-28 20:09:10,143 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ================执行用例：BUG重启数为汉字 成功=================
2025-03-28 20:09:10,144 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ================开始执行用例：BUG重启数为特殊符号================
2025-03-28 20:09:10,144 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG重启数为特殊符号 成功================
2025-03-28 20:09:10,145 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：BUG重启数为空格=================
2025-03-28 20:09:10,145 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ================执行用例：BUG重启数为空格 成功=================
2025-03-28 20:09:10,146 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ================开始执行用例：BUG重启数为空字符串================
2025-03-28 20:09:10,146 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG重启数为空字符串 成功================
2025-03-28 20:09:10,146 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ================开始执行用例：BUG重启数为null================
2025-03-28 20:09:10,146 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===============执行用例：BUG重启数为null 成功================
2025-03-28 20:09:10,147 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：不传BUG重启数==================
2025-03-28 20:09:10,147 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：不传BUG重启数 成功=================
2025-03-28 20:09:10,147 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG重启和未修复数量计算评分测试结束==========
2025-03-28 20:09:10,148 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG修复情况评分计算测试开始==========
2025-03-28 20:09:10,148 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ====开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG====
2025-03-28 20:09:10,148 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ===执行用例：入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG 成功====
2025-03-28 20:09:10,149 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==开始执行用例：入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG==
2025-03-28 20:09:10,149 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =执行用例：入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功==
2025-03-28 20:09:10,150 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =====开始执行用例：入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG=====
2025-03-28 20:09:10,150 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ====执行用例：入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功=====
2025-03-28 20:09:10,150 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ====开始执行用例：入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG=====
2025-03-28 20:09:10,150 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ====执行用例：入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功====
2025-03-28 20:09:10,151 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ======开始执行用例：不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG======
2025-03-28 20:09:10,151 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =====执行用例：不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功======
2025-03-28 20:09:10,151 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===开始执行用例：入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG===
2025-03-28 20:09:10,151 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==执行用例：入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG 成功===
2025-03-28 20:09:10,152 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG
2025-03-28 20:09:10,152 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG 成功
2025-03-28 20:09:10,153 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG
2025-03-28 20:09:10,153 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG 成功
2025-03-28 20:09:10,153 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG
2025-03-28 20:09:10,153 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG 成功
2025-03-28 20:09:10,154 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG
2025-03-28 20:09:10,154 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG 成功
2025-03-28 20:09:10,155 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG
2025-03-28 20:09:10,155 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG 成功
2025-03-28 20:09:10,155 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG
2025-03-28 20:09:10,155 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG 成功
2025-03-28 20:09:10,156 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG
2025-03-28 20:09:10,156 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG 成功
2025-03-28 20:09:10,157 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG
2025-03-28 20:09:10,157 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG 成功
2025-03-28 20:09:10,157 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG
2025-03-28 20:09:10,157 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG 成功
2025-03-28 20:09:10,158 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG
2025-03-28 20:09:10,158 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG 成功
2025-03-28 20:09:10,158 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG
2025-03-28 20:09:10,158 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG 成功
2025-03-28 20:09:10,159 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG
2025-03-28 20:09:10,159 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG 成功
2025-03-28 20:09:10,160 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG
2025-03-28 20:09:10,160 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG 成功
2025-03-28 20:09:10,161 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG
2025-03-28 20:09:10,161 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG 成功
2025-03-28 20:09:10,161 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG
2025-03-28 20:09:10,161 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG 成功
2025-03-28 20:09:10,162 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG
2025-03-28 20:09:10,162 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG 成功
2025-03-28 20:09:10,162 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG
2025-03-28 20:09:10,163 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG 成功
2025-03-28 20:09:10,163 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG
2025-03-28 20:09:10,163 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG 成功
2025-03-28 20:09:10,164 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG
2025-03-28 20:09:10,164 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG 成功
2025-03-28 20:09:10,164 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG
2025-03-28 20:09:10,164 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG 成功
2025-03-28 20:09:10,165 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG
2025-03-28 20:09:10,165 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG 成功
2025-03-28 20:09:10,166 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG
2025-03-28 20:09:10,166 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG 成功
2025-03-28 20:09:10,167 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG
2025-03-28 20:09:10,167 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - 执行用例：入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG 成功
2025-03-28 20:09:10,167 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为小写英文==================
2025-03-28 20:09:10,167 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为小写英文 成功=================
2025-03-28 20:09:10,168 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为大写英文==================
2025-03-28 20:09:10,168 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为大写英文 成功=================
2025-03-28 20:09:10,169 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为整数===================
2025-03-28 20:09:10,169 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==================执行用例：入参值为整数 成功==================
2025-03-28 20:09:10,169 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为浮点数==================
2025-03-28 20:09:10,169 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为浮点数 成功==================
2025-03-28 20:09:10,170 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为汉字===================
2025-03-28 20:09:10,170 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==================执行用例：入参值为汉字 成功==================
2025-03-28 20:09:10,171 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为特殊符号==================
2025-03-28 20:09:10,171 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为特殊符号 成功=================
2025-03-28 20:09:10,171 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =================开始执行用例：入参值为空字符串==================
2025-03-28 20:09:10,171 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为空字符串 成功=================
2025-03-28 20:09:10,172 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为空格===================
2025-03-28 20:09:10,172 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - ==================执行用例：入参值为空格 成功==================
2025-03-28 20:09:10,173 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==================开始执行用例：入参值为空列表==================
2025-03-28 20:09:10,173 DEBUG [testlog] [base_case.py (base_exist_return_common_test:38] - =================执行用例：入参值为空列表 成功==================
2025-03-28 20:09:10,173 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG修复情况评分计算测试结束==========
2025-03-28 20:09:10,174 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 20:09:10,174 INFO [testlog] [test_common_method.py (test_common_input:21] - =====开始执行用例：公用input方法配置类型为int，输入内容为字符串:"999"======
2025-03-28 20:09:10,174 DEBUG [testlog] [test_common_method.py (test_common_input:37] - =====执行用例：公用input方法配置类型为int，输入内容为字符串:"999" 成功=====
2025-03-28 20:09:10,175 INFO [testlog] [test_common_method.py (test_common_input:21] - ====开始执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 "=====
2025-03-28 20:09:10,175 DEBUG [testlog] [test_common_method.py (test_common_input:37] - ====执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 " 成功====
2025-03-28 20:09:10,176 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"=
2025-03-28 20:09:10,176 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10" 成功
2025-03-28 20:09:10,177 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"=
2025-03-28 20:09:10,177 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20" 成功
2025-03-28 20:09:10,178 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "
2025-03-28 20:09:10,178 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 " 成功
2025-03-28 20:09:10,179 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "
2025-03-28 20:09:10,179 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 " 成功
2025-03-28 20:09:10,180 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号
2025-03-28 20:09:10,180 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号 成功
2025-03-28 20:09:10,181 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号
2025-03-28 20:09:10,181 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号 成功
2025-03-28 20:09:10,182 INFO [testlog] [test_common_method.py (test_common_input:21] - ==开始执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999"===
2025-03-28 20:09:10,182 DEBUG [testlog] [test_common_method.py (test_common_input:37] - ==执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999" 成功==
2025-03-28 20:09:10,183 INFO [testlog] [test_common_method.py (test_common_input:21] - ===开始执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 "====
2025-03-28 20:09:10,183 DEBUG [testlog] [test_common_method.py (test_common_input:37] - ===执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 " 成功===
2025-03-28 20:09:10,184 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"
2025-03-28 20:09:10,184 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1" 成功
2025-03-28 20:09:10,185 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"
2025-03-28 20:09:10,185 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22" 成功
2025-03-28 20:09:10,186 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "
2025-03-28 20:09:10,186 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 " 成功
2025-03-28 20:09:10,187 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "
2025-03-28 20:09:10,187 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 " 成功
2025-03-28 20:09:10,187 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数
2025-03-28 20:09:10,188 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数 成功
2025-03-28 20:09:10,188 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数
2025-03-28 20:09:10,188 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数 成功
2025-03-28 20:09:10,189 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号
2025-03-28 20:09:10,189 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号 成功
2025-03-28 20:09:10,190 INFO [testlog] [test_common_method.py (test_common_input:21] - =====开始执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 "=====
2025-03-28 20:09:10,190 DEBUG [testlog] [test_common_method.py (test_common_input:37] - ====执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 " 成功=====
2025-03-28 20:09:10,191 INFO [testlog] [test_common_method.py (test_common_input:21] - ==开始执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d "===
2025-03-28 20:09:10,191 DEBUG [testlog] [test_common_method.py (test_common_input:37] - ==执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d " 成功==
2025-03-28 20:09:10,192 INFO [testlog] [test_common_method.py (test_common_input:21] - ==开始执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "==
2025-03-28 20:09:10,192 DEBUG [testlog] [test_common_method.py (test_common_input:37] - =执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d " 成功==
2025-03-28 20:09:10,193 INFO [testlog] [test_common_method.py (test_common_input:21] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"==
2025-03-28 20:09:10,193 DEBUG [testlog] [test_common_method.py (test_common_input:37] - =执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y" 成功==
2025-03-28 20:09:10,194 INFO [testlog] [test_common_method.py (test_common_input:21] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"==
2025-03-28 20:09:10,194 DEBUG [testlog] [test_common_method.py (test_common_input:37] - =执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N" 成功==
2025-03-28 20:09:10,196 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "
2025-03-28 20:09:10,196 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 " 成功
2025-03-28 20:09:10,197 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "
2025-03-28 20:09:10,197 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 " 成功
2025-03-28 20:09:10,197 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期
2025-03-28 20:09:10,198 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期 成功
2025-03-28 20:09:10,199 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期
2025-03-28 20:09:10,199 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期 成功
2025-03-28 20:09:10,199 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"
2025-03-28 20:09:10,200 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20" 成功
2025-03-28 20:09:10,200 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"
2025-03-28 20:09:10,200 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20" 成功
2025-03-28 20:09:10,201 INFO [testlog] [test_common_method.py (test_common_input:21] - ======开始执行用例：公用input方法配置类型为int，不输入内容，在输入"20"======
2025-03-28 20:09:10,201 DEBUG [testlog] [test_common_method.py (test_common_input:37] - =====执行用例：公用input方法配置类型为int，不输入内容，在输入"20" 成功======
2025-03-28 20:09:10,202 INFO [testlog] [test_common_method.py (test_common_input:21] - ===开始执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "===
2025-03-28 20:09:10,202 DEBUG [testlog] [test_common_method.py (test_common_input:37] - ==执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 " 成功===
2025-03-28 20:09:10,203 INFO [testlog] [test_common_method.py (test_common_input:21] - ==开始执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:09:10,203 DEBUG [testlog] [test_common_method.py (test_common_input:37] - =执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容 成功==
2025-03-28 20:09:10,204 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:09:10,204 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 20:09:10,205 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"
2025-03-28 20:09:10,205 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1" 成功
2025-03-28 20:09:10,206 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"
2025-03-28 20:09:10,206 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2" 成功
2025-03-28 20:09:10,207 INFO [testlog] [test_common_method.py (test_common_input:21] - ====开始执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2"====
2025-03-28 20:09:10,207 DEBUG [testlog] [test_common_method.py (test_common_input:37] - ===执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2" 成功====
2025-03-28 20:09:10,208 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "
2025-03-28 20:09:10,208 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 " 成功
2025-03-28 20:09:10,209 INFO [testlog] [test_common_method.py (test_common_input:21] - =开始执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容=
2025-03-28 20:09:10,209 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容 成功=
2025-03-28 20:09:10,210 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:09:10,210 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 20:09:10,211 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"
2025-03-28 20:09:10,211 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y" 成功
2025-03-28 20:09:10,213 INFO [testlog] [test_common_method.py (test_common_input:21] - ======开始执行用例：公用input方法配置类型为str，不输入内容，在输入"20"======
2025-03-28 20:09:10,213 DEBUG [testlog] [test_common_method.py (test_common_input:37] - =====执行用例：公用input方法配置类型为str，不输入内容，在输入"20" 成功======
2025-03-28 20:09:10,214 INFO [testlog] [test_common_method.py (test_common_input:21] - ==开始执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:09:10,214 DEBUG [testlog] [test_common_method.py (test_common_input:37] - =执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容 成功==
2025-03-28 20:09:10,215 INFO [testlog] [test_common_method.py (test_common_input:21] - 开始执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:09:10,215 DEBUG [testlog] [test_common_method.py (test_common_input:37] - 执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 20:09:10,215 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 20:44:59,636 INFO [testlog] [base_case.py (setup_class:14] - ==========封装公用input方法测试开始==========
2025-03-28 20:44:59,636 INFO [testlog] [test_common_method.py (test_common_input:18] - =====开始执行用例：公用input方法配置类型为int，输入内容为字符串:"999"======
2025-03-28 20:44:59,929 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - =====开始执行用例：公用input方法配置类型为int，输入内容为字符串:"999"======
2025-03-28 20:44:59,929 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =====执行用例：公用input方法配置类型为int，输入内容为字符串:"999" 成功=====
2025-03-28 20:44:59,930 INFO [testlog] [test_common_method.py (test_common_input:18] - ====开始执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 "=====
2025-03-28 20:44:59,930 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ====开始执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 "=====
2025-03-28 20:44:59,930 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ====执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 " 成功====
2025-03-28 20:44:59,931 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"=
2025-03-28 20:44:59,931 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"=
2025-03-28 20:44:59,931 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10" 成功
2025-03-28 20:44:59,931 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"=
2025-03-28 20:44:59,931 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"=
2025-03-28 20:44:59,931 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20" 成功
2025-03-28 20:44:59,932 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "
2025-03-28 20:44:59,932 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "
2025-03-28 20:44:59,932 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 " 成功
2025-03-28 20:44:59,932 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "
2025-03-28 20:44:59,932 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "
2025-03-28 20:44:59,932 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 " 成功
2025-03-28 20:44:59,933 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号
2025-03-28 20:44:59,933 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号
2025-03-28 20:44:59,933 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号 成功
2025-03-28 20:44:59,933 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号
2025-03-28 20:44:59,934 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号
2025-03-28 20:44:59,934 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号 成功
2025-03-28 20:44:59,934 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999"===
2025-03-28 20:44:59,934 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999"===
2025-03-28 20:44:59,934 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ==执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999" 成功==
2025-03-28 20:44:59,935 INFO [testlog] [test_common_method.py (test_common_input:18] - ===开始执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 "====
2025-03-28 20:44:59,935 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ===开始执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 "====
2025-03-28 20:44:59,935 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ===执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 " 成功===
2025-03-28 20:44:59,935 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"
2025-03-28 20:44:59,935 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"
2025-03-28 20:44:59,935 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1" 成功
2025-03-28 20:44:59,936 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"
2025-03-28 20:44:59,936 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"
2025-03-28 20:44:59,936 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22" 成功
2025-03-28 20:44:59,937 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "
2025-03-28 20:44:59,937 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "
2025-03-28 20:44:59,937 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 " 成功
2025-03-28 20:44:59,937 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "
2025-03-28 20:44:59,938 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "
2025-03-28 20:44:59,938 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 " 成功
2025-03-28 20:44:59,938 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数
2025-03-28 20:44:59,938 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数
2025-03-28 20:44:59,938 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数 成功
2025-03-28 20:44:59,939 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数
2025-03-28 20:44:59,939 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数
2025-03-28 20:44:59,939 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数 成功
2025-03-28 20:44:59,940 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号
2025-03-28 20:44:59,940 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号
2025-03-28 20:44:59,940 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号 成功
2025-03-28 20:44:59,941 INFO [testlog] [test_common_method.py (test_common_input:18] - =====开始执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 "=====
2025-03-28 20:44:59,941 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - =====开始执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 "=====
2025-03-28 20:44:59,941 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ====执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 " 成功=====
2025-03-28 20:44:59,942 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d "===
2025-03-28 20:44:59,942 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d "===
2025-03-28 20:44:59,942 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ==执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d " 成功==
2025-03-28 20:44:59,943 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "==
2025-03-28 20:44:59,944 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "==
2025-03-28 20:44:59,944 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d " 成功==
2025-03-28 20:44:59,945 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"==
2025-03-28 20:44:59,945 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"==
2025-03-28 20:44:59,945 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y" 成功==
2025-03-28 20:44:59,946 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"==
2025-03-28 20:44:59,946 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"==
2025-03-28 20:44:59,946 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N" 成功==
2025-03-28 20:44:59,946 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "
2025-03-28 20:44:59,946 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "
2025-03-28 20:44:59,946 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 " 成功
2025-03-28 20:44:59,947 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "
2025-03-28 20:44:59,947 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "
2025-03-28 20:44:59,947 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 " 成功
2025-03-28 20:44:59,948 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期
2025-03-28 20:44:59,948 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期
2025-03-28 20:44:59,948 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期 成功
2025-03-28 20:44:59,948 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期
2025-03-28 20:44:59,948 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期
2025-03-28 20:44:59,948 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期 成功
2025-03-28 20:44:59,949 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"
2025-03-28 20:44:59,949 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"
2025-03-28 20:44:59,949 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20" 成功
2025-03-28 20:44:59,950 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"
2025-03-28 20:44:59,950 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"
2025-03-28 20:44:59,950 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20" 成功
2025-03-28 20:44:59,951 INFO [testlog] [test_common_method.py (test_common_input:18] - ======开始执行用例：公用input方法配置类型为int，不输入内容，在输入"20"======
2025-03-28 20:44:59,951 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ======开始执行用例：公用input方法配置类型为int，不输入内容，在输入"20"======
2025-03-28 20:44:59,951 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =====执行用例：公用input方法配置类型为int，不输入内容，在输入"20" 成功======
2025-03-28 20:44:59,952 INFO [testlog] [test_common_method.py (test_common_input:18] - ===开始执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "===
2025-03-28 20:44:59,952 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ===开始执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "===
2025-03-28 20:44:59,952 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ==执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 " 成功===
2025-03-28 20:44:59,953 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:44:59,953 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:44:59,953 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容 成功==
2025-03-28 20:44:59,953 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:44:59,953 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:44:59,953 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 20:44:59,954 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"
2025-03-28 20:44:59,954 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"
2025-03-28 20:44:59,954 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1" 成功
2025-03-28 20:44:59,954 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"
2025-03-28 20:44:59,955 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"
2025-03-28 20:44:59,955 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2" 成功
2025-03-28 20:44:59,955 INFO [testlog] [test_common_method.py (test_common_input:18] - ====开始执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2"====
2025-03-28 20:44:59,955 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ====开始执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2"====
2025-03-28 20:44:59,955 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ===执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2" 成功====
2025-03-28 20:44:59,956 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "
2025-03-28 20:44:59,956 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "
2025-03-28 20:44:59,956 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 " 成功
2025-03-28 20:44:59,957 INFO [testlog] [test_common_method.py (test_common_input:18] - =开始执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容=
2025-03-28 20:44:59,957 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - =开始执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容=
2025-03-28 20:44:59,957 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容 成功=
2025-03-28 20:44:59,957 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:44:59,957 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:44:59,957 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 20:44:59,958 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"
2025-03-28 20:44:59,958 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"
2025-03-28 20:44:59,958 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y" 成功
2025-03-28 20:44:59,959 INFO [testlog] [test_common_method.py (test_common_input:18] - ======开始执行用例：公用input方法配置类型为str，不输入内容，在输入"20"======
2025-03-28 20:44:59,959 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ======开始执行用例：公用input方法配置类型为str，不输入内容，在输入"20"======
2025-03-28 20:44:59,959 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =====执行用例：公用input方法配置类型为str，不输入内容，在输入"20" 成功======
2025-03-28 20:44:59,960 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:44:59,960 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:44:59,960 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容 成功==
2025-03-28 20:44:59,961 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:44:59,961 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:44:59,961 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 20:44:59,961 INFO [testlog] [base_case.py (teardown_class:18] - ==========封装公用input方法测试结束==========
2025-03-28 20:45:44,392 INFO [testlog] [base_case.py (setup_class:15] - ==========封装公用input方法测试开始==========
2025-03-28 20:45:44,393 INFO [testlog] [test_common_method.py (test_common_input:18] - =====开始执行用例：公用input方法配置类型为int，输入内容为字符串:"999"======
2025-03-28 20:45:44,684 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - =====开始执行用例：公用input方法配置类型为int，输入内容为字符串:"999"======
2025-03-28 20:45:44,684 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，输入内容为字符串:"999" 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,719 INFO [testlog] [test_common_method.py (test_common_input:18] - ====开始执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 "=====
2025-03-28 20:45:44,719 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ====开始执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 "=====
2025-03-28 20:45:44,720 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 " 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,722 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"=
2025-03-28 20:45:44,722 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"=
2025-03-28 20:45:44,722 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10" 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,724 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"=
2025-03-28 20:45:44,724 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"=
2025-03-28 20:45:44,724 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20" 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,726 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "
2025-03-28 20:45:44,726 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "
2025-03-28 20:45:44,726 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 " 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,728 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "
2025-03-28 20:45:44,728 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "
2025-03-28 20:45:44,728 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 " 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,730 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号
2025-03-28 20:45:44,730 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号
2025-03-28 20:45:44,730 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,732 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号
2025-03-28 20:45:44,732 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号
2025-03-28 20:45:44,732 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,735 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999"===
2025-03-28 20:45:44,735 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ==开始执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999"===
2025-03-28 20:45:44,735 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999" 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,737 INFO [testlog] [test_common_method.py (test_common_input:18] - ===开始执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 "====
2025-03-28 20:45:44,737 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ===开始执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 "====
2025-03-28 20:45:44,737 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 " 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,739 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"
2025-03-28 20:45:44,739 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"
2025-03-28 20:45:44,739 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1" 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,741 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"
2025-03-28 20:45:44,741 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"
2025-03-28 20:45:44,741 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22" 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,743 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "
2025-03-28 20:45:44,743 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "
2025-03-28 20:45:44,743 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 " 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,745 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "
2025-03-28 20:45:44,745 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "
2025-03-28 20:45:44,745 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 " 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,747 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数
2025-03-28 20:45:44,747 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数
2025-03-28 20:45:44,747 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,750 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数
2025-03-28 20:45:44,750 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数
2025-03-28 20:45:44,750 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,752 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号
2025-03-28 20:45:44,752 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号
2025-03-28 20:45:44,752 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,754 INFO [testlog] [test_common_method.py (test_common_input:18] - =====开始执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 "=====
2025-03-28 20:45:44,754 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - =====开始执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 "=====
2025-03-28 20:45:44,754 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 " 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,755 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d "===
2025-03-28 20:45:44,755 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ==开始执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d "===
2025-03-28 20:45:44,756 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d " 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,758 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "==
2025-03-28 20:45:44,758 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ==开始执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "==
2025-03-28 20:45:44,758 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d " 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,760 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"==
2025-03-28 20:45:44,760 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"==
2025-03-28 20:45:44,760 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y" 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,762 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"==
2025-03-28 20:45:44,762 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"==
2025-03-28 20:45:44,762 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N" 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,764 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "
2025-03-28 20:45:44,764 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "
2025-03-28 20:45:44,764 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 " 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,766 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "
2025-03-28 20:45:44,766 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "
2025-03-28 20:45:44,766 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 " 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,768 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期
2025-03-28 20:45:44,768 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期
2025-03-28 20:45:44,768 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,770 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期
2025-03-28 20:45:44,770 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期
2025-03-28 20:45:44,770 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,772 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"
2025-03-28 20:45:44,772 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"
2025-03-28 20:45:44,772 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20" 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,774 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"
2025-03-28 20:45:44,774 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"
2025-03-28 20:45:44,774 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20" 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,776 INFO [testlog] [test_common_method.py (test_common_input:18] - ======开始执行用例：公用input方法配置类型为int，不输入内容，在输入"20"======
2025-03-28 20:45:44,776 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ======开始执行用例：公用input方法配置类型为int，不输入内容，在输入"20"======
2025-03-28 20:45:44,776 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，不输入内容，在输入"20" 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,779 INFO [testlog] [test_common_method.py (test_common_input:18] - ===开始执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "===
2025-03-28 20:45:44,779 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ===开始执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "===
2025-03-28 20:45:44,779 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 " 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,781 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:45:44,781 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ==开始执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:45:44,781 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,783 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:45:44,783 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:45:44,784 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,786 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"
2025-03-28 20:45:44,786 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"
2025-03-28 20:45:44,786 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1" 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,789 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"
2025-03-28 20:45:44,789 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"
2025-03-28 20:45:44,789 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2" 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,791 INFO [testlog] [test_common_method.py (test_common_input:18] - ====开始执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2"====
2025-03-28 20:45:44,791 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ====开始执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2"====
2025-03-28 20:45:44,791 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2" 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,793 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "
2025-03-28 20:45:44,794 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "
2025-03-28 20:45:44,794 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 " 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,795 INFO [testlog] [test_common_method.py (test_common_input:18] - =开始执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容=
2025-03-28 20:45:44,795 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - =开始执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容=
2025-03-28 20:45:44,796 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,797 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:45:44,797 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:45:44,797 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,799 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"
2025-03-28 20:45:44,799 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"
2025-03-28 20:45:44,799 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y" 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,801 INFO [testlog] [test_common_method.py (test_common_input:18] - ======开始执行用例：公用input方法配置类型为str，不输入内容，在输入"20"======
2025-03-28 20:45:44,801 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ======开始执行用例：公用input方法配置类型为str，不输入内容，在输入"20"======
2025-03-28 20:45:44,802 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，不输入内容，在输入"20" 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,803 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:45:44,803 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ==开始执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:45:44,803 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,805 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:45:44,805 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:45:44,805 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容 失败，失败原因：'function' object has no attribute 'readouterr'
2025-03-28 20:45:44,807 INFO [testlog] [base_case.py (teardown_class:19] - ==========封装公用input方法测试结束==========
2025-03-28 20:46:19,123 INFO [testlog] [base_case.py (setup_class:15] - ==========封装公用input方法测试开始==========
2025-03-28 20:46:19,125 INFO [testlog] [test_common_method.py (test_common_input:18] - =====开始执行用例：公用input方法配置类型为int，输入内容为字符串:"999"======
2025-03-28 20:46:21,531 INFO [testlog] [base_case.py (setup_class:15] - ==========封装公用input方法测试开始==========
2025-03-28 20:46:21,531 INFO [testlog] [test_common_method.py (test_common_input:18] - =====开始执行用例：公用input方法配置类型为int，输入内容为字符串:"999"======
2025-03-28 20:46:21,860 INFO [testlog] [test_common_method.py (test_common_input:18] - ====开始执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 "=====
2025-03-28 20:46:21,861 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"=
2025-03-28 20:46:21,863 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"=
2025-03-28 20:46:21,864 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "
2025-03-28 20:46:21,866 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "
2025-03-28 20:46:21,867 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号
2025-03-28 20:46:21,868 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号
2025-03-28 20:46:21,869 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999"===
2025-03-28 20:46:21,870 INFO [testlog] [test_common_method.py (test_common_input:18] - ===开始执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 "====
2025-03-28 20:46:21,871 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"
2025-03-28 20:46:21,873 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"
2025-03-28 20:46:21,874 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "
2025-03-28 20:46:21,875 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "
2025-03-28 20:46:21,877 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数
2025-03-28 20:46:21,878 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数
2025-03-28 20:46:21,879 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号
2025-03-28 20:46:21,880 INFO [testlog] [test_common_method.py (test_common_input:18] - =====开始执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 "=====
2025-03-28 20:46:21,881 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d "===
2025-03-28 20:46:21,882 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "==
2025-03-28 20:46:21,884 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"==
2025-03-28 20:46:21,885 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"==
2025-03-28 20:46:21,886 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "
2025-03-28 20:46:21,887 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "
2025-03-28 20:46:21,888 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期
2025-03-28 20:46:21,890 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期
2025-03-28 20:46:21,891 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"
2025-03-28 20:46:21,892 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"
2025-03-28 20:46:21,894 INFO [testlog] [test_common_method.py (test_common_input:18] - ======开始执行用例：公用input方法配置类型为int，不输入内容，在输入"20"======
2025-03-28 20:46:21,895 INFO [testlog] [test_common_method.py (test_common_input:18] - ===开始执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "===
2025-03-28 20:46:21,897 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:46:21,898 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:46:21,899 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"
2025-03-28 20:46:21,901 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"
2025-03-28 20:46:21,902 INFO [testlog] [test_common_method.py (test_common_input:18] - ====开始执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2"====
2025-03-28 20:46:21,903 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "
2025-03-28 20:46:21,904 INFO [testlog] [test_common_method.py (test_common_input:18] - =开始执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容=
2025-03-28 20:46:21,906 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:46:21,907 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"
2025-03-28 20:46:21,908 INFO [testlog] [test_common_method.py (test_common_input:18] - ======开始执行用例：公用input方法配置类型为str，不输入内容，在输入"20"======
2025-03-28 20:46:21,910 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:46:21,911 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:46:21,912 INFO [testlog] [base_case.py (teardown_class:19] - ==========封装公用input方法测试结束==========
2025-03-28 20:47:11,441 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 20:47:11,441 INFO [testlog] [test_common_method.py (test_common_input:18] - =====开始执行用例：公用input方法配置类型为int，输入内容为字符串:"999"======
2025-03-28 20:47:11,726 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =====开始执行用例：公用input方法配置类型为int，输入内容为字符串:"999"======
2025-03-28 20:47:11,726 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - =====执行用例：公用input方法配置类型为int，输入内容为字符串:"999" 成功=====
2025-03-28 20:47:11,727 INFO [testlog] [test_common_method.py (test_common_input:18] - ====开始执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 "=====
2025-03-28 20:47:11,727 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ====开始执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 "=====
2025-03-28 20:47:11,727 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - ====执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 " 成功====
2025-03-28 20:47:11,728 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"=
2025-03-28 20:47:11,728 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"=
2025-03-28 20:47:11,728 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10" 成功
2025-03-28 20:47:11,729 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"=
2025-03-28 20:47:11,729 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"=
2025-03-28 20:47:11,729 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20" 成功
2025-03-28 20:47:11,729 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "
2025-03-28 20:47:11,729 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "
2025-03-28 20:47:11,729 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 " 成功
2025-03-28 20:47:11,730 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "
2025-03-28 20:47:11,730 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "
2025-03-28 20:47:11,730 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 " 成功
2025-03-28 20:47:11,731 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号
2025-03-28 20:47:11,731 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号
2025-03-28 20:47:11,731 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号 成功
2025-03-28 20:47:11,731 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号
2025-03-28 20:47:11,732 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号
2025-03-28 20:47:11,732 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号 成功
2025-03-28 20:47:11,732 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999"===
2025-03-28 20:47:11,732 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==开始执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999"===
2025-03-28 20:47:11,732 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - ==执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999" 成功==
2025-03-28 20:47:11,733 INFO [testlog] [test_common_method.py (test_common_input:18] - ===开始执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 "====
2025-03-28 20:47:11,733 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===开始执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 "====
2025-03-28 20:47:11,733 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - ===执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 " 成功===
2025-03-28 20:47:11,734 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"
2025-03-28 20:47:11,734 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"
2025-03-28 20:47:11,734 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1" 成功
2025-03-28 20:47:11,734 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"
2025-03-28 20:47:11,734 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"
2025-03-28 20:47:11,735 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22" 成功
2025-03-28 20:47:11,735 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "
2025-03-28 20:47:11,735 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "
2025-03-28 20:47:11,735 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 " 成功
2025-03-28 20:47:11,736 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "
2025-03-28 20:47:11,736 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "
2025-03-28 20:47:11,736 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 " 成功
2025-03-28 20:47:11,736 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数
2025-03-28 20:47:11,736 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数
2025-03-28 20:47:11,736 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数 成功
2025-03-28 20:47:11,737 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数
2025-03-28 20:47:11,737 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数
2025-03-28 20:47:11,737 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数 成功
2025-03-28 20:47:11,738 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号
2025-03-28 20:47:11,738 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号
2025-03-28 20:47:11,738 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号 成功
2025-03-28 20:47:11,738 INFO [testlog] [test_common_method.py (test_common_input:18] - =====开始执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 "=====
2025-03-28 20:47:11,738 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =====开始执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 "=====
2025-03-28 20:47:11,738 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - ====执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 " 成功=====
2025-03-28 20:47:11,739 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d "===
2025-03-28 20:47:11,739 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==开始执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d "===
2025-03-28 20:47:11,739 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - ==执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d " 成功==
2025-03-28 20:47:11,739 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "==
2025-03-28 20:47:11,739 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==开始执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "==
2025-03-28 20:47:11,739 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - =执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d " 成功==
2025-03-28 20:47:11,740 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"==
2025-03-28 20:47:11,740 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"==
2025-03-28 20:47:11,740 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - =执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y" 成功==
2025-03-28 20:47:11,740 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"==
2025-03-28 20:47:11,740 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"==
2025-03-28 20:47:11,741 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - =执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N" 成功==
2025-03-28 20:47:11,741 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "
2025-03-28 20:47:11,741 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "
2025-03-28 20:47:11,741 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 " 成功
2025-03-28 20:47:11,742 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "
2025-03-28 20:47:11,742 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "
2025-03-28 20:47:11,742 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 " 成功
2025-03-28 20:47:11,742 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期
2025-03-28 20:47:11,742 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期
2025-03-28 20:47:11,743 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期 成功
2025-03-28 20:47:11,743 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期
2025-03-28 20:47:11,743 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期
2025-03-28 20:47:11,743 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期 成功
2025-03-28 20:47:11,744 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"
2025-03-28 20:47:11,744 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"
2025-03-28 20:47:11,744 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20" 成功
2025-03-28 20:47:11,744 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"
2025-03-28 20:47:11,744 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"
2025-03-28 20:47:11,745 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20" 成功
2025-03-28 20:47:11,745 INFO [testlog] [test_common_method.py (test_common_input:18] - ======开始执行用例：公用input方法配置类型为int，不输入内容，在输入"20"======
2025-03-28 20:47:11,745 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ======开始执行用例：公用input方法配置类型为int，不输入内容，在输入"20"======
2025-03-28 20:47:11,745 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - =====执行用例：公用input方法配置类型为int，不输入内容，在输入"20" 成功======
2025-03-28 20:47:11,746 INFO [testlog] [test_common_method.py (test_common_input:18] - ===开始执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "===
2025-03-28 20:47:11,746 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===开始执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "===
2025-03-28 20:47:11,746 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - ==执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 " 成功===
2025-03-28 20:47:11,746 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:47:11,746 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==开始执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:47:11,746 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - =执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容 成功==
2025-03-28 20:47:11,747 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:47:11,747 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:47:11,747 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 20:47:11,748 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"
2025-03-28 20:47:11,748 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"
2025-03-28 20:47:11,748 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1" 成功
2025-03-28 20:47:11,749 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"
2025-03-28 20:47:11,749 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"
2025-03-28 20:47:11,749 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2" 成功
2025-03-28 20:47:11,749 INFO [testlog] [test_common_method.py (test_common_input:18] - ====开始执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2"====
2025-03-28 20:47:11,749 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ====开始执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2"====
2025-03-28 20:47:11,749 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - ===执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2" 成功====
2025-03-28 20:47:11,750 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "
2025-03-28 20:47:11,750 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "
2025-03-28 20:47:11,750 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 " 成功
2025-03-28 20:47:11,750 INFO [testlog] [test_common_method.py (test_common_input:18] - =开始执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容=
2025-03-28 20:47:11,750 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =开始执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容=
2025-03-28 20:47:11,750 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容 成功=
2025-03-28 20:47:11,751 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:47:11,751 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:47:11,751 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 20:47:11,752 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"
2025-03-28 20:47:11,752 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"
2025-03-28 20:47:11,752 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y" 成功
2025-03-28 20:47:11,753 INFO [testlog] [test_common_method.py (test_common_input:18] - ======开始执行用例：公用input方法配置类型为str，不输入内容，在输入"20"======
2025-03-28 20:47:11,753 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ======开始执行用例：公用input方法配置类型为str，不输入内容，在输入"20"======
2025-03-28 20:47:11,753 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - =====执行用例：公用input方法配置类型为str，不输入内容，在输入"20" 成功======
2025-03-28 20:47:11,753 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:47:11,753 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==开始执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:47:11,753 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - =执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容 成功==
2025-03-28 20:47:11,754 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:47:11,754 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:47:11,754 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 20:47:11,754 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 20:48:18,671 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 20:48:18,671 INFO [testlog] [test_common_method.py (test_common_input:18] - =====开始执行用例：公用input方法配置类型为int，输入内容为字符串:"999"======
2025-03-28 20:48:18,970 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =====开始执行用例：公用input方法配置类型为int，输入内容为字符串:"999"======
2025-03-28 20:48:18,970 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - =====执行用例：公用input方法配置类型为int，输入内容为字符串:"999" 成功=====
2025-03-28 20:48:18,971 INFO [testlog] [test_common_method.py (test_common_input:18] - ====开始执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 "=====
2025-03-28 20:48:18,971 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ====开始执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 "=====
2025-03-28 20:48:18,972 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - ====执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 " 成功====
2025-03-28 20:48:18,972 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"=
2025-03-28 20:48:18,972 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"=
2025-03-28 20:48:18,972 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10" 成功
2025-03-28 20:48:18,973 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"=
2025-03-28 20:48:18,973 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"=
2025-03-28 20:48:18,973 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20" 成功
2025-03-28 20:48:18,974 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "
2025-03-28 20:48:18,974 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "
2025-03-28 20:48:18,974 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 " 成功
2025-03-28 20:48:18,974 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "
2025-03-28 20:48:18,974 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "
2025-03-28 20:48:18,975 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 " 成功
2025-03-28 20:48:18,975 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号
2025-03-28 20:48:18,975 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号
2025-03-28 20:48:18,975 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号 成功
2025-03-28 20:48:18,976 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号
2025-03-28 20:48:18,976 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号
2025-03-28 20:48:18,976 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号 成功
2025-03-28 20:48:18,977 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999"===
2025-03-28 20:48:18,977 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==开始执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999"===
2025-03-28 20:48:18,977 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - ==执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999" 成功==
2025-03-28 20:48:18,978 INFO [testlog] [test_common_method.py (test_common_input:18] - ===开始执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 "====
2025-03-28 20:48:18,978 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===开始执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 "====
2025-03-28 20:48:18,978 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - ===执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 " 成功===
2025-03-28 20:48:18,978 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"
2025-03-28 20:48:18,978 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"
2025-03-28 20:48:18,978 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1" 成功
2025-03-28 20:48:18,979 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"
2025-03-28 20:48:18,979 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"
2025-03-28 20:48:18,979 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22" 成功
2025-03-28 20:48:18,980 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "
2025-03-28 20:48:18,980 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "
2025-03-28 20:48:18,980 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 " 成功
2025-03-28 20:48:18,981 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "
2025-03-28 20:48:18,981 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "
2025-03-28 20:48:18,981 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 " 成功
2025-03-28 20:48:18,981 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数
2025-03-28 20:48:18,981 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数
2025-03-28 20:48:18,981 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数 成功
2025-03-28 20:48:18,982 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数
2025-03-28 20:48:18,982 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数
2025-03-28 20:48:18,982 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数 成功
2025-03-28 20:48:18,983 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号
2025-03-28 20:48:18,983 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号
2025-03-28 20:48:18,983 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号 成功
2025-03-28 20:48:18,983 INFO [testlog] [test_common_method.py (test_common_input:18] - =====开始执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 "=====
2025-03-28 20:48:18,983 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =====开始执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 "=====
2025-03-28 20:48:18,984 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - ====执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 " 成功=====
2025-03-28 20:48:18,984 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d "===
2025-03-28 20:48:18,984 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==开始执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d "===
2025-03-28 20:48:18,984 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - ==执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d " 成功==
2025-03-28 20:48:18,985 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "==
2025-03-28 20:48:18,985 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==开始执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "==
2025-03-28 20:48:18,985 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - =执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d " 成功==
2025-03-28 20:48:18,985 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"==
2025-03-28 20:48:18,986 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"==
2025-03-28 20:48:18,986 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - =执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y" 成功==
2025-03-28 20:48:18,986 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"==
2025-03-28 20:48:18,986 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"==
2025-03-28 20:48:18,986 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - =执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N" 成功==
2025-03-28 20:48:18,987 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "
2025-03-28 20:48:18,987 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "
2025-03-28 20:48:18,987 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 " 成功
2025-03-28 20:48:18,988 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "
2025-03-28 20:48:18,988 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "
2025-03-28 20:48:18,988 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 " 成功
2025-03-28 20:48:18,988 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期
2025-03-28 20:48:18,988 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期
2025-03-28 20:48:18,989 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期 成功
2025-03-28 20:48:18,989 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期
2025-03-28 20:48:18,989 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期
2025-03-28 20:48:18,989 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期 成功
2025-03-28 20:48:18,990 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"
2025-03-28 20:48:18,990 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"
2025-03-28 20:48:18,990 ERROR [testlog] [base_case.py (base_exist_return_common_test:45] - 执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20" 失败，失败原因：
2025-03-28 20:48:19,030 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"
2025-03-28 20:48:19,030 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"
2025-03-28 20:48:19,030 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20" 成功
2025-03-28 20:48:19,031 INFO [testlog] [test_common_method.py (test_common_input:18] - ======开始执行用例：公用input方法配置类型为int，不输入内容，在输入"20"======
2025-03-28 20:48:19,031 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ======开始执行用例：公用input方法配置类型为int，不输入内容，在输入"20"======
2025-03-28 20:48:19,031 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - =====执行用例：公用input方法配置类型为int，不输入内容，在输入"20" 成功======
2025-03-28 20:48:19,032 INFO [testlog] [test_common_method.py (test_common_input:18] - ===开始执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "===
2025-03-28 20:48:19,032 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ===开始执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "===
2025-03-28 20:48:19,032 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - ==执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 " 成功===
2025-03-28 20:48:19,032 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:48:19,032 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==开始执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:48:19,032 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - =执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容 成功==
2025-03-28 20:48:19,033 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:48:19,033 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:48:19,033 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 20:48:19,034 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"
2025-03-28 20:48:19,034 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"
2025-03-28 20:48:19,034 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1" 成功
2025-03-28 20:48:19,035 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"
2025-03-28 20:48:19,035 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"
2025-03-28 20:48:19,035 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2" 成功
2025-03-28 20:48:19,035 INFO [testlog] [test_common_method.py (test_common_input:18] - ====开始执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2"====
2025-03-28 20:48:19,035 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ====开始执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2"====
2025-03-28 20:48:19,036 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - ===执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2" 成功====
2025-03-28 20:48:19,036 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "
2025-03-28 20:48:19,036 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "
2025-03-28 20:48:19,036 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 " 成功
2025-03-28 20:48:19,037 INFO [testlog] [test_common_method.py (test_common_input:18] - =开始执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容=
2025-03-28 20:48:19,037 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - =开始执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容=
2025-03-28 20:48:19,037 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容 成功=
2025-03-28 20:48:19,038 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:48:19,038 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:48:19,038 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 20:48:19,038 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"
2025-03-28 20:48:19,038 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"
2025-03-28 20:48:19,038 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y" 成功
2025-03-28 20:48:19,039 INFO [testlog] [test_common_method.py (test_common_input:18] - ======开始执行用例：公用input方法配置类型为str，不输入内容，在输入"20"======
2025-03-28 20:48:19,039 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ======开始执行用例：公用input方法配置类型为str，不输入内容，在输入"20"======
2025-03-28 20:48:19,039 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - =====执行用例：公用input方法配置类型为str，不输入内容，在输入"20" 成功======
2025-03-28 20:48:19,040 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:48:19,040 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - ==开始执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:48:19,040 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - =执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容 成功==
2025-03-28 20:48:19,040 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:48:19,040 INFO [testlog] [base_case.py (base_exist_return_common_test:23] - 开始执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:48:19,040 DEBUG [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 20:48:19,041 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 20:54:59,937 INFO [testlog] [base_case.py (setup_class:14] - ==========封装公用input方法测试开始==========
2025-03-28 20:54:59,938 INFO [testlog] [test_common_method.py (test_common_input:18] - =====开始执行用例：公用input方法配置类型为int，输入内容为字符串:"999"======
2025-03-28 20:55:00,243 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - =====开始执行用例：公用input方法配置类型为int，输入内容为字符串:"999"======
2025-03-28 20:55:00,243 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =====执行用例：公用input方法配置类型为int，输入内容为字符串:"999" 成功=====
2025-03-28 20:55:00,244 INFO [testlog] [test_common_method.py (test_common_input:18] - ====开始执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 "=====
2025-03-28 20:55:00,244 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ====开始执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 "=====
2025-03-28 20:55:00,244 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ====执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 " 成功====
2025-03-28 20:55:00,245 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"=
2025-03-28 20:55:00,245 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"=
2025-03-28 20:55:00,245 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10" 成功
2025-03-28 20:55:00,246 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"=
2025-03-28 20:55:00,246 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"=
2025-03-28 20:55:00,246 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20" 成功
2025-03-28 20:55:00,246 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "
2025-03-28 20:55:00,246 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "
2025-03-28 20:55:00,246 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 " 成功
2025-03-28 20:55:00,247 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "
2025-03-28 20:55:00,247 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "
2025-03-28 20:55:00,247 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 " 成功
2025-03-28 20:55:00,248 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号
2025-03-28 20:55:00,248 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号
2025-03-28 20:55:00,248 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号 成功
2025-03-28 20:55:00,249 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号
2025-03-28 20:55:00,249 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号
2025-03-28 20:55:00,249 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号 成功
2025-03-28 20:55:00,250 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999"===
2025-03-28 20:55:00,250 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999"===
2025-03-28 20:55:00,250 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ==执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999" 成功==
2025-03-28 20:55:00,251 INFO [testlog] [test_common_method.py (test_common_input:18] - ===开始执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 "====
2025-03-28 20:55:00,251 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ===开始执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 "====
2025-03-28 20:55:00,251 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ===执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 " 成功===
2025-03-28 20:55:00,251 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"
2025-03-28 20:55:00,251 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"
2025-03-28 20:55:00,251 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1" 成功
2025-03-28 20:55:00,252 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"
2025-03-28 20:55:00,252 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"
2025-03-28 20:55:00,252 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22" 成功
2025-03-28 20:55:00,253 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "
2025-03-28 20:55:00,253 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "
2025-03-28 20:55:00,253 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 " 成功
2025-03-28 20:55:00,254 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "
2025-03-28 20:55:00,254 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "
2025-03-28 20:55:00,254 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 " 成功
2025-03-28 20:55:00,254 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数
2025-03-28 20:55:00,254 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数
2025-03-28 20:55:00,255 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数 成功
2025-03-28 20:55:00,255 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数
2025-03-28 20:55:00,255 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数
2025-03-28 20:55:00,255 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数 成功
2025-03-28 20:55:00,256 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号
2025-03-28 20:55:00,256 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号
2025-03-28 20:55:00,256 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号 成功
2025-03-28 20:55:00,257 INFO [testlog] [test_common_method.py (test_common_input:18] - =====开始执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 "=====
2025-03-28 20:55:00,257 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - =====开始执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 "=====
2025-03-28 20:55:00,257 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ====执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 " 成功=====
2025-03-28 20:55:00,257 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d "===
2025-03-28 20:55:00,257 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d "===
2025-03-28 20:55:00,258 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ==执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d " 成功==
2025-03-28 20:55:00,258 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "==
2025-03-28 20:55:00,258 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "==
2025-03-28 20:55:00,258 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d " 成功==
2025-03-28 20:55:00,259 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"==
2025-03-28 20:55:00,259 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"==
2025-03-28 20:55:00,259 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y" 成功==
2025-03-28 20:55:00,260 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"==
2025-03-28 20:55:00,260 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"==
2025-03-28 20:55:00,260 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N" 成功==
2025-03-28 20:55:00,260 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "
2025-03-28 20:55:00,261 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "
2025-03-28 20:55:00,261 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 " 成功
2025-03-28 20:55:00,261 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "
2025-03-28 20:55:00,261 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "
2025-03-28 20:55:00,261 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 " 成功
2025-03-28 20:55:00,262 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期
2025-03-28 20:55:00,262 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期
2025-03-28 20:55:00,262 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期 成功
2025-03-28 20:55:00,263 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期
2025-03-28 20:55:00,263 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期
2025-03-28 20:55:00,263 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期 成功
2025-03-28 20:55:00,263 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"
2025-03-28 20:55:00,263 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"
2025-03-28 20:55:00,263 ERROR [testlog] [base_case.py (base_exist_return_common_test:46] - 执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20" 失败，失败原因：print断言失败：实际为 [0;91m
格式错误：输入的内容数据类型不匹配, 期望为 int 类型
[0m
[0;91m
格式错误：输入的内容数据类型不匹配, 期望为 int 类型
[0m
[0;91m
格式错误：输入的内容数据类型不匹配, 期望为 int 类型
[0m
[0;91m
格式错误：输入的内容数据类型不匹配, 期望为 int 类型
[0m
[0;91m
格式错误：输入的内容数据类型不匹配, 期望为 int 类型
[0m
, 期望为 [0;91m
格式错误：输入的内容数据类型不匹配, 期望为 int 类型
[0m
[0;91m
格式错误：输入的内容数据类型不匹配, 期望为 int 类型
[0m
[0;91m
格式错误：输入的内容数据类型不匹1配, 期望为 int 类型
[0m
[0;91m
格式错误：输入的内容数据类型不匹配, 期望为 int 类型
[0m
[0;91m
格式错误：输入的内容数据类型不匹配, 期望为 int 类型
[0m

2025-03-28 20:55:00,307 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"
2025-03-28 20:55:00,308 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"
2025-03-28 20:55:00,308 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20" 成功
2025-03-28 20:55:00,308 INFO [testlog] [test_common_method.py (test_common_input:18] - ======开始执行用例：公用input方法配置类型为int，不输入内容，在输入"20"======
2025-03-28 20:55:00,308 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ======开始执行用例：公用input方法配置类型为int，不输入内容，在输入"20"======
2025-03-28 20:55:00,308 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =====执行用例：公用input方法配置类型为int，不输入内容，在输入"20" 成功======
2025-03-28 20:55:00,309 INFO [testlog] [test_common_method.py (test_common_input:18] - ===开始执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "===
2025-03-28 20:55:00,310 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ===开始执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "===
2025-03-28 20:55:00,310 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ==执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 " 成功===
2025-03-28 20:55:00,310 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:55:00,310 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:55:00,310 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容 成功==
2025-03-28 20:55:00,311 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:55:00,311 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:55:00,311 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 20:55:00,312 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"
2025-03-28 20:55:00,312 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"
2025-03-28 20:55:00,312 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1" 成功
2025-03-28 20:55:00,313 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"
2025-03-28 20:55:00,313 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"
2025-03-28 20:55:00,313 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2" 成功
2025-03-28 20:55:00,314 INFO [testlog] [test_common_method.py (test_common_input:18] - ====开始执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2"====
2025-03-28 20:55:00,314 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ====开始执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2"====
2025-03-28 20:55:00,314 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ===执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2" 成功====
2025-03-28 20:55:00,315 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "
2025-03-28 20:55:00,315 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "
2025-03-28 20:55:00,315 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 " 成功
2025-03-28 20:55:00,316 INFO [testlog] [test_common_method.py (test_common_input:18] - =开始执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容=
2025-03-28 20:55:00,316 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - =开始执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容=
2025-03-28 20:55:00,316 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容 成功=
2025-03-28 20:55:00,316 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:55:00,316 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:55:00,317 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 20:55:00,317 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"
2025-03-28 20:55:00,317 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"
2025-03-28 20:55:00,317 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y" 成功
2025-03-28 20:55:00,318 INFO [testlog] [test_common_method.py (test_common_input:18] - ======开始执行用例：公用input方法配置类型为str，不输入内容，在输入"20"======
2025-03-28 20:55:00,318 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ======开始执行用例：公用input方法配置类型为str，不输入内容，在输入"20"======
2025-03-28 20:55:00,318 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =====执行用例：公用input方法配置类型为str，不输入内容，在输入"20" 成功======
2025-03-28 20:55:00,319 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:55:00,319 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:55:00,319 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容 成功==
2025-03-28 20:55:00,319 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:55:00,319 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:55:00,320 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 20:55:00,320 INFO [testlog] [base_case.py (teardown_class:18] - ==========封装公用input方法测试结束==========
2025-03-28 20:56:09,913 INFO [testlog] [base_case.py (setup_class:14] - ==========封装公用input方法测试开始==========
2025-03-28 20:56:09,914 INFO [testlog] [test_common_method.py (test_common_input:18] - =====开始执行用例：公用input方法配置类型为int，输入内容为字符串:"999"======
2025-03-28 20:56:10,215 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - =====开始执行用例：公用input方法配置类型为int，输入内容为字符串:"999"======
2025-03-28 20:56:10,215 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =====执行用例：公用input方法配置类型为int，输入内容为字符串:"999" 成功=====
2025-03-28 20:56:10,216 INFO [testlog] [test_common_method.py (test_common_input:18] - ====开始执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 "=====
2025-03-28 20:56:10,217 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ====开始执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 "=====
2025-03-28 20:56:10,217 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ====执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 " 成功====
2025-03-28 20:56:10,217 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"=
2025-03-28 20:56:10,217 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"=
2025-03-28 20:56:10,217 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10" 成功
2025-03-28 20:56:10,218 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"=
2025-03-28 20:56:10,218 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"=
2025-03-28 20:56:10,218 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20" 成功
2025-03-28 20:56:10,219 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "
2025-03-28 20:56:10,219 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "
2025-03-28 20:56:10,219 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 " 成功
2025-03-28 20:56:10,219 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "
2025-03-28 20:56:10,219 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "
2025-03-28 20:56:10,219 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 " 成功
2025-03-28 20:56:10,220 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号
2025-03-28 20:56:10,220 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号
2025-03-28 20:56:10,220 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号 成功
2025-03-28 20:56:10,221 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号
2025-03-28 20:56:10,221 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号
2025-03-28 20:56:10,221 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号 成功
2025-03-28 20:56:10,221 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999"===
2025-03-28 20:56:10,222 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999"===
2025-03-28 20:56:10,222 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ==执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999" 成功==
2025-03-28 20:56:10,222 INFO [testlog] [test_common_method.py (test_common_input:18] - ===开始执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 "====
2025-03-28 20:56:10,222 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ===开始执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 "====
2025-03-28 20:56:10,222 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ===执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 " 成功===
2025-03-28 20:56:10,223 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"
2025-03-28 20:56:10,223 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"
2025-03-28 20:56:10,223 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1" 成功
2025-03-28 20:56:10,224 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"
2025-03-28 20:56:10,224 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"
2025-03-28 20:56:10,224 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22" 成功
2025-03-28 20:56:10,224 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "
2025-03-28 20:56:10,224 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "
2025-03-28 20:56:10,224 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 " 成功
2025-03-28 20:56:10,225 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "
2025-03-28 20:56:10,225 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "
2025-03-28 20:56:10,225 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 " 成功
2025-03-28 20:56:10,225 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数
2025-03-28 20:56:10,225 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数
2025-03-28 20:56:10,226 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数 成功
2025-03-28 20:56:10,226 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数
2025-03-28 20:56:10,226 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数
2025-03-28 20:56:10,226 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数 成功
2025-03-28 20:56:10,227 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号
2025-03-28 20:56:10,227 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号
2025-03-28 20:56:10,227 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号 成功
2025-03-28 20:56:10,227 INFO [testlog] [test_common_method.py (test_common_input:18] - =====开始执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 "=====
2025-03-28 20:56:10,227 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - =====开始执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 "=====
2025-03-28 20:56:10,227 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ====执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 " 成功=====
2025-03-28 20:56:10,228 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d "===
2025-03-28 20:56:10,228 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d "===
2025-03-28 20:56:10,228 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ==执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d " 成功==
2025-03-28 20:56:10,229 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "==
2025-03-28 20:56:10,229 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "==
2025-03-28 20:56:10,229 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d " 成功==
2025-03-28 20:56:10,229 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"==
2025-03-28 20:56:10,229 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"==
2025-03-28 20:56:10,229 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y" 成功==
2025-03-28 20:56:10,230 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"==
2025-03-28 20:56:10,230 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"==
2025-03-28 20:56:10,230 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N" 成功==
2025-03-28 20:56:10,231 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "
2025-03-28 20:56:10,231 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "
2025-03-28 20:56:10,231 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 " 成功
2025-03-28 20:56:10,231 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "
2025-03-28 20:56:10,231 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "
2025-03-28 20:56:10,231 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 " 成功
2025-03-28 20:56:10,232 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期
2025-03-28 20:56:10,232 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期
2025-03-28 20:56:10,232 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期 成功
2025-03-28 20:56:10,232 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期
2025-03-28 20:56:10,232 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期
2025-03-28 20:56:10,232 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期 成功
2025-03-28 20:56:10,233 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"
2025-03-28 20:56:10,233 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"
2025-03-28 20:56:10,233 ERROR [testlog] [base_case.py (base_exist_return_common_test:46] - 执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20" 失败，失败原因：print断言失败：实际为 '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n', 期望为 '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹1配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n'
2025-03-28 20:56:10,271 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"
2025-03-28 20:56:10,272 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"
2025-03-28 20:56:10,272 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20" 成功
2025-03-28 20:56:10,272 INFO [testlog] [test_common_method.py (test_common_input:18] - ======开始执行用例：公用input方法配置类型为int，不输入内容，在输入"20"======
2025-03-28 20:56:10,272 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ======开始执行用例：公用input方法配置类型为int，不输入内容，在输入"20"======
2025-03-28 20:56:10,272 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =====执行用例：公用input方法配置类型为int，不输入内容，在输入"20" 成功======
2025-03-28 20:56:10,273 INFO [testlog] [test_common_method.py (test_common_input:18] - ===开始执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "===
2025-03-28 20:56:10,273 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ===开始执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "===
2025-03-28 20:56:10,273 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ==执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 " 成功===
2025-03-28 20:56:10,273 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:56:10,273 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:56:10,273 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容 成功==
2025-03-28 20:56:10,274 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:56:10,274 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:56:10,274 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 20:56:10,274 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"
2025-03-28 20:56:10,274 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"
2025-03-28 20:56:10,274 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1" 成功
2025-03-28 20:56:10,275 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"
2025-03-28 20:56:10,275 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"
2025-03-28 20:56:10,275 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2" 成功
2025-03-28 20:56:10,276 INFO [testlog] [test_common_method.py (test_common_input:18] - ====开始执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2"====
2025-03-28 20:56:10,276 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ====开始执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2"====
2025-03-28 20:56:10,276 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ===执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2" 成功====
2025-03-28 20:56:10,277 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "
2025-03-28 20:56:10,277 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "
2025-03-28 20:56:10,277 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 " 成功
2025-03-28 20:56:10,277 INFO [testlog] [test_common_method.py (test_common_input:18] - =开始执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容=
2025-03-28 20:56:10,277 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - =开始执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容=
2025-03-28 20:56:10,277 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容 成功=
2025-03-28 20:56:10,278 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:56:10,278 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:56:10,278 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 20:56:10,279 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"
2025-03-28 20:56:10,279 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"
2025-03-28 20:56:10,279 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y" 成功
2025-03-28 20:56:10,279 INFO [testlog] [test_common_method.py (test_common_input:18] - ======开始执行用例：公用input方法配置类型为str，不输入内容，在输入"20"======
2025-03-28 20:56:10,279 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ======开始执行用例：公用input方法配置类型为str，不输入内容，在输入"20"======
2025-03-28 20:56:10,279 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =====执行用例：公用input方法配置类型为str，不输入内容，在输入"20" 成功======
2025-03-28 20:56:10,280 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:56:10,280 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 20:56:10,280 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容 成功==
2025-03-28 20:56:10,281 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:56:10,281 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 20:56:10,281 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 20:56:10,281 INFO [testlog] [base_case.py (teardown_class:18] - ==========封装公用input方法测试结束==========
2025-03-28 21:00:02,803 INFO [testlog] [base_case.py (setup_class:14] - ==========封装公用input方法测试开始==========
2025-03-28 21:00:02,804 INFO [testlog] [test_common_method.py (test_common_input:18] - =====开始执行用例：公用input方法配置类型为int，输入内容为字符串:"999"======
2025-03-28 21:00:03,098 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - =====开始执行用例：公用input方法配置类型为int，输入内容为字符串:"999"======
2025-03-28 21:00:03,098 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =====执行用例：公用input方法配置类型为int，输入内容为字符串:"999" 成功=====
2025-03-28 21:00:03,099 INFO [testlog] [test_common_method.py (test_common_input:18] - ====开始执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 "=====
2025-03-28 21:00:03,099 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ====开始执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 "=====
2025-03-28 21:00:03,099 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ====执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 " 成功====
2025-03-28 21:00:03,099 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"=
2025-03-28 21:00:03,099 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"=
2025-03-28 21:00:03,099 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10" 成功
2025-03-28 21:00:03,100 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"=
2025-03-28 21:00:03,100 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"=
2025-03-28 21:00:03,100 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20" 成功
2025-03-28 21:00:03,101 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "
2025-03-28 21:00:03,101 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "
2025-03-28 21:00:03,101 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 " 成功
2025-03-28 21:00:03,101 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "
2025-03-28 21:00:03,101 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "
2025-03-28 21:00:03,101 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 " 成功
2025-03-28 21:00:03,102 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号
2025-03-28 21:00:03,102 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号
2025-03-28 21:00:03,102 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号 成功
2025-03-28 21:00:03,102 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号
2025-03-28 21:00:03,102 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号
2025-03-28 21:00:03,102 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号 成功
2025-03-28 21:00:03,103 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999"===
2025-03-28 21:00:03,103 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999"===
2025-03-28 21:00:03,103 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ==执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999" 成功==
2025-03-28 21:00:03,103 INFO [testlog] [test_common_method.py (test_common_input:18] - ===开始执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 "====
2025-03-28 21:00:03,103 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ===开始执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 "====
2025-03-28 21:00:03,103 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ===执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 " 成功===
2025-03-28 21:00:03,104 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"
2025-03-28 21:00:03,104 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"
2025-03-28 21:00:03,104 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1" 成功
2025-03-28 21:00:03,105 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"
2025-03-28 21:00:03,105 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"
2025-03-28 21:00:03,105 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22" 成功
2025-03-28 21:00:03,105 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "
2025-03-28 21:00:03,105 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "
2025-03-28 21:00:03,105 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 " 成功
2025-03-28 21:00:03,106 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "
2025-03-28 21:00:03,106 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "
2025-03-28 21:00:03,106 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 " 成功
2025-03-28 21:00:03,107 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数
2025-03-28 21:00:03,107 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数
2025-03-28 21:00:03,107 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数 成功
2025-03-28 21:00:03,107 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数
2025-03-28 21:00:03,107 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数
2025-03-28 21:00:03,107 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数 成功
2025-03-28 21:00:03,108 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号
2025-03-28 21:00:03,108 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号
2025-03-28 21:00:03,108 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号 成功
2025-03-28 21:00:03,108 INFO [testlog] [test_common_method.py (test_common_input:18] - =====开始执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 "=====
2025-03-28 21:00:03,108 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - =====开始执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 "=====
2025-03-28 21:00:03,108 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ====执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 " 成功=====
2025-03-28 21:00:03,109 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d "===
2025-03-28 21:00:03,109 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d "===
2025-03-28 21:00:03,109 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ==执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d " 成功==
2025-03-28 21:00:03,110 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "==
2025-03-28 21:00:03,110 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "==
2025-03-28 21:00:03,110 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d " 成功==
2025-03-28 21:00:03,111 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"==
2025-03-28 21:00:03,111 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"==
2025-03-28 21:00:03,111 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y" 成功==
2025-03-28 21:00:03,111 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"==
2025-03-28 21:00:03,111 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"==
2025-03-28 21:00:03,111 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N" 成功==
2025-03-28 21:00:03,112 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "
2025-03-28 21:00:03,112 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "
2025-03-28 21:00:03,112 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 " 成功
2025-03-28 21:00:03,112 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "
2025-03-28 21:00:03,112 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "
2025-03-28 21:00:03,112 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 " 成功
2025-03-28 21:00:03,113 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期
2025-03-28 21:00:03,113 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期
2025-03-28 21:00:03,113 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期 成功
2025-03-28 21:00:03,114 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期
2025-03-28 21:00:03,114 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期
2025-03-28 21:00:03,114 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期 成功
2025-03-28 21:00:03,114 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"
2025-03-28 21:00:03,114 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"
2025-03-28 21:00:03,115 ERROR [testlog] [base_case.py (base_exist_return_common_test:46] - 执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20" 失败，失败原因：
2025-03-28 21:00:03,151 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"
2025-03-28 21:00:03,151 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"
2025-03-28 21:00:03,151 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20" 成功
2025-03-28 21:00:03,151 INFO [testlog] [test_common_method.py (test_common_input:18] - ======开始执行用例：公用input方法配置类型为int，不输入内容，在输入"20"======
2025-03-28 21:00:03,151 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ======开始执行用例：公用input方法配置类型为int，不输入内容，在输入"20"======
2025-03-28 21:00:03,151 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =====执行用例：公用input方法配置类型为int，不输入内容，在输入"20" 成功======
2025-03-28 21:00:03,152 INFO [testlog] [test_common_method.py (test_common_input:18] - ===开始执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "===
2025-03-28 21:00:03,152 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ===开始执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "===
2025-03-28 21:00:03,152 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ==执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 " 成功===
2025-03-28 21:00:03,152 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 21:00:03,153 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 21:00:03,153 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容 成功==
2025-03-28 21:00:03,153 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 21:00:03,153 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 21:00:03,153 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 21:00:03,154 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"
2025-03-28 21:00:03,154 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"
2025-03-28 21:00:03,154 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1" 成功
2025-03-28 21:00:03,154 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"
2025-03-28 21:00:03,154 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"
2025-03-28 21:00:03,154 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2" 成功
2025-03-28 21:00:03,155 INFO [testlog] [test_common_method.py (test_common_input:18] - ====开始执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2"====
2025-03-28 21:00:03,155 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ====开始执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2"====
2025-03-28 21:00:03,155 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ===执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2" 成功====
2025-03-28 21:00:03,155 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "
2025-03-28 21:00:03,155 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "
2025-03-28 21:00:03,156 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 " 成功
2025-03-28 21:00:03,156 INFO [testlog] [test_common_method.py (test_common_input:18] - =开始执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容=
2025-03-28 21:00:03,156 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - =开始执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容=
2025-03-28 21:00:03,156 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容 成功=
2025-03-28 21:00:03,157 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 21:00:03,157 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 21:00:03,157 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 21:00:03,157 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"
2025-03-28 21:00:03,157 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"
2025-03-28 21:00:03,157 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y" 成功
2025-03-28 21:00:03,158 INFO [testlog] [test_common_method.py (test_common_input:18] - ======开始执行用例：公用input方法配置类型为str，不输入内容，在输入"20"======
2025-03-28 21:00:03,158 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ======开始执行用例：公用input方法配置类型为str，不输入内容，在输入"20"======
2025-03-28 21:00:03,158 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =====执行用例：公用input方法配置类型为str，不输入内容，在输入"20" 成功======
2025-03-28 21:00:03,158 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 21:00:03,158 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 21:00:03,159 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容 成功==
2025-03-28 21:00:03,159 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 21:00:03,159 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 21:00:03,159 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 21:00:03,159 INFO [testlog] [base_case.py (teardown_class:18] - ==========封装公用input方法测试结束==========
2025-03-28 21:00:34,905 INFO [testlog] [base_case.py (setup_class:14] - ==========封装公用input方法测试开始==========
2025-03-28 21:00:34,905 INFO [testlog] [test_common_method.py (test_common_input:18] - =====开始执行用例：公用input方法配置类型为int，输入内容为字符串:"999"======
2025-03-28 21:00:35,192 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - =====开始执行用例：公用input方法配置类型为int，输入内容为字符串:"999"======
2025-03-28 21:00:35,192 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =====执行用例：公用input方法配置类型为int，输入内容为字符串:"999" 成功=====
2025-03-28 21:00:35,193 INFO [testlog] [test_common_method.py (test_common_input:18] - ====开始执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 "=====
2025-03-28 21:00:35,193 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ====开始执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 "=====
2025-03-28 21:00:35,193 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ====执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 " 成功====
2025-03-28 21:00:35,194 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"=
2025-03-28 21:00:35,194 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"=
2025-03-28 21:00:35,194 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10" 成功
2025-03-28 21:00:35,195 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"=
2025-03-28 21:00:35,195 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"=
2025-03-28 21:00:35,195 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20" 成功
2025-03-28 21:00:35,196 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "
2025-03-28 21:00:35,196 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "
2025-03-28 21:00:35,196 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 " 成功
2025-03-28 21:00:35,196 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "
2025-03-28 21:00:35,196 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "
2025-03-28 21:00:35,197 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 " 成功
2025-03-28 21:00:35,197 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号
2025-03-28 21:00:35,197 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号
2025-03-28 21:00:35,197 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号 成功
2025-03-28 21:00:35,198 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号
2025-03-28 21:00:35,198 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号
2025-03-28 21:00:35,198 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号 成功
2025-03-28 21:00:35,199 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999"===
2025-03-28 21:00:35,199 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999"===
2025-03-28 21:00:35,199 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ==执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999" 成功==
2025-03-28 21:00:35,200 INFO [testlog] [test_common_method.py (test_common_input:18] - ===开始执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 "====
2025-03-28 21:00:35,200 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ===开始执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 "====
2025-03-28 21:00:35,200 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ===执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 " 成功===
2025-03-28 21:00:35,200 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"
2025-03-28 21:00:35,200 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"
2025-03-28 21:00:35,200 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1" 成功
2025-03-28 21:00:35,201 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"
2025-03-28 21:00:35,201 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"
2025-03-28 21:00:35,201 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22" 成功
2025-03-28 21:00:35,202 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "
2025-03-28 21:00:35,202 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "
2025-03-28 21:00:35,202 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 " 成功
2025-03-28 21:00:35,203 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "
2025-03-28 21:00:35,203 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "
2025-03-28 21:00:35,203 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 " 成功
2025-03-28 21:00:35,204 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数
2025-03-28 21:00:35,204 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数
2025-03-28 21:00:35,204 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数 成功
2025-03-28 21:00:35,205 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数
2025-03-28 21:00:35,205 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数
2025-03-28 21:00:35,205 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数 成功
2025-03-28 21:00:35,206 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号
2025-03-28 21:00:35,206 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号
2025-03-28 21:00:35,206 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号 成功
2025-03-28 21:00:35,206 INFO [testlog] [test_common_method.py (test_common_input:18] - =====开始执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 "=====
2025-03-28 21:00:35,206 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - =====开始执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 "=====
2025-03-28 21:00:35,206 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ====执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 " 成功=====
2025-03-28 21:00:35,207 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d "===
2025-03-28 21:00:35,207 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d "===
2025-03-28 21:00:35,207 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ==执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d " 成功==
2025-03-28 21:00:35,208 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "==
2025-03-28 21:00:35,208 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "==
2025-03-28 21:00:35,208 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d " 成功==
2025-03-28 21:00:35,209 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"==
2025-03-28 21:00:35,209 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"==
2025-03-28 21:00:35,209 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y" 成功==
2025-03-28 21:00:35,209 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"==
2025-03-28 21:00:35,209 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"==
2025-03-28 21:00:35,210 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N" 成功==
2025-03-28 21:00:35,210 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "
2025-03-28 21:00:35,210 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "
2025-03-28 21:00:35,210 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 " 成功
2025-03-28 21:00:35,211 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "
2025-03-28 21:00:35,211 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "
2025-03-28 21:00:35,211 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 " 成功
2025-03-28 21:00:35,212 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期
2025-03-28 21:00:35,212 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期
2025-03-28 21:00:35,212 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期 成功
2025-03-28 21:00:35,212 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期
2025-03-28 21:00:35,212 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期
2025-03-28 21:00:35,212 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期 成功
2025-03-28 21:00:35,213 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"
2025-03-28 21:00:35,213 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"
2025-03-28 21:00:35,213 ERROR [testlog] [base_case.py (base_exist_return_common_test:46] - 执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20" 失败，失败原因：
2025-03-28 21:00:35,253 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"
2025-03-28 21:00:35,253 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"
2025-03-28 21:00:35,253 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20" 成功
2025-03-28 21:00:35,254 INFO [testlog] [test_common_method.py (test_common_input:18] - ======开始执行用例：公用input方法配置类型为int，不输入内容，在输入"20"======
2025-03-28 21:00:35,254 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ======开始执行用例：公用input方法配置类型为int，不输入内容，在输入"20"======
2025-03-28 21:00:35,254 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =====执行用例：公用input方法配置类型为int，不输入内容，在输入"20" 成功======
2025-03-28 21:00:35,255 INFO [testlog] [test_common_method.py (test_common_input:18] - ===开始执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "===
2025-03-28 21:00:35,255 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ===开始执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "===
2025-03-28 21:00:35,255 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ==执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 " 成功===
2025-03-28 21:00:35,255 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 21:00:35,256 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 21:00:35,256 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容 成功==
2025-03-28 21:00:35,256 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 21:00:35,256 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 21:00:35,256 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 21:00:35,257 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"
2025-03-28 21:00:35,257 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"
2025-03-28 21:00:35,257 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1" 成功
2025-03-28 21:00:35,258 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"
2025-03-28 21:00:35,258 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"
2025-03-28 21:00:35,258 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2" 成功
2025-03-28 21:00:35,259 INFO [testlog] [test_common_method.py (test_common_input:18] - ====开始执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2"====
2025-03-28 21:00:35,259 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ====开始执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2"====
2025-03-28 21:00:35,259 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - ===执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2" 成功====
2025-03-28 21:00:35,259 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "
2025-03-28 21:00:35,259 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "
2025-03-28 21:00:35,259 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 " 成功
2025-03-28 21:00:35,260 INFO [testlog] [test_common_method.py (test_common_input:18] - =开始执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容=
2025-03-28 21:00:35,260 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - =开始执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容=
2025-03-28 21:00:35,260 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容 成功=
2025-03-28 21:00:35,261 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 21:00:35,261 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 21:00:35,261 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 21:00:35,262 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"
2025-03-28 21:00:35,262 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"
2025-03-28 21:00:35,262 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y" 成功
2025-03-28 21:00:35,262 INFO [testlog] [test_common_method.py (test_common_input:18] - ======开始执行用例：公用input方法配置类型为str，不输入内容，在输入"20"======
2025-03-28 21:00:35,263 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ======开始执行用例：公用input方法配置类型为str，不输入内容，在输入"20"======
2025-03-28 21:00:35,263 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =====执行用例：公用input方法配置类型为str，不输入内容，在输入"20" 成功======
2025-03-28 21:00:35,263 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 21:00:35,263 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - ==开始执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 21:00:35,263 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - =执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容 成功==
2025-03-28 21:00:35,264 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 21:00:35,264 INFO [testlog] [base_case.py (base_exist_return_common_test:24] - 开始执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 21:00:35,264 DEBUG [testlog] [base_case.py (base_exist_return_common_test:48] - 执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 21:00:35,264 INFO [testlog] [base_case.py (teardown_class:18] - ==========封装公用input方法测试结束==========
2025-03-28 21:09:58,339 INFO [testlog] [base_case.py (setup_class:15] - ==========封装公用input方法测试开始==========
2025-03-28 21:09:58,339 INFO [testlog] [test_common_method.py (test_common_input:18] - =====开始执行用例：公用input方法配置类型为int，输入内容为字符串:"999"======
2025-03-28 21:09:58,618 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - =====开始执行用例：公用input方法配置类型为int，输入内容为字符串:"999"======
2025-03-28 21:09:58,618 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - =====执行用例：公用input方法配置类型为int，输入内容为字符串:"999" 成功=====
2025-03-28 21:09:58,619 INFO [testlog] [test_common_method.py (test_common_input:18] - ====开始执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 "=====
2025-03-28 21:09:58,619 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ====开始执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 "=====
2025-03-28 21:09:58,619 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - ====执行用例：公用input方法配置类型为int，输入内容为字符串:" 666 " 成功====
2025-03-28 21:09:58,620 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"=
2025-03-28 21:09:58,620 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"=
2025-03-28 21:09:58,620 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10" 成功
2025-03-28 21:09:58,621 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"=
2025-03-28 21:09:58,621 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"=
2025-03-28 21:09:58,621 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20" 成功
2025-03-28 21:09:58,621 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "
2025-03-28 21:09:58,621 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "
2025-03-28 21:09:58,621 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 " 成功
2025-03-28 21:09:58,622 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "
2025-03-28 21:09:58,622 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "
2025-03-28 21:09:58,622 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 " 成功
2025-03-28 21:09:58,623 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号
2025-03-28 21:09:58,623 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号
2025-03-28 21:09:58,623 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号 成功
2025-03-28 21:09:58,623 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号
2025-03-28 21:09:58,624 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号
2025-03-28 21:09:58,624 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号 成功
2025-03-28 21:09:58,624 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999"===
2025-03-28 21:09:58,624 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ==开始执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999"===
2025-03-28 21:09:58,624 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - ==执行用例：公用input方法配置类型为float，输入内容为字符串:"999,999" 成功==
2025-03-28 21:09:58,625 INFO [testlog] [test_common_method.py (test_common_input:18] - ===开始执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 "====
2025-03-28 21:09:58,625 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ===开始执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 "====
2025-03-28 21:09:58,625 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - ===执行用例：公用input方法配置类型为float，输入内容为字符串:" 666 " 成功===
2025-03-28 21:09:58,625 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"
2025-03-28 21:09:58,626 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"
2025-03-28 21:09:58,626 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1" 成功
2025-03-28 21:09:58,626 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"
2025-03-28 21:09:58,626 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"
2025-03-28 21:09:58,626 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22" 成功
2025-03-28 21:09:58,627 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "
2025-03-28 21:09:58,627 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "
2025-03-28 21:09:58,627 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 " 成功
2025-03-28 21:09:58,627 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "
2025-03-28 21:09:58,627 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "
2025-03-28 21:09:58,628 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 " 成功
2025-03-28 21:09:58,628 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数
2025-03-28 21:09:58,628 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数
2025-03-28 21:09:58,628 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数 成功
2025-03-28 21:09:58,629 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数
2025-03-28 21:09:58,629 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数
2025-03-28 21:09:58,629 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数 成功
2025-03-28 21:09:58,629 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号
2025-03-28 21:09:58,629 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号
2025-03-28 21:09:58,629 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号 成功
2025-03-28 21:09:58,630 INFO [testlog] [test_common_method.py (test_common_input:18] - =====开始执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 "=====
2025-03-28 21:09:58,630 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - =====开始执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 "=====
2025-03-28 21:09:58,630 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - ====执行用例：公用input方法配置类型为str，输入内容为字符串:" 10 " 成功=====
2025-03-28 21:09:58,630 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d "===
2025-03-28 21:09:58,630 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ==开始执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d "===
2025-03-28 21:09:58,630 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - ==执行用例：公用input方法配置类型为str，关闭前后去空格配置，输入" as d " 成功==
2025-03-28 21:09:58,631 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "==
2025-03-28 21:09:58,631 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ==开始执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "==
2025-03-28 21:09:58,631 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - =执行用例：公用input方法配置类型为str，关闭去除所有空格配置，输入" as d " 成功==
2025-03-28 21:09:58,632 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"==
2025-03-28 21:09:58,632 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"==
2025-03-28 21:09:58,632 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - =执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y" 成功==
2025-03-28 21:09:58,633 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"==
2025-03-28 21:09:58,633 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ==开始执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"==
2025-03-28 21:09:58,633 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - =执行用例：公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N" 成功==
2025-03-28 21:09:58,633 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "
2025-03-28 21:09:58,633 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "
2025-03-28 21:09:58,633 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 " 成功
2025-03-28 21:09:58,634 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "
2025-03-28 21:09:58,634 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "
2025-03-28 21:09:58,634 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 " 成功
2025-03-28 21:09:58,634 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期
2025-03-28 21:09:58,635 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期
2025-03-28 21:09:58,635 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期 成功
2025-03-28 21:09:58,635 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期
2025-03-28 21:09:58,635 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期
2025-03-28 21:09:58,636 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期 成功
2025-03-28 21:09:58,636 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"
2025-03-28 21:09:58,636 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"
2025-03-28 21:09:58,636 ERROR [testlog] [base_case.py (base_exist_return_common_test:47] - 执行用例：公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20" 失败，失败原因：print断言失败：实际为 [0;91m
格式错误：输入的内容数据类型不匹配, 期望为 int 类型
[0m
[0;91m
格式错误：输入的内容数据类型不匹配, 期望为 int 类型
[0m
[0;91m
格式错误：输入的内容数据类型不匹配, 期望为 int 类型
[0m
[0;91m
格式错误：输入的内容数据类型不匹配, 期望为 int 类型
[0m
[0;91m
格式错误：输入的内容数据类型不匹配, 期望为 int 类型
[0m
, 期望为 [0;91m
格式错误：输入的内容数据类型不匹配, 期望为 int 类型
[0m
[0;91m
格式错误：输入的内容数据类型不匹配, 期望为 int 类型
[0m
[0;91m
格式错误：输入的内容数据类型不匹1配, 期望为 int 类型
[0m
[0;91m
格式错误：输入的内容数据类型不匹配, 期望为 int 类型
[0m
[0;91m
格式错误：输入的内容数据类型不匹配, 期望为 int 类型
[0m

差异：{'values_changed': {'root': {'new_value': '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹1配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n', 'old_value': '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n', 'diff': '--- \n+++ \n@@ -5,7 +5,7 @@\n 格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n \x1b[0m\n \x1b[0;91m\n-格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n+格式错误：输入的内容数据类型不匹1配, 期望为 int 类型\n \x1b[0m\n \x1b[0;91m\n 格式错误：输入的内容数据类型不匹配, 期望为 int 类型'}}}
2025-03-28 21:09:58,674 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"
2025-03-28 21:09:58,675 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"
2025-03-28 21:09:58,675 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20" 成功
2025-03-28 21:09:58,675 INFO [testlog] [test_common_method.py (test_common_input:18] - ======开始执行用例：公用input方法配置类型为int，不输入内容，在输入"20"======
2025-03-28 21:09:58,675 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ======开始执行用例：公用input方法配置类型为int，不输入内容，在输入"20"======
2025-03-28 21:09:58,675 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - =====执行用例：公用input方法配置类型为int，不输入内容，在输入"20" 成功======
2025-03-28 21:09:58,676 INFO [testlog] [test_common_method.py (test_common_input:18] - ===开始执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "===
2025-03-28 21:09:58,676 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ===开始执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "===
2025-03-28 21:09:58,676 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - ==执行用例：公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 " 成功===
2025-03-28 21:09:58,677 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 21:09:58,677 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ==开始执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 21:09:58,677 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - =执行用例：公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容 成功==
2025-03-28 21:09:58,677 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 21:09:58,677 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 21:09:58,678 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 21:09:58,678 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"
2025-03-28 21:09:58,678 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"
2025-03-28 21:09:58,678 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1" 成功
2025-03-28 21:09:58,679 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"
2025-03-28 21:09:58,679 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"
2025-03-28 21:09:58,679 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2" 成功
2025-03-28 21:09:58,680 INFO [testlog] [test_common_method.py (test_common_input:18] - ====开始执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2"====
2025-03-28 21:09:58,680 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ====开始执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2"====
2025-03-28 21:09:58,680 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - ===执行用例：公用input方法配置类型为float，不输入内容，在输入"20.2" 成功====
2025-03-28 21:09:58,680 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "
2025-03-28 21:09:58,680 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "
2025-03-28 21:09:58,680 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 " 成功
2025-03-28 21:09:58,681 INFO [testlog] [test_common_method.py (test_common_input:18] - =开始执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容=
2025-03-28 21:09:58,681 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - =开始执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容=
2025-03-28 21:09:58,681 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容 成功=
2025-03-28 21:09:58,682 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 21:09:58,682 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 21:09:58,682 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 21:09:58,682 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"
2025-03-28 21:09:58,682 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"
2025-03-28 21:09:58,682 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y" 成功
2025-03-28 21:09:58,683 INFO [testlog] [test_common_method.py (test_common_input:18] - ======开始执行用例：公用input方法配置类型为str，不输入内容，在输入"20"======
2025-03-28 21:09:58,683 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ======开始执行用例：公用input方法配置类型为str，不输入内容，在输入"20"======
2025-03-28 21:09:58,683 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - =====执行用例：公用input方法配置类型为str，不输入内容，在输入"20" 成功======
2025-03-28 21:09:58,684 INFO [testlog] [test_common_method.py (test_common_input:18] - ==开始执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 21:09:58,684 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - ==开始执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容==
2025-03-28 21:09:58,684 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - =执行用例：公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容 成功==
2025-03-28 21:09:58,684 INFO [testlog] [test_common_method.py (test_common_input:18] - 开始执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 21:09:58,684 INFO [testlog] [base_case.py (base_exist_return_common_test:25] - 开始执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容
2025-03-28 21:09:58,684 DEBUG [testlog] [base_case.py (base_exist_return_common_test:49] - 执行用例：公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容 成功
2025-03-28 21:09:58,684 INFO [testlog] [base_case.py (teardown_class:19] - ==========封装公用input方法测试结束==========
2025-03-28 21:30:26,516 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 21:30:26,843 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"开始执行=====
2025-03-28 21:30:26,843 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"执行通过=====
2025-03-28 21:30:26,844 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "开始执行====
2025-03-28 21:30:26,845 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "执行通过====
2025-03-28 21:30:26,845 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"开始执行
2025-03-28 21:30:26,845 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"执行通过
2025-03-28 21:30:26,846 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"开始执行
2025-03-28 21:30:26,846 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"执行通过
2025-03-28 21:30:26,846 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "开始执行
2025-03-28 21:30:26,846 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "执行通过
2025-03-28 21:30:26,847 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 21:30:26,847 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 21:30:26,848 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号开始执行
2025-03-28 21:30:26,848 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号执行通过
2025-03-28 21:30:26,848 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号开始执行
2025-03-28 21:30:26,849 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号执行通过
2025-03-28 21:30:26,849 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"开始执行==
2025-03-28 21:30:26,849 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"执行通过==
2025-03-28 21:30:26,850 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "开始执行===
2025-03-28 21:30:26,850 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "执行通过===
2025-03-28 21:30:26,850 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"开始执行
2025-03-28 21:30:26,851 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"执行通过
2025-03-28 21:30:26,851 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"开始执行
2025-03-28 21:30:26,851 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"执行通过
2025-03-28 21:30:26,852 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "开始执行
2025-03-28 21:30:26,852 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "执行通过
2025-03-28 21:30:26,852 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "开始执行
2025-03-28 21:30:26,852 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "执行通过
2025-03-28 21:30:26,853 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数开始执行
2025-03-28 21:30:26,853 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数执行通过
2025-03-28 21:30:26,853 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数开始执行
2025-03-28 21:30:26,853 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数执行通过
2025-03-28 21:30:26,854 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号开始执行
2025-03-28 21:30:26,854 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号执行通过
2025-03-28 21:30:26,854 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "开始执行=====
2025-03-28 21:30:26,855 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "执行通过=====
2025-03-28 21:30:26,855 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "开始执行==
2025-03-28 21:30:26,855 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "执行通过==
2025-03-28 21:30:26,856 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "开始执行==
2025-03-28 21:30:26,856 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "执行通过==
2025-03-28 21:30:26,857 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"开始执行==
2025-03-28 21:30:26,857 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"执行通过==
2025-03-28 21:30:26,857 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"开始执行==
2025-03-28 21:30:26,857 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"执行通过==
2025-03-28 21:30:26,858 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 21:30:26,858 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 21:30:26,859 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "开始执行
2025-03-28 21:30:26,859 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "执行通过
2025-03-28 21:30:26,859 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期开始执行
2025-03-28 21:30:26,860 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期执行通过
2025-03-28 21:30:26,860 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期开始执行
2025-03-28 21:30:26,860 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期执行通过
2025-03-28 21:30:26,861 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"开始执行
2025-03-28 21:30:26,861 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"执行通过
2025-03-28 21:30:26,861 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"开始执行
2025-03-28 21:30:26,861 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"执行通过
2025-03-28 21:30:26,862 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"开始执行======
2025-03-28 21:30:26,862 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"执行通过======
2025-03-28 21:30:26,862 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "开始执行===
2025-03-28 21:30:26,862 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "执行通过===
2025-03-28 21:30:26,863 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 21:30:26,863 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 21:30:26,863 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:30:26,863 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:30:26,864 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"开始执行
2025-03-28 21:30:26,864 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"执行通过
2025-03-28 21:30:26,865 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"开始执行
2025-03-28 21:30:26,865 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"执行通过
2025-03-28 21:30:26,866 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"开始执行====
2025-03-28 21:30:26,866 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"执行通过====
2025-03-28 21:30:26,866 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "开始执行
2025-03-28 21:30:26,867 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "执行通过
2025-03-28 21:30:26,867 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容开始执行=
2025-03-28 21:30:26,867 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容执行通过=
2025-03-28 21:30:26,868 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:30:26,868 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:30:26,868 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"开始执行
2025-03-28 21:30:26,868 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"执行通过
2025-03-28 21:30:26,869 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"开始执行======
2025-03-28 21:30:26,869 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"执行通过======
2025-03-28 21:30:26,870 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 21:30:26,870 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 21:30:26,870 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:30:26,870 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:30:26,870 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 21:30:37,398 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 21:30:37,684 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"开始执行=====
2025-03-28 21:30:37,684 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"执行通过=====
2025-03-28 21:30:37,685 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "开始执行====
2025-03-28 21:30:37,685 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "执行通过====
2025-03-28 21:30:37,686 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"开始执行
2025-03-28 21:30:37,686 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"执行通过
2025-03-28 21:30:37,686 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"开始执行
2025-03-28 21:30:37,686 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"执行通过
2025-03-28 21:30:37,687 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "开始执行
2025-03-28 21:30:37,687 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "执行通过
2025-03-28 21:30:37,687 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 21:30:37,687 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 21:30:37,688 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号开始执行
2025-03-28 21:30:37,688 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号执行通过
2025-03-28 21:30:37,688 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号开始执行
2025-03-28 21:30:37,688 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号执行通过
2025-03-28 21:30:37,689 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"开始执行==
2025-03-28 21:30:37,689 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"执行通过==
2025-03-28 21:30:37,689 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "开始执行===
2025-03-28 21:30:37,689 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "执行通过===
2025-03-28 21:30:37,690 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"开始执行
2025-03-28 21:30:37,690 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"执行通过
2025-03-28 21:30:37,690 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"开始执行
2025-03-28 21:30:37,691 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"执行通过
2025-03-28 21:30:37,691 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "开始执行
2025-03-28 21:30:37,691 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "执行通过
2025-03-28 21:30:37,692 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "开始执行
2025-03-28 21:30:37,692 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "执行通过
2025-03-28 21:30:37,692 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数开始执行
2025-03-28 21:30:37,692 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数执行通过
2025-03-28 21:30:37,693 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数开始执行
2025-03-28 21:30:37,693 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数执行通过
2025-03-28 21:30:37,693 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号开始执行
2025-03-28 21:30:37,693 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号执行通过
2025-03-28 21:30:37,694 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "开始执行=====
2025-03-28 21:30:37,694 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "执行通过=====
2025-03-28 21:30:37,694 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "开始执行==
2025-03-28 21:30:37,694 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "执行通过==
2025-03-28 21:30:37,695 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "开始执行==
2025-03-28 21:30:37,695 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "执行通过==
2025-03-28 21:30:37,695 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"开始执行==
2025-03-28 21:30:37,695 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"执行通过==
2025-03-28 21:30:37,696 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"开始执行==
2025-03-28 21:30:37,696 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"执行通过==
2025-03-28 21:30:37,697 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 21:30:37,697 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 21:30:37,698 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "开始执行
2025-03-28 21:30:37,698 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "执行通过
2025-03-28 21:30:37,698 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期开始执行
2025-03-28 21:30:37,699 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期执行通过
2025-03-28 21:30:37,699 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期开始执行
2025-03-28 21:30:37,699 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期执行通过
2025-03-28 21:30:37,700 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"开始执行
2025-03-28 21:30:37,700 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"执行通过
2025-03-28 21:30:37,700 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"开始执行
2025-03-28 21:30:37,700 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"执行通过
2025-03-28 21:30:37,701 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"开始执行======
2025-03-28 21:30:37,701 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"执行通过======
2025-03-28 21:30:37,702 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "开始执行===
2025-03-28 21:30:37,702 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "执行通过===
2025-03-28 21:30:37,702 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 21:30:37,702 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 21:30:37,703 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:30:37,703 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:30:37,703 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"开始执行
2025-03-28 21:30:37,703 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"执行通过
2025-03-28 21:30:37,704 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"开始执行
2025-03-28 21:30:37,704 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"执行通过
2025-03-28 21:30:37,705 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"开始执行====
2025-03-28 21:30:37,705 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"执行通过====
2025-03-28 21:30:37,705 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "开始执行
2025-03-28 21:30:37,705 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "执行通过
2025-03-28 21:30:37,706 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容开始执行=
2025-03-28 21:30:37,706 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容执行通过=
2025-03-28 21:30:37,706 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:30:37,706 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:30:37,707 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"开始执行
2025-03-28 21:30:37,707 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"执行通过
2025-03-28 21:30:37,708 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"开始执行======
2025-03-28 21:30:37,708 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"执行通过======
2025-03-28 21:30:37,708 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 21:30:37,708 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 21:30:37,709 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:30:37,709 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:30:37,709 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 21:32:10,487 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 21:32:10,778 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"开始执行=====
2025-03-28 21:32:10,778 DEBUG [testlog] [test_common_method.py (test_common_input:29] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"执行通过=====
2025-03-28 21:32:10,779 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "开始执行====
2025-03-28 21:32:10,780 DEBUG [testlog] [test_common_method.py (test_common_input:29] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "执行通过====
2025-03-28 21:32:10,780 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"开始执行
2025-03-28 21:32:10,780 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"执行通过
2025-03-28 21:32:10,781 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"开始执行
2025-03-28 21:32:10,781 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"执行通过
2025-03-28 21:32:10,781 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "开始执行
2025-03-28 21:32:10,781 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "执行通过
2025-03-28 21:32:10,782 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 21:32:10,782 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 21:32:10,783 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号开始执行
2025-03-28 21:32:10,783 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号执行通过
2025-03-28 21:32:10,783 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号开始执行
2025-03-28 21:32:10,783 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号执行通过
2025-03-28 21:32:10,784 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"开始执行==
2025-03-28 21:32:10,784 DEBUG [testlog] [test_common_method.py (test_common_input:29] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"执行通过==
2025-03-28 21:32:10,784 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "开始执行===
2025-03-28 21:32:10,785 DEBUG [testlog] [test_common_method.py (test_common_input:29] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "执行通过===
2025-03-28 21:32:10,785 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"开始执行
2025-03-28 21:32:10,785 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"执行通过
2025-03-28 21:32:10,786 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"开始执行
2025-03-28 21:32:10,786 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"执行通过
2025-03-28 21:32:10,787 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "开始执行
2025-03-28 21:32:10,787 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "执行通过
2025-03-28 21:32:10,787 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "开始执行
2025-03-28 21:32:10,787 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "执行通过
2025-03-28 21:32:10,788 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数开始执行
2025-03-28 21:32:10,788 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数执行通过
2025-03-28 21:32:10,789 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数开始执行
2025-03-28 21:32:10,789 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数执行通过
2025-03-28 21:32:10,789 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号开始执行
2025-03-28 21:32:10,789 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号执行通过
2025-03-28 21:32:10,790 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "开始执行=====
2025-03-28 21:32:10,790 DEBUG [testlog] [test_common_method.py (test_common_input:29] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "执行通过=====
2025-03-28 21:32:10,791 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "开始执行==
2025-03-28 21:32:10,791 DEBUG [testlog] [test_common_method.py (test_common_input:29] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "执行通过==
2025-03-28 21:32:10,792 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "开始执行==
2025-03-28 21:32:10,792 DEBUG [testlog] [test_common_method.py (test_common_input:29] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "执行通过==
2025-03-28 21:32:10,792 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"开始执行==
2025-03-28 21:32:10,792 DEBUG [testlog] [test_common_method.py (test_common_input:29] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"执行通过==
2025-03-28 21:32:10,793 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"开始执行==
2025-03-28 21:32:10,793 DEBUG [testlog] [test_common_method.py (test_common_input:29] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"执行通过==
2025-03-28 21:32:10,793 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 21:32:10,793 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 21:32:10,794 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "开始执行
2025-03-28 21:32:10,794 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "执行通过
2025-03-28 21:32:10,795 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期开始执行
2025-03-28 21:32:10,795 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期执行通过
2025-03-28 21:32:10,795 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期开始执行
2025-03-28 21:32:10,796 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期执行通过
2025-03-28 21:32:10,796 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"开始执行
2025-03-28 21:32:10,796 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"执行通过
2025-03-28 21:32:10,797 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"开始执行
2025-03-28 21:32:10,797 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"执行通过
2025-03-28 21:32:10,797 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"开始执行======
2025-03-28 21:32:10,797 DEBUG [testlog] [test_common_method.py (test_common_input:29] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"执行通过======
2025-03-28 21:32:10,798 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "开始执行===
2025-03-28 21:32:10,798 DEBUG [testlog] [test_common_method.py (test_common_input:29] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "执行通过===
2025-03-28 21:32:10,799 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 21:32:10,799 DEBUG [testlog] [test_common_method.py (test_common_input:29] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 21:32:10,799 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:32:10,799 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:32:10,800 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"开始执行
2025-03-28 21:32:10,800 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"执行通过
2025-03-28 21:32:10,800 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"开始执行
2025-03-28 21:32:10,800 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"执行通过
2025-03-28 21:32:10,801 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"开始执行====
2025-03-28 21:32:10,801 DEBUG [testlog] [test_common_method.py (test_common_input:29] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"执行通过====
2025-03-28 21:32:10,802 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "开始执行
2025-03-28 21:32:10,802 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "执行通过
2025-03-28 21:32:10,802 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容开始执行=
2025-03-28 21:32:10,802 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容执行通过=
2025-03-28 21:32:10,803 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:32:10,803 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:32:10,804 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"开始执行
2025-03-28 21:32:10,804 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"执行通过
2025-03-28 21:32:10,804 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"开始执行======
2025-03-28 21:32:10,804 DEBUG [testlog] [test_common_method.py (test_common_input:29] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"执行通过======
2025-03-28 21:32:10,805 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 21:32:10,805 DEBUG [testlog] [test_common_method.py (test_common_input:29] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 21:32:10,806 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:32:10,806 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:32:10,806 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 21:33:39,258 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 21:33:39,556 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"开始执行=====
2025-03-28 21:33:39,556 DEBUG [testlog] [test_common_method.py (test_common_input:29] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"执行通过=====
2025-03-28 21:33:39,557 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "开始执行====
2025-03-28 21:33:39,557 DEBUG [testlog] [test_common_method.py (test_common_input:29] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "执行通过====
2025-03-28 21:33:39,558 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"开始执行
2025-03-28 21:33:39,558 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"执行通过
2025-03-28 21:33:39,559 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"开始执行
2025-03-28 21:33:39,559 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"执行通过
2025-03-28 21:33:39,559 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "开始执行
2025-03-28 21:33:39,559 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "执行通过
2025-03-28 21:33:39,560 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 21:33:39,560 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 21:33:39,560 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号开始执行
2025-03-28 21:33:39,560 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号执行通过
2025-03-28 21:33:39,561 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号开始执行
2025-03-28 21:33:39,562 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号执行通过
2025-03-28 21:33:39,562 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"开始执行==
2025-03-28 21:33:39,562 DEBUG [testlog] [test_common_method.py (test_common_input:29] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"执行通过==
2025-03-28 21:33:39,563 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "开始执行===
2025-03-28 21:33:39,563 DEBUG [testlog] [test_common_method.py (test_common_input:29] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "执行通过===
2025-03-28 21:33:39,564 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"开始执行
2025-03-28 21:33:39,564 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"执行通过
2025-03-28 21:33:39,565 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"开始执行
2025-03-28 21:33:39,565 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"执行通过
2025-03-28 21:33:39,565 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "开始执行
2025-03-28 21:33:39,566 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "执行通过
2025-03-28 21:33:39,566 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "开始执行
2025-03-28 21:33:39,566 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "执行通过
2025-03-28 21:33:39,567 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数开始执行
2025-03-28 21:33:39,567 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数执行通过
2025-03-28 21:33:39,568 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数开始执行
2025-03-28 21:33:39,568 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数执行通过
2025-03-28 21:33:39,569 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号开始执行
2025-03-28 21:33:39,569 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号执行通过
2025-03-28 21:33:39,570 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "开始执行=====
2025-03-28 21:33:39,570 DEBUG [testlog] [test_common_method.py (test_common_input:29] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "执行通过=====
2025-03-28 21:33:39,570 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "开始执行==
2025-03-28 21:33:39,570 DEBUG [testlog] [test_common_method.py (test_common_input:29] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "执行通过==
2025-03-28 21:33:39,571 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "开始执行==
2025-03-28 21:33:39,571 DEBUG [testlog] [test_common_method.py (test_common_input:29] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "执行通过==
2025-03-28 21:33:39,572 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"开始执行==
2025-03-28 21:33:39,572 DEBUG [testlog] [test_common_method.py (test_common_input:29] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"执行通过==
2025-03-28 21:33:39,572 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"开始执行==
2025-03-28 21:33:39,572 DEBUG [testlog] [test_common_method.py (test_common_input:29] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"执行通过==
2025-03-28 21:33:39,573 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 21:33:39,573 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 21:33:39,574 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "开始执行
2025-03-28 21:33:39,574 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "执行通过
2025-03-28 21:33:39,575 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期开始执行
2025-03-28 21:33:39,575 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期执行通过
2025-03-28 21:33:39,575 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期开始执行
2025-03-28 21:33:39,576 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期执行通过
2025-03-28 21:33:39,576 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"开始执行
2025-03-28 21:33:39,577 ERROR [testlog] [test_common_method.py (test_common_input:27] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"执行失败, 错误信息：assert '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n' == '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹1配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n'
  
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
  - 格式错误：输入的内容数据类型不匹1配, 期望为 int 类型
  ?                 -
  + 格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 25, in test_common_input
    assert act == exp
AssertionError: assert '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n' == '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹1配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n'
  
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
  - 格式错误：输入的内容数据类型不匹1配, 期望为 int 类型
  ?                 -
  + 格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
2025-03-28 21:33:39,614 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"开始执行
2025-03-28 21:33:39,614 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"执行通过
2025-03-28 21:33:39,614 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"开始执行======
2025-03-28 21:33:39,614 DEBUG [testlog] [test_common_method.py (test_common_input:29] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"执行通过======
2025-03-28 21:33:39,615 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "开始执行===
2025-03-28 21:33:39,615 DEBUG [testlog] [test_common_method.py (test_common_input:29] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "执行通过===
2025-03-28 21:33:39,615 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 21:33:39,616 DEBUG [testlog] [test_common_method.py (test_common_input:29] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 21:33:39,616 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:33:39,616 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:33:39,617 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"开始执行
2025-03-28 21:33:39,617 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"执行通过
2025-03-28 21:33:39,618 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"开始执行
2025-03-28 21:33:39,618 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"执行通过
2025-03-28 21:33:39,618 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"开始执行====
2025-03-28 21:33:39,618 DEBUG [testlog] [test_common_method.py (test_common_input:29] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"执行通过====
2025-03-28 21:33:39,619 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "开始执行
2025-03-28 21:33:39,619 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "执行通过
2025-03-28 21:33:39,619 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容开始执行=
2025-03-28 21:33:39,619 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容执行通过=
2025-03-28 21:33:39,620 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:33:39,620 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:33:39,621 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"开始执行
2025-03-28 21:33:39,621 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"执行通过
2025-03-28 21:33:39,621 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"开始执行======
2025-03-28 21:33:39,622 DEBUG [testlog] [test_common_method.py (test_common_input:29] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"执行通过======
2025-03-28 21:33:39,622 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 21:33:39,622 DEBUG [testlog] [test_common_method.py (test_common_input:29] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 21:33:39,623 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:33:39,623 DEBUG [testlog] [test_common_method.py (test_common_input:29] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:33:39,623 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 21:33:51,605 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 21:33:51,916 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"开始执行=====
2025-03-28 21:33:51,916 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"执行通过=====
2025-03-28 21:33:51,917 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "开始执行====
2025-03-28 21:33:51,917 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "执行通过====
2025-03-28 21:33:51,918 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"开始执行
2025-03-28 21:33:51,918 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"执行通过
2025-03-28 21:33:51,918 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"开始执行
2025-03-28 21:33:51,918 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"执行通过
2025-03-28 21:33:51,919 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "开始执行
2025-03-28 21:33:51,919 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "执行通过
2025-03-28 21:33:51,920 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 21:33:51,920 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 21:33:51,920 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号开始执行
2025-03-28 21:33:51,920 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号执行通过
2025-03-28 21:33:51,921 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号开始执行
2025-03-28 21:33:51,921 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号执行通过
2025-03-28 21:33:51,922 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"开始执行==
2025-03-28 21:33:51,922 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"执行通过==
2025-03-28 21:33:51,922 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "开始执行===
2025-03-28 21:33:51,922 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "执行通过===
2025-03-28 21:33:51,923 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"开始执行
2025-03-28 21:33:51,923 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"执行通过
2025-03-28 21:33:51,923 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"开始执行
2025-03-28 21:33:51,924 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"执行通过
2025-03-28 21:33:51,924 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "开始执行
2025-03-28 21:33:51,924 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "执行通过
2025-03-28 21:33:51,925 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "开始执行
2025-03-28 21:33:51,925 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "执行通过
2025-03-28 21:33:51,926 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数开始执行
2025-03-28 21:33:51,926 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数执行通过
2025-03-28 21:33:51,926 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数开始执行
2025-03-28 21:33:51,926 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数执行通过
2025-03-28 21:33:51,927 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号开始执行
2025-03-28 21:33:51,927 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号执行通过
2025-03-28 21:33:51,928 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "开始执行=====
2025-03-28 21:33:51,928 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "执行通过=====
2025-03-28 21:33:51,928 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "开始执行==
2025-03-28 21:33:51,928 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "执行通过==
2025-03-28 21:33:51,929 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "开始执行==
2025-03-28 21:33:51,929 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "执行通过==
2025-03-28 21:33:51,930 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"开始执行==
2025-03-28 21:33:51,930 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"执行通过==
2025-03-28 21:33:51,930 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"开始执行==
2025-03-28 21:33:51,930 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"执行通过==
2025-03-28 21:33:51,931 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 21:33:51,931 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 21:33:51,932 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "开始执行
2025-03-28 21:33:51,932 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "执行通过
2025-03-28 21:33:51,932 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期开始执行
2025-03-28 21:33:51,932 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期执行通过
2025-03-28 21:33:51,933 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期开始执行
2025-03-28 21:33:51,933 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期执行通过
2025-03-28 21:33:51,933 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"开始执行
2025-03-28 21:33:51,934 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"执行失败, 错误信息：assert '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n' == '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹1配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n'
  
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
  - 格式错误：输入的内容数据类型不匹1配, 期望为 int 类型
  ?                 -
  + 格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n' == '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹1配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n'
  
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
  - 格式错误：输入的内容数据类型不匹1配, 期望为 int 类型
  ?                 -
  + 格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
2025-03-28 21:33:51,970 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"开始执行
2025-03-28 21:33:51,970 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"执行通过
2025-03-28 21:33:51,970 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"开始执行======
2025-03-28 21:33:51,970 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"执行通过======
2025-03-28 21:33:51,971 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "开始执行===
2025-03-28 21:33:51,971 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "执行通过===
2025-03-28 21:33:51,971 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 21:33:51,971 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 21:33:51,972 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:33:51,972 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:33:51,972 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"开始执行
2025-03-28 21:33:51,972 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"执行通过
2025-03-28 21:33:51,973 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"开始执行
2025-03-28 21:33:51,973 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"执行通过
2025-03-28 21:33:51,973 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"开始执行====
2025-03-28 21:33:51,973 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"执行通过====
2025-03-28 21:33:51,974 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "开始执行
2025-03-28 21:33:51,974 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "执行通过
2025-03-28 21:33:51,975 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容开始执行=
2025-03-28 21:33:51,975 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容执行通过=
2025-03-28 21:33:51,975 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:33:51,975 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:33:51,976 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"开始执行
2025-03-28 21:33:51,976 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"执行通过
2025-03-28 21:33:51,976 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"开始执行======
2025-03-28 21:33:51,976 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"执行通过======
2025-03-28 21:33:51,977 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 21:33:51,977 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 21:33:51,977 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:33:51,977 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:33:51,978 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 21:34:34,348 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG密度计算BUG数评分测试开始==========
2025-03-28 21:34:34,656 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例BUG密度为0，期望20分开始执行===============
2025-03-28 21:34:34,656 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:26] - 测试用例BUG密度为0，期望20分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 21, in test_calculate_bug_count_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,692 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为0.1，期望20分开始执行==============
2025-03-28 21:34:34,692 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:26] - 测试用例BUG密度为0.1，期望20分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 21, in test_calculate_bug_count_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,695 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为0.9，期望20分开始执行==============
2025-03-28 21:34:34,695 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:26] - 测试用例BUG密度为0.9，期望20分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 21, in test_calculate_bug_count_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,698 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例BUG密度为1，期望20分开始执行===============
2025-03-28 21:34:34,698 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:26] - 测试用例BUG密度为1，期望20分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 21, in test_calculate_bug_count_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,701 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为1.1，期望15分开始执行==============
2025-03-28 21:34:34,701 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:26] - 测试用例BUG密度为1.1，期望15分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 21, in test_calculate_bug_count_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,703 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为1.2，期望15分开始执行==============
2025-03-28 21:34:34,703 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:26] - 测试用例BUG密度为1.2，期望15分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 21, in test_calculate_bug_count_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,706 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为1.4，期望15分开始执行==============
2025-03-28 21:34:34,706 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:26] - 测试用例BUG密度为1.4，期望15分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 21, in test_calculate_bug_count_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,709 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为1.5，期望15分开始执行==============
2025-03-28 21:34:34,709 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:26] - 测试用例BUG密度为1.5，期望15分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 21, in test_calculate_bug_count_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,712 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为1.6，期望10分开始执行==============
2025-03-28 21:34:34,712 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:26] - 测试用例BUG密度为1.6，期望10分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 21, in test_calculate_bug_count_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,715 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为1.7，期望10分开始执行==============
2025-03-28 21:34:34,715 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:26] - 测试用例BUG密度为1.7，期望10分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 21, in test_calculate_bug_count_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,718 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为1.9，期望10分开始执行==============
2025-03-28 21:34:34,718 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:26] - 测试用例BUG密度为1.9，期望10分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 21, in test_calculate_bug_count_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,720 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例BUG密度为2，期望10分开始执行===============
2025-03-28 21:34:34,720 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:26] - 测试用例BUG密度为2，期望10分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 21, in test_calculate_bug_count_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,723 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例BUG密度为2.1，期望5分开始执行==============
2025-03-28 21:34:34,723 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:26] - 测试用例BUG密度为2.1，期望5分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 21, in test_calculate_bug_count_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,725 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例BUG密度为2.2，期望5分开始执行==============
2025-03-28 21:34:34,725 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:26] - 测试用例BUG密度为2.2，期望5分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 21, in test_calculate_bug_count_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,728 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例BUG密度为2.9，期望5分开始执行==============
2025-03-28 21:34:34,728 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:26] - 测试用例BUG密度为2.9，期望5分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 21, in test_calculate_bug_count_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,730 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ===============测试用例BUG密度为3，期望5分开始执行===============
2025-03-28 21:34:34,730 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:26] - 测试用例BUG密度为3，期望5分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 21, in test_calculate_bug_count_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,733 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例BUG密度为3.1，期望1分开始执行==============
2025-03-28 21:34:34,733 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:26] - 测试用例BUG密度为3.1，期望1分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 21, in test_calculate_bug_count_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,736 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例BUG密度为999，期望1分开始执行==============
2025-03-28 21:34:34,736 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:26] - 测试用例BUG密度为999，期望1分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 21, in test_calculate_bug_count_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,738 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ===============测试用例BUG密度为很多小数点开始执行================
2025-03-28 21:34:34,738 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:26] - 测试用例BUG密度为很多小数点执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 21, in test_calculate_bug_count_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,741 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==========测试用例BUG密度为-1，输入值不在任何评分区间内开始执行===========
2025-03-28 21:34:34,741 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==========测试用例BUG密度为-1，输入值不在任何评分区间内执行通过===========
2025-03-28 21:34:34,741 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =========测试用例BUG密度为小写英文，输入参数X必须是数字类型开始执行==========
2025-03-28 21:34:34,741 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =========测试用例BUG密度为小写英文，输入参数X必须是数字类型执行通过==========
2025-03-28 21:34:34,742 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =========测试用例BUG密度为大写英文，输入参数X必须是数字类型开始执行==========
2025-03-28 21:34:34,742 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =========测试用例BUG密度为大写英文，输入参数X必须是数字类型执行通过==========
2025-03-28 21:34:34,743 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==========测试用例BUG密度为汉字，输入参数X必须是数字类型开始执行===========
2025-03-28 21:34:34,743 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==========测试用例BUG密度为汉字，输入参数X必须是数字类型执行通过===========
2025-03-28 21:34:34,743 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =========测试用例BUG密度为特殊符号，输入参数X必须是数字类型开始执行==========
2025-03-28 21:34:34,743 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =========测试用例BUG密度为特殊符号，输入参数X必须是数字类型执行通过==========
2025-03-28 21:34:34,744 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ===========测试用例BUG密度为空字符串，输入参数X不能为空开始执行===========
2025-03-28 21:34:34,744 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ===========测试用例BUG密度为空字符串，输入参数X不能为空执行通过===========
2025-03-28 21:34:34,745 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =========测试用例BUG密度为字符串空格，输入参数X必须是数字类型开始执行=========
2025-03-28 21:34:34,745 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =========测试用例BUG密度为字符串空格，输入参数X必须是数字类型执行通过=========
2025-03-28 21:34:34,745 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ===========测试用例BUG密度为null，输入参数X不能为空开始执行===========
2025-03-28 21:34:34,745 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ===========测试用例BUG密度为null，输入参数X不能为空执行通过===========
2025-03-28 21:34:34,746 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例不传值，输入参数X不能为空开始执行===============
2025-03-28 21:34:34,746 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==============测试用例不传值，输入参数X不能为空执行通过===============
2025-03-28 21:34:34,746 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG密度计算BUG数评分测试结束==========
2025-03-28 21:34:34,747 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG重启和未修复数量计算评分测试开始==========
2025-03-28 21:34:34,747 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ==============测试用例BUG重启数0，期望20分开始执行===============
2025-03-28 21:34:34,747 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:54] - 测试用例BUG重启数0，期望20分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 49, in test_calculate_bug_reopen_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,750 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ==============测试用例BUG重启数1，期望15分开始执行===============
2025-03-28 21:34:34,750 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:54] - 测试用例BUG重启数1，期望15分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 49, in test_calculate_bug_reopen_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,753 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ==============测试用例BUG重启数2，期望10分开始执行===============
2025-03-28 21:34:34,753 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:54] - 测试用例BUG重启数2，期望10分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 49, in test_calculate_bug_reopen_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,755 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ===============测试用例BUG重启数3，期望5分开始执行===============
2025-03-28 21:34:34,755 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:54] - 测试用例BUG重启数3，期望5分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 49, in test_calculate_bug_reopen_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,757 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ===============测试用例BUG重启数4，期望1分开始执行===============
2025-03-28 21:34:34,757 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:54] - 测试用例BUG重启数4，期望1分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 49, in test_calculate_bug_reopen_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,760 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ===============测试用例BUG重启数5，期望1分开始执行===============
2025-03-28 21:34:34,760 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:54] - 测试用例BUG重启数5，期望1分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 49, in test_calculate_bug_reopen_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,762 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - =============测试用例BUG重启数9999，期望1分开始执行==============
2025-03-28 21:34:34,762 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:54] - 测试用例BUG重启数9999，期望1分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 49, in test_calculate_bug_reopen_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,765 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ==============测试用例BUG重启数很长，期望1分开始执行===============
2025-03-28 21:34:34,765 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:54] - 测试用例BUG重启数很长，期望1分执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 49, in test_calculate_bug_reopen_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,767 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - =================测试用例BUG重启数-1开始执行=================
2025-03-28 21:34:34,767 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - =================测试用例BUG重启数-1执行通过=================
2025-03-28 21:34:34,768 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ================测试用例BUG重启数为浮点数开始执行================
2025-03-28 21:34:34,768 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ================测试用例BUG重启数为浮点数执行通过================
2025-03-28 21:34:34,768 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ===============测试用例BUG重启数为小写英文开始执行================
2025-03-28 21:34:34,768 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ===============测试用例BUG重启数为小写英文执行通过================
2025-03-28 21:34:34,769 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ===============测试用例BUG重启数为大写英文开始执行================
2025-03-28 21:34:34,769 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ===============测试用例BUG重启数为大写英文执行通过================
2025-03-28 21:34:34,798 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ================测试用例BUG重启数为汉字开始执行=================
2025-03-28 21:34:34,798 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ================测试用例BUG重启数为汉字执行通过=================
2025-03-28 21:34:34,799 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ===============测试用例BUG重启数为特殊符号开始执行================
2025-03-28 21:34:34,799 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ===============测试用例BUG重启数为特殊符号执行通过================
2025-03-28 21:34:34,800 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ================测试用例BUG重启数为空格开始执行=================
2025-03-28 21:34:34,800 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ================测试用例BUG重启数为空格执行通过=================
2025-03-28 21:34:34,800 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ===============测试用例BUG重启数为空字符串开始执行================
2025-03-28 21:34:34,800 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ===============测试用例BUG重启数为空字符串执行通过================
2025-03-28 21:34:34,801 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ===============测试用例BUG重启数为null开始执行================
2025-03-28 21:34:34,801 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ===============测试用例BUG重启数为null执行通过================
2025-03-28 21:34:34,802 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - =================测试用例不传BUG重启数开始执行=================
2025-03-28 21:34:34,802 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - =================测试用例不传BUG重启数执行通过=================
2025-03-28 21:34:34,802 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG重启和未修复数量计算评分测试结束==========
2025-03-28 21:34:34,802 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG修复情况评分计算测试开始==========
2025-03-28 21:34:34,802 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ===测试用例入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG开始执行====
2025-03-28 21:34:34,802 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,805 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =测试用例入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行==
2025-03-28 21:34:34,805 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,808 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ====测试用例入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行=====
2025-03-28 21:34:34,808 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,810 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ====测试用例入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行====
2025-03-28 21:34:34,810 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,813 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =====测试用例不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行======
2025-03-28 21:34:34,813 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,815 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ==测试用例入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行===
2025-03-28 21:34:34,815 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,818 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG开始执行
2025-03-28 21:34:34,818 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,820 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG开始执行
2025-03-28 21:34:34,820 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,824 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG开始执行
2025-03-28 21:34:34,824 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,826 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG开始执行
2025-03-28 21:34:34,826 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,829 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG开始执行
2025-03-28 21:34:34,829 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,832 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG开始执行
2025-03-28 21:34:34,832 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,834 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG开始执行
2025-03-28 21:34:34,834 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,837 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG开始执行
2025-03-28 21:34:34,837 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,840 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG开始执行
2025-03-28 21:34:34,840 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,842 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG开始执行
2025-03-28 21:34:34,842 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,845 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG开始执行
2025-03-28 21:34:34,845 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,848 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG开始执行
2025-03-28 21:34:34,848 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,850 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG开始执行
2025-03-28 21:34:34,850 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,853 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG开始执行
2025-03-28 21:34:34,853 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,855 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG开始执行
2025-03-28 21:34:34,855 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,857 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG开始执行
2025-03-28 21:34:34,857 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,860 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG开始执行
2025-03-28 21:34:34,860 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,863 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG开始执行
2025-03-28 21:34:34,863 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,865 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG开始执行
2025-03-28 21:34:34,865 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,867 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG开始执行
2025-03-28 21:34:34,867 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,870 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG开始执行
2025-03-28 21:34:34,870 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,873 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG开始执行
2025-03-28 21:34:34,873 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,875 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG开始执行
2025-03-28 21:34:34,875 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:34:34,878 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为小写英文开始执行=================
2025-03-28 21:34:34,878 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为小写英文执行通过=================
2025-03-28 21:34:34,879 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为大写英文开始执行=================
2025-03-28 21:34:34,879 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为大写英文执行通过=================
2025-03-28 21:34:34,880 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ==================测试用例入参值为整数开始执行==================
2025-03-28 21:34:34,880 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ==================测试用例入参值为整数执行通过==================
2025-03-28 21:34:34,880 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为浮点数开始执行==================
2025-03-28 21:34:34,880 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为浮点数执行通过==================
2025-03-28 21:34:34,881 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ==================测试用例入参值为汉字开始执行==================
2025-03-28 21:34:34,881 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ==================测试用例入参值为汉字执行通过==================
2025-03-28 21:34:34,882 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为特殊符号开始执行=================
2025-03-28 21:34:34,882 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为特殊符号执行通过=================
2025-03-28 21:34:34,882 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为空字符串开始执行=================
2025-03-28 21:34:34,882 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为空字符串执行通过=================
2025-03-28 21:34:34,883 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ==================测试用例入参值为空格开始执行==================
2025-03-28 21:34:34,883 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ==================测试用例入参值为空格执行通过==================
2025-03-28 21:34:34,884 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为空列表开始执行==================
2025-03-28 21:34:34,884 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为空列表执行通过==================
2025-03-28 21:34:34,884 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG修复情况评分计算测试结束==========
2025-03-28 21:34:34,884 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 21:34:34,885 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"开始执行=====
2025-03-28 21:34:34,885 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"执行通过=====
2025-03-28 21:34:34,886 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "开始执行====
2025-03-28 21:34:34,886 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "执行通过====
2025-03-28 21:34:34,887 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"开始执行
2025-03-28 21:34:34,887 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"执行通过
2025-03-28 21:34:34,888 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"开始执行
2025-03-28 21:34:34,888 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"执行通过
2025-03-28 21:34:34,889 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "开始执行
2025-03-28 21:34:34,889 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "执行通过
2025-03-28 21:34:34,890 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 21:34:34,890 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 21:34:34,891 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号开始执行
2025-03-28 21:34:34,891 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号执行通过
2025-03-28 21:34:34,892 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号开始执行
2025-03-28 21:34:34,892 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号执行通过
2025-03-28 21:34:34,893 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"开始执行==
2025-03-28 21:34:34,893 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"执行通过==
2025-03-28 21:34:34,894 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "开始执行===
2025-03-28 21:34:34,894 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "执行通过===
2025-03-28 21:34:34,895 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"开始执行
2025-03-28 21:34:34,895 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"执行通过
2025-03-28 21:34:34,896 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"开始执行
2025-03-28 21:34:34,896 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"执行通过
2025-03-28 21:34:34,897 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "开始执行
2025-03-28 21:34:34,897 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "执行通过
2025-03-28 21:34:34,898 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "开始执行
2025-03-28 21:34:34,898 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "执行通过
2025-03-28 21:34:34,899 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数开始执行
2025-03-28 21:34:34,899 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数执行通过
2025-03-28 21:34:34,900 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数开始执行
2025-03-28 21:34:34,900 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数执行通过
2025-03-28 21:34:34,901 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号开始执行
2025-03-28 21:34:34,901 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号执行通过
2025-03-28 21:34:34,902 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "开始执行=====
2025-03-28 21:34:34,902 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "执行通过=====
2025-03-28 21:34:34,903 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "开始执行==
2025-03-28 21:34:34,903 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "执行通过==
2025-03-28 21:34:34,904 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "开始执行==
2025-03-28 21:34:34,904 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "执行通过==
2025-03-28 21:34:34,905 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"开始执行==
2025-03-28 21:34:34,905 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"执行通过==
2025-03-28 21:34:34,906 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"开始执行==
2025-03-28 21:34:34,906 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"执行通过==
2025-03-28 21:34:34,907 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 21:34:34,907 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 21:34:34,908 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "开始执行
2025-03-28 21:34:34,908 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "执行通过
2025-03-28 21:34:34,909 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期开始执行
2025-03-28 21:34:34,909 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期执行通过
2025-03-28 21:34:34,911 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期开始执行
2025-03-28 21:34:34,911 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期执行通过
2025-03-28 21:34:34,912 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"开始执行
2025-03-28 21:34:34,912 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"执行失败, 错误信息：assert '\x1b[0;91m\n...类型\n\x1b[0m\n' == '\x1b[0;91m\n...类型\n\x1b[0m\n'
  
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m...
  
  ...Full output truncated (11 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert '\x1b[0;91m\n...类型\n\x1b[0m\n' == '\x1b[0;91m\n...类型\n\x1b[0m\n'
  
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m...
  
  ...Full output truncated (11 lines hidden), use '-vv' to show
2025-03-28 21:34:34,914 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"开始执行
2025-03-28 21:34:34,914 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"执行通过
2025-03-28 21:34:34,915 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"开始执行======
2025-03-28 21:34:34,915 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"执行通过======
2025-03-28 21:34:34,916 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "开始执行===
2025-03-28 21:34:34,916 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "执行通过===
2025-03-28 21:34:34,917 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 21:34:34,917 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 21:34:34,918 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:34:34,919 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:34:34,920 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"开始执行
2025-03-28 21:34:34,920 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"执行通过
2025-03-28 21:34:34,921 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"开始执行
2025-03-28 21:34:34,921 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"执行通过
2025-03-28 21:34:34,922 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"开始执行====
2025-03-28 21:34:34,922 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"执行通过====
2025-03-28 21:34:34,924 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "开始执行
2025-03-28 21:34:34,924 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "执行通过
2025-03-28 21:34:34,925 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容开始执行=
2025-03-28 21:34:34,925 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容执行通过=
2025-03-28 21:34:34,926 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:34:34,926 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:34:34,927 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"开始执行
2025-03-28 21:34:34,927 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"执行通过
2025-03-28 21:34:34,929 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"开始执行======
2025-03-28 21:34:34,929 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"执行通过======
2025-03-28 21:34:34,930 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 21:34:34,930 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 21:34:34,931 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:34:34,931 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:34:34,931 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 21:35:00,181 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 21:35:00,513 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"开始执行=====
2025-03-28 21:35:00,513 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"执行通过=====
2025-03-28 21:35:00,515 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "开始执行====
2025-03-28 21:35:00,515 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "执行通过====
2025-03-28 21:35:00,516 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"开始执行
2025-03-28 21:35:00,516 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"执行通过
2025-03-28 21:35:00,518 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"开始执行
2025-03-28 21:35:00,518 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"执行通过
2025-03-28 21:35:00,519 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "开始执行
2025-03-28 21:35:00,519 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "执行通过
2025-03-28 21:35:00,520 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 21:35:00,520 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 21:35:00,521 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号开始执行
2025-03-28 21:35:00,521 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号执行通过
2025-03-28 21:35:00,523 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号开始执行
2025-03-28 21:35:00,523 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号执行通过
2025-03-28 21:35:00,524 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"开始执行==
2025-03-28 21:35:00,524 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"执行通过==
2025-03-28 21:35:00,525 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "开始执行===
2025-03-28 21:35:00,525 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "执行通过===
2025-03-28 21:35:00,526 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"开始执行
2025-03-28 21:35:00,526 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"执行通过
2025-03-28 21:35:00,527 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"开始执行
2025-03-28 21:35:00,527 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"执行通过
2025-03-28 21:35:00,528 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "开始执行
2025-03-28 21:35:00,529 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "执行通过
2025-03-28 21:35:00,530 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "开始执行
2025-03-28 21:35:00,530 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "执行通过
2025-03-28 21:35:00,531 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数开始执行
2025-03-28 21:35:00,531 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数执行通过
2025-03-28 21:35:00,532 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数开始执行
2025-03-28 21:35:00,532 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数执行通过
2025-03-28 21:35:00,533 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号开始执行
2025-03-28 21:35:00,533 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号执行通过
2025-03-28 21:35:00,534 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "开始执行=====
2025-03-28 21:35:00,534 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "执行通过=====
2025-03-28 21:35:00,535 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "开始执行==
2025-03-28 21:35:00,535 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "执行通过==
2025-03-28 21:35:00,536 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "开始执行==
2025-03-28 21:35:00,536 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "执行通过==
2025-03-28 21:35:00,537 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"开始执行==
2025-03-28 21:35:00,537 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"执行通过==
2025-03-28 21:35:00,539 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"开始执行==
2025-03-28 21:35:00,539 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"执行通过==
2025-03-28 21:35:00,540 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 21:35:00,540 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 21:35:00,541 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "开始执行
2025-03-28 21:35:00,541 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "执行通过
2025-03-28 21:35:00,542 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期开始执行
2025-03-28 21:35:00,542 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期执行通过
2025-03-28 21:35:00,543 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期开始执行
2025-03-28 21:35:00,543 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期执行通过
2025-03-28 21:35:00,544 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"开始执行
2025-03-28 21:35:00,544 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"执行失败, 错误信息：assert '\x1b[0;91m\n...类型\n\x1b[0m\n' == '\x1b[0;91m\n...类型\n\x1b[0m\n'
  
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m...
  
  ...Full output truncated (11 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert '\x1b[0;91m\n...类型\n\x1b[0m\n' == '\x1b[0;91m\n...类型\n\x1b[0m\n'
  
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m...
  
  ...Full output truncated (11 lines hidden), use '-vv' to show
2025-03-28 21:35:00,582 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"开始执行
2025-03-28 21:35:00,582 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"执行通过
2025-03-28 21:35:00,583 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"开始执行======
2025-03-28 21:35:00,583 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"执行通过======
2025-03-28 21:35:00,584 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "开始执行===
2025-03-28 21:35:00,584 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "执行通过===
2025-03-28 21:35:00,586 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 21:35:00,586 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 21:35:00,587 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:35:00,587 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:35:00,588 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"开始执行
2025-03-28 21:35:00,588 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"执行通过
2025-03-28 21:35:00,589 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"开始执行
2025-03-28 21:35:00,589 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"执行通过
2025-03-28 21:35:00,590 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"开始执行====
2025-03-28 21:35:00,590 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"执行通过====
2025-03-28 21:35:00,591 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "开始执行
2025-03-28 21:35:00,591 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "执行通过
2025-03-28 21:35:00,592 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容开始执行=
2025-03-28 21:35:00,592 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容执行通过=
2025-03-28 21:35:00,593 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:35:00,593 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:35:00,594 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"开始执行
2025-03-28 21:35:00,594 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"执行通过
2025-03-28 21:35:00,595 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"开始执行======
2025-03-28 21:35:00,595 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"执行通过======
2025-03-28 21:35:00,596 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 21:35:00,596 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 21:35:00,597 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:35:00,597 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:35:00,597 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 21:36:10,435 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 21:36:10,761 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"开始执行=====
2025-03-28 21:36:10,761 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"执行通过=====
2025-03-28 21:36:10,762 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "开始执行====
2025-03-28 21:36:10,762 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "执行通过====
2025-03-28 21:36:10,763 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"开始执行
2025-03-28 21:36:10,764 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"执行通过
2025-03-28 21:36:10,765 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"开始执行
2025-03-28 21:36:10,765 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"执行通过
2025-03-28 21:36:10,766 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "开始执行
2025-03-28 21:36:10,766 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "执行通过
2025-03-28 21:36:10,767 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 21:36:10,767 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 21:36:10,768 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号开始执行
2025-03-28 21:36:10,768 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号执行通过
2025-03-28 21:36:10,769 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号开始执行
2025-03-28 21:36:10,769 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号执行通过
2025-03-28 21:36:10,770 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"开始执行==
2025-03-28 21:36:10,770 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"执行通过==
2025-03-28 21:36:10,771 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "开始执行===
2025-03-28 21:36:10,771 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "执行通过===
2025-03-28 21:36:10,772 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"开始执行
2025-03-28 21:36:10,772 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"执行通过
2025-03-28 21:36:10,773 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"开始执行
2025-03-28 21:36:10,773 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"执行通过
2025-03-28 21:36:10,774 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "开始执行
2025-03-28 21:36:10,774 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "执行通过
2025-03-28 21:36:10,775 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "开始执行
2025-03-28 21:36:10,775 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "执行通过
2025-03-28 21:36:10,776 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数开始执行
2025-03-28 21:36:10,776 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数执行通过
2025-03-28 21:36:10,777 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数开始执行
2025-03-28 21:36:10,777 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数执行通过
2025-03-28 21:36:10,778 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号开始执行
2025-03-28 21:36:10,778 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号执行通过
2025-03-28 21:36:10,779 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "开始执行=====
2025-03-28 21:36:10,779 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "执行通过=====
2025-03-28 21:36:10,780 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "开始执行==
2025-03-28 21:36:10,780 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "执行通过==
2025-03-28 21:36:10,781 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "开始执行==
2025-03-28 21:36:10,781 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "执行通过==
2025-03-28 21:36:10,782 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"开始执行==
2025-03-28 21:36:10,782 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"执行通过==
2025-03-28 21:36:10,783 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"开始执行==
2025-03-28 21:36:10,783 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"执行通过==
2025-03-28 21:36:10,784 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 21:36:10,784 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 21:36:10,785 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "开始执行
2025-03-28 21:36:10,785 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "执行通过
2025-03-28 21:36:10,786 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期开始执行
2025-03-28 21:36:10,786 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期执行通过
2025-03-28 21:36:10,787 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期开始执行
2025-03-28 21:36:10,787 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期执行通过
2025-03-28 21:36:10,788 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"开始执行
2025-03-28 21:36:10,788 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"执行失败, 错误信息：assert '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n' == '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹1配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n'
  
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
  - 格式错误：输入的内容数据类型不匹1配, 期望为 int 类型
  ?                 -
  + 格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n' == '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹1配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n'
  
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
  - 格式错误：输入的内容数据类型不匹1配, 期望为 int 类型
  ?                 -
  + 格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
2025-03-28 21:36:10,826 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"开始执行
2025-03-28 21:36:10,826 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"执行通过
2025-03-28 21:36:10,827 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"开始执行======
2025-03-28 21:36:10,827 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"执行通过======
2025-03-28 21:36:10,828 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "开始执行===
2025-03-28 21:36:10,828 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "执行通过===
2025-03-28 21:36:10,829 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 21:36:10,829 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 21:36:10,830 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:36:10,830 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:36:10,831 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"开始执行
2025-03-28 21:36:10,831 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"执行通过
2025-03-28 21:36:10,832 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"开始执行
2025-03-28 21:36:10,832 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"执行通过
2025-03-28 21:36:10,833 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"开始执行====
2025-03-28 21:36:10,833 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"执行通过====
2025-03-28 21:36:10,834 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "开始执行
2025-03-28 21:36:10,834 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "执行通过
2025-03-28 21:36:10,835 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容开始执行=
2025-03-28 21:36:10,835 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容执行通过=
2025-03-28 21:36:10,836 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:36:10,836 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:36:10,837 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"开始执行
2025-03-28 21:36:10,837 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"执行通过
2025-03-28 21:36:10,838 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"开始执行======
2025-03-28 21:36:10,838 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"执行通过======
2025-03-28 21:36:10,839 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 21:36:10,839 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 21:36:10,840 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:36:10,840 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:36:10,841 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 21:38:54,511 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG修复情况评分计算测试开始==========
2025-03-28 21:38:54,820 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ===测试用例入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG开始执行====
2025-03-28 21:38:54,820 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,860 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =测试用例入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行==
2025-03-28 21:38:54,860 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,863 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ====测试用例入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行=====
2025-03-28 21:38:54,863 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,866 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ====测试用例入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行====
2025-03-28 21:38:54,866 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,869 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =====测试用例不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行======
2025-03-28 21:38:54,869 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,871 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ==测试用例入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行===
2025-03-28 21:38:54,871 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,874 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG开始执行
2025-03-28 21:38:54,875 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,878 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG开始执行
2025-03-28 21:38:54,878 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,881 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG开始执行
2025-03-28 21:38:54,881 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,883 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG开始执行
2025-03-28 21:38:54,883 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,886 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG开始执行
2025-03-28 21:38:54,886 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,889 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG开始执行
2025-03-28 21:38:54,889 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,892 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG开始执行
2025-03-28 21:38:54,892 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,895 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG开始执行
2025-03-28 21:38:54,895 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,897 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG开始执行
2025-03-28 21:38:54,897 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,900 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG开始执行
2025-03-28 21:38:54,900 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,903 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG开始执行
2025-03-28 21:38:54,903 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,905 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG开始执行
2025-03-28 21:38:54,905 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,908 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG开始执行
2025-03-28 21:38:54,908 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,910 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG开始执行
2025-03-28 21:38:54,910 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,913 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG开始执行
2025-03-28 21:38:54,913 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,915 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG开始执行
2025-03-28 21:38:54,915 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,918 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG开始执行
2025-03-28 21:38:54,918 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,921 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG开始执行
2025-03-28 21:38:54,921 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,924 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG开始执行
2025-03-28 21:38:54,924 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,926 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG开始执行
2025-03-28 21:38:54,926 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,929 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG开始执行
2025-03-28 21:38:54,929 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,931 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG开始执行
2025-03-28 21:38:54,931 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,934 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG开始执行
2025-03-28 21:38:54,934 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print_result = capsys.readouterr().out
                   ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:38:54,936 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为小写英文开始执行=================
2025-03-28 21:38:54,936 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为小写英文执行通过=================
2025-03-28 21:38:54,937 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为大写英文开始执行=================
2025-03-28 21:38:54,937 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为大写英文执行通过=================
2025-03-28 21:38:54,937 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ==================测试用例入参值为整数开始执行==================
2025-03-28 21:38:54,937 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ==================测试用例入参值为整数执行通过==================
2025-03-28 21:38:54,938 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为浮点数开始执行==================
2025-03-28 21:38:54,938 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为浮点数执行通过==================
2025-03-28 21:38:54,938 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ==================测试用例入参值为汉字开始执行==================
2025-03-28 21:38:54,938 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ==================测试用例入参值为汉字执行通过==================
2025-03-28 21:38:54,939 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为特殊符号开始执行=================
2025-03-28 21:38:54,939 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为特殊符号执行通过=================
2025-03-28 21:38:54,940 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为空字符串开始执行=================
2025-03-28 21:38:54,940 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为空字符串执行通过=================
2025-03-28 21:38:54,940 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ==================测试用例入参值为空格开始执行==================
2025-03-28 21:38:54,940 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ==================测试用例入参值为空格执行通过==================
2025-03-28 21:38:54,941 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为空列表开始执行==================
2025-03-28 21:38:54,941 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为空列表执行通过==================
2025-03-28 21:38:54,941 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG修复情况评分计算测试结束==========
2025-03-28 21:40:32,145 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG修复情况评分计算测试开始==========
2025-03-28 21:40:32,464 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ===测试用例入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG开始执行====
2025-03-28 21:40:32,464 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,504 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =测试用例入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行==
2025-03-28 21:40:32,504 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,508 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ====测试用例入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行=====
2025-03-28 21:40:32,508 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,510 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ====测试用例入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行====
2025-03-28 21:40:32,510 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,513 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =====测试用例不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行======
2025-03-28 21:40:32,514 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,516 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ==测试用例入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行===
2025-03-28 21:40:32,516 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,519 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG开始执行
2025-03-28 21:40:32,520 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,524 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG开始执行
2025-03-28 21:40:32,524 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,527 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG开始执行
2025-03-28 21:40:32,527 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,530 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG开始执行
2025-03-28 21:40:32,530 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,534 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG开始执行
2025-03-28 21:40:32,534 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,537 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG开始执行
2025-03-28 21:40:32,537 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,541 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG开始执行
2025-03-28 21:40:32,541 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,544 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG开始执行
2025-03-28 21:40:32,544 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,546 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG开始执行
2025-03-28 21:40:32,546 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,549 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG开始执行
2025-03-28 21:40:32,549 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,552 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG开始执行
2025-03-28 21:40:32,552 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,555 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG开始执行
2025-03-28 21:40:32,555 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,558 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG开始执行
2025-03-28 21:40:32,558 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,561 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG开始执行
2025-03-28 21:40:32,561 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,563 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG开始执行
2025-03-28 21:40:32,563 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,566 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG开始执行
2025-03-28 21:40:32,566 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,568 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG开始执行
2025-03-28 21:40:32,568 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,571 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG开始执行
2025-03-28 21:40:32,571 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,573 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG开始执行
2025-03-28 21:40:32,573 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,576 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG开始执行
2025-03-28 21:40:32,576 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,578 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG开始执行
2025-03-28 21:40:32,578 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,580 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG开始执行
2025-03-28 21:40:32,580 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,583 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG开始执行
2025-03-28 21:40:32,583 ERROR [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:81] - 测试用例入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG执行失败, 错误信息：'NoneType' object has no attribute 'readouterr'
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_calculate_rating.py", line 76, in test_calculate_bug_repair_rating
    result = self.base_exist_return_common_test(case, t)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/base_case.py", line 43, in base_exist_return_common_test
    print(capsys.readouterr())
          ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'readouterr'
2025-03-28 21:40:32,585 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为小写英文开始执行=================
2025-03-28 21:40:32,585 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为小写英文执行通过=================
2025-03-28 21:40:32,586 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为大写英文开始执行=================
2025-03-28 21:40:32,586 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为大写英文执行通过=================
2025-03-28 21:40:32,586 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ==================测试用例入参值为整数开始执行==================
2025-03-28 21:40:32,586 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ==================测试用例入参值为整数执行通过==================
2025-03-28 21:40:32,587 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为浮点数开始执行==================
2025-03-28 21:40:32,587 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为浮点数执行通过==================
2025-03-28 21:40:32,587 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ==================测试用例入参值为汉字开始执行==================
2025-03-28 21:40:32,587 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ==================测试用例入参值为汉字执行通过==================
2025-03-28 21:40:32,588 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为特殊符号开始执行=================
2025-03-28 21:40:32,588 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为特殊符号执行通过=================
2025-03-28 21:40:32,588 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为空字符串开始执行=================
2025-03-28 21:40:32,588 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为空字符串执行通过=================
2025-03-28 21:40:32,589 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ==================测试用例入参值为空格开始执行==================
2025-03-28 21:40:32,589 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ==================测试用例入参值为空格执行通过==================
2025-03-28 21:40:32,590 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为空列表开始执行==================
2025-03-28 21:40:32,590 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为空列表执行通过==================
2025-03-28 21:40:32,590 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG修复情况评分计算测试结束==========
2025-03-28 21:41:55,268 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG修复情况评分计算测试开始==========
2025-03-28 21:41:55,568 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ===测试用例入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG开始执行====
2025-03-28 21:41:55,568 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ===测试用例入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG执行通过====
2025-03-28 21:41:55,569 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =测试用例入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行==
2025-03-28 21:41:55,569 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =测试用例入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG执行通过==
2025-03-28 21:41:55,570 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ====测试用例入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行=====
2025-03-28 21:41:55,570 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ====测试用例入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG执行通过=====
2025-03-28 21:41:55,570 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ====测试用例入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行====
2025-03-28 21:41:55,570 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ====测试用例入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG执行通过====
2025-03-28 21:41:55,571 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =====测试用例不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行======
2025-03-28 21:41:55,571 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =====测试用例不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG执行通过======
2025-03-28 21:41:55,571 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ==测试用例入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行===
2025-03-28 21:41:55,571 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ==测试用例入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG执行通过===
2025-03-28 21:41:55,572 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG开始执行
2025-03-28 21:41:55,572 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG执行通过
2025-03-28 21:41:55,572 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG开始执行
2025-03-28 21:41:55,572 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG执行通过
2025-03-28 21:41:55,573 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG开始执行
2025-03-28 21:41:55,573 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG执行通过
2025-03-28 21:41:55,573 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG开始执行
2025-03-28 21:41:55,573 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG执行通过
2025-03-28 21:41:55,574 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG开始执行
2025-03-28 21:41:55,574 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG执行通过
2025-03-28 21:41:55,574 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG开始执行
2025-03-28 21:41:55,574 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG执行通过
2025-03-28 21:41:55,575 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG开始执行
2025-03-28 21:41:55,575 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG执行通过
2025-03-28 21:41:55,575 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG开始执行
2025-03-28 21:41:55,575 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG执行通过
2025-03-28 21:41:55,576 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG开始执行
2025-03-28 21:41:55,576 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG执行通过
2025-03-28 21:41:55,576 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG开始执行
2025-03-28 21:41:55,576 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG执行通过
2025-03-28 21:41:55,577 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG开始执行
2025-03-28 21:41:55,577 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG执行通过
2025-03-28 21:41:55,577 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG开始执行
2025-03-28 21:41:55,577 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG执行通过
2025-03-28 21:41:55,578 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG开始执行
2025-03-28 21:41:55,578 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG执行通过
2025-03-28 21:41:55,578 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG开始执行
2025-03-28 21:41:55,578 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG执行通过
2025-03-28 21:41:55,579 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG开始执行
2025-03-28 21:41:55,579 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG执行通过
2025-03-28 21:41:55,579 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG开始执行
2025-03-28 21:41:55,579 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG执行通过
2025-03-28 21:41:55,580 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG开始执行
2025-03-28 21:41:55,580 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG执行通过
2025-03-28 21:41:55,580 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG开始执行
2025-03-28 21:41:55,580 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG执行通过
2025-03-28 21:41:55,581 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG开始执行
2025-03-28 21:41:55,581 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG执行通过
2025-03-28 21:41:55,581 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG开始执行
2025-03-28 21:41:55,581 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG执行通过
2025-03-28 21:41:55,582 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG开始执行
2025-03-28 21:41:55,582 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG执行通过
2025-03-28 21:41:55,582 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG开始执行
2025-03-28 21:41:55,582 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG执行通过
2025-03-28 21:41:55,583 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG开始执行
2025-03-28 21:41:55,583 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG执行通过
2025-03-28 21:41:55,583 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为小写英文开始执行=================
2025-03-28 21:41:55,583 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为小写英文执行通过=================
2025-03-28 21:41:55,584 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为大写英文开始执行=================
2025-03-28 21:41:55,584 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为大写英文执行通过=================
2025-03-28 21:41:55,584 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ==================测试用例入参值为整数开始执行==================
2025-03-28 21:41:55,584 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ==================测试用例入参值为整数执行通过==================
2025-03-28 21:41:55,585 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为浮点数开始执行==================
2025-03-28 21:41:55,585 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为浮点数执行通过==================
2025-03-28 21:41:55,585 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ==================测试用例入参值为汉字开始执行==================
2025-03-28 21:41:55,585 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ==================测试用例入参值为汉字执行通过==================
2025-03-28 21:41:55,586 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为特殊符号开始执行=================
2025-03-28 21:41:55,586 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为特殊符号执行通过=================
2025-03-28 21:41:55,586 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为空字符串开始执行=================
2025-03-28 21:41:55,586 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为空字符串执行通过=================
2025-03-28 21:41:55,587 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ==================测试用例入参值为空格开始执行==================
2025-03-28 21:41:55,587 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ==================测试用例入参值为空格执行通过==================
2025-03-28 21:41:55,587 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为空列表开始执行==================
2025-03-28 21:41:55,587 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为空列表执行通过==================
2025-03-28 21:41:55,588 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG修复情况评分计算测试结束==========
2025-03-28 21:42:05,247 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG密度计算BUG数评分测试开始==========
2025-03-28 21:42:05,576 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例BUG密度为0，期望20分开始执行===============
2025-03-28 21:42:05,576 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==============测试用例BUG密度为0，期望20分执行通过===============
2025-03-28 21:42:05,577 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为0.1，期望20分开始执行==============
2025-03-28 21:42:05,577 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =============测试用例BUG密度为0.1，期望20分执行通过==============
2025-03-28 21:42:05,578 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为0.9，期望20分开始执行==============
2025-03-28 21:42:05,578 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =============测试用例BUG密度为0.9，期望20分执行通过==============
2025-03-28 21:42:05,579 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例BUG密度为1，期望20分开始执行===============
2025-03-28 21:42:05,579 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==============测试用例BUG密度为1，期望20分执行通过===============
2025-03-28 21:42:05,580 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为1.1，期望15分开始执行==============
2025-03-28 21:42:05,580 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =============测试用例BUG密度为1.1，期望15分执行通过==============
2025-03-28 21:42:05,581 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为1.2，期望15分开始执行==============
2025-03-28 21:42:05,581 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =============测试用例BUG密度为1.2，期望15分执行通过==============
2025-03-28 21:42:05,582 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为1.4，期望15分开始执行==============
2025-03-28 21:42:05,582 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =============测试用例BUG密度为1.4，期望15分执行通过==============
2025-03-28 21:42:05,583 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为1.5，期望15分开始执行==============
2025-03-28 21:42:05,583 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =============测试用例BUG密度为1.5，期望15分执行通过==============
2025-03-28 21:42:05,584 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为1.6，期望10分开始执行==============
2025-03-28 21:42:05,584 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =============测试用例BUG密度为1.6，期望10分执行通过==============
2025-03-28 21:42:05,584 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为1.7，期望10分开始执行==============
2025-03-28 21:42:05,584 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =============测试用例BUG密度为1.7，期望10分执行通过==============
2025-03-28 21:42:05,585 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为1.9，期望10分开始执行==============
2025-03-28 21:42:05,585 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =============测试用例BUG密度为1.9，期望10分执行通过==============
2025-03-28 21:42:05,586 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例BUG密度为2，期望10分开始执行===============
2025-03-28 21:42:05,586 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==============测试用例BUG密度为2，期望10分执行通过===============
2025-03-28 21:42:05,587 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例BUG密度为2.1，期望5分开始执行==============
2025-03-28 21:42:05,587 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==============测试用例BUG密度为2.1，期望5分执行通过==============
2025-03-28 21:42:05,587 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例BUG密度为2.2，期望5分开始执行==============
2025-03-28 21:42:05,587 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==============测试用例BUG密度为2.2，期望5分执行通过==============
2025-03-28 21:42:05,588 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例BUG密度为2.9，期望5分开始执行==============
2025-03-28 21:42:05,588 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==============测试用例BUG密度为2.9，期望5分执行通过==============
2025-03-28 21:42:05,589 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ===============测试用例BUG密度为3，期望5分开始执行===============
2025-03-28 21:42:05,589 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ===============测试用例BUG密度为3，期望5分执行通过===============
2025-03-28 21:42:05,590 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例BUG密度为3.1，期望1分开始执行==============
2025-03-28 21:42:05,590 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==============测试用例BUG密度为3.1，期望1分执行通过==============
2025-03-28 21:42:05,590 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例BUG密度为999，期望1分开始执行==============
2025-03-28 21:42:05,590 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==============测试用例BUG密度为999，期望1分执行通过==============
2025-03-28 21:42:05,591 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ===============测试用例BUG密度为很多小数点开始执行================
2025-03-28 21:42:05,591 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ===============测试用例BUG密度为很多小数点执行通过================
2025-03-28 21:42:05,592 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==========测试用例BUG密度为-1，输入值不在任何评分区间内开始执行===========
2025-03-28 21:42:05,592 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==========测试用例BUG密度为-1，输入值不在任何评分区间内执行通过===========
2025-03-28 21:42:05,593 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =========测试用例BUG密度为小写英文，输入参数X必须是数字类型开始执行==========
2025-03-28 21:42:05,593 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =========测试用例BUG密度为小写英文，输入参数X必须是数字类型执行通过==========
2025-03-28 21:42:05,593 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =========测试用例BUG密度为大写英文，输入参数X必须是数字类型开始执行==========
2025-03-28 21:42:05,593 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =========测试用例BUG密度为大写英文，输入参数X必须是数字类型执行通过==========
2025-03-28 21:42:05,594 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==========测试用例BUG密度为汉字，输入参数X必须是数字类型开始执行===========
2025-03-28 21:42:05,594 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==========测试用例BUG密度为汉字，输入参数X必须是数字类型执行通过===========
2025-03-28 21:42:05,595 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =========测试用例BUG密度为特殊符号，输入参数X必须是数字类型开始执行==========
2025-03-28 21:42:05,595 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =========测试用例BUG密度为特殊符号，输入参数X必须是数字类型执行通过==========
2025-03-28 21:42:05,595 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ===========测试用例BUG密度为空字符串，输入参数X不能为空开始执行===========
2025-03-28 21:42:05,595 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ===========测试用例BUG密度为空字符串，输入参数X不能为空执行通过===========
2025-03-28 21:42:05,596 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =========测试用例BUG密度为字符串空格，输入参数X必须是数字类型开始执行=========
2025-03-28 21:42:05,596 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =========测试用例BUG密度为字符串空格，输入参数X必须是数字类型执行通过=========
2025-03-28 21:42:05,597 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ===========测试用例BUG密度为null，输入参数X不能为空开始执行===========
2025-03-28 21:42:05,597 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ===========测试用例BUG密度为null，输入参数X不能为空执行通过===========
2025-03-28 21:42:05,597 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例不传值，输入参数X不能为空开始执行===============
2025-03-28 21:42:05,597 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==============测试用例不传值，输入参数X不能为空执行通过===============
2025-03-28 21:42:05,598 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG密度计算BUG数评分测试结束==========
2025-03-28 21:42:05,598 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG重启和未修复数量计算评分测试开始==========
2025-03-28 21:42:05,598 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ==============测试用例BUG重启数0，期望20分开始执行===============
2025-03-28 21:42:05,598 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ==============测试用例BUG重启数0，期望20分执行通过===============
2025-03-28 21:42:05,599 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ==============测试用例BUG重启数1，期望15分开始执行===============
2025-03-28 21:42:05,599 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ==============测试用例BUG重启数1，期望15分执行通过===============
2025-03-28 21:42:05,600 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ==============测试用例BUG重启数2，期望10分开始执行===============
2025-03-28 21:42:05,600 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ==============测试用例BUG重启数2，期望10分执行通过===============
2025-03-28 21:42:05,601 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ===============测试用例BUG重启数3，期望5分开始执行===============
2025-03-28 21:42:05,601 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ===============测试用例BUG重启数3，期望5分执行通过===============
2025-03-28 21:42:05,601 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ===============测试用例BUG重启数4，期望1分开始执行===============
2025-03-28 21:42:05,601 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ===============测试用例BUG重启数4，期望1分执行通过===============
2025-03-28 21:42:05,602 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ===============测试用例BUG重启数5，期望1分开始执行===============
2025-03-28 21:42:05,602 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ===============测试用例BUG重启数5，期望1分执行通过===============
2025-03-28 21:42:05,603 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - =============测试用例BUG重启数9999，期望1分开始执行==============
2025-03-28 21:42:05,603 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - =============测试用例BUG重启数9999，期望1分执行通过==============
2025-03-28 21:42:05,604 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ==============测试用例BUG重启数很长，期望1分开始执行===============
2025-03-28 21:42:05,604 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ==============测试用例BUG重启数很长，期望1分执行通过===============
2025-03-28 21:42:05,605 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - =================测试用例BUG重启数-1开始执行=================
2025-03-28 21:42:05,605 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - =================测试用例BUG重启数-1执行通过=================
2025-03-28 21:42:05,606 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ================测试用例BUG重启数为浮点数开始执行================
2025-03-28 21:42:05,606 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ================测试用例BUG重启数为浮点数执行通过================
2025-03-28 21:42:05,607 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ===============测试用例BUG重启数为小写英文开始执行================
2025-03-28 21:42:05,607 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ===============测试用例BUG重启数为小写英文执行通过================
2025-03-28 21:42:05,608 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ===============测试用例BUG重启数为大写英文开始执行================
2025-03-28 21:42:05,608 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ===============测试用例BUG重启数为大写英文执行通过================
2025-03-28 21:42:05,608 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ================测试用例BUG重启数为汉字开始执行=================
2025-03-28 21:42:05,608 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ================测试用例BUG重启数为汉字执行通过=================
2025-03-28 21:42:05,609 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ===============测试用例BUG重启数为特殊符号开始执行================
2025-03-28 21:42:05,609 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ===============测试用例BUG重启数为特殊符号执行通过================
2025-03-28 21:42:05,610 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ================测试用例BUG重启数为空格开始执行=================
2025-03-28 21:42:05,610 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ================测试用例BUG重启数为空格执行通过=================
2025-03-28 21:42:05,611 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ===============测试用例BUG重启数为空字符串开始执行================
2025-03-28 21:42:05,611 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ===============测试用例BUG重启数为空字符串执行通过================
2025-03-28 21:42:05,611 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ===============测试用例BUG重启数为null开始执行================
2025-03-28 21:42:05,612 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ===============测试用例BUG重启数为null执行通过================
2025-03-28 21:42:05,612 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - =================测试用例不传BUG重启数开始执行=================
2025-03-28 21:42:05,612 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - =================测试用例不传BUG重启数执行通过=================
2025-03-28 21:42:05,613 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG重启和未修复数量计算评分测试结束==========
2025-03-28 21:42:05,613 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG修复情况评分计算测试开始==========
2025-03-28 21:42:05,613 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ===测试用例入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG开始执行====
2025-03-28 21:42:05,613 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ===测试用例入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG执行通过====
2025-03-28 21:42:05,614 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =测试用例入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行==
2025-03-28 21:42:05,614 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =测试用例入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG执行通过==
2025-03-28 21:42:05,615 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ====测试用例入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行=====
2025-03-28 21:42:05,615 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ====测试用例入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG执行通过=====
2025-03-28 21:42:05,616 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ====测试用例入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行====
2025-03-28 21:42:05,616 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ====测试用例入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG执行通过====
2025-03-28 21:42:05,617 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =====测试用例不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行======
2025-03-28 21:42:05,617 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =====测试用例不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG执行通过======
2025-03-28 21:42:05,617 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ==测试用例入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行===
2025-03-28 21:42:05,617 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ==测试用例入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG执行通过===
2025-03-28 21:42:05,618 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG开始执行
2025-03-28 21:42:05,618 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG执行通过
2025-03-28 21:42:05,619 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG开始执行
2025-03-28 21:42:05,619 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG执行通过
2025-03-28 21:42:05,620 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG开始执行
2025-03-28 21:42:05,620 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG执行通过
2025-03-28 21:42:05,621 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG开始执行
2025-03-28 21:42:05,621 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG执行通过
2025-03-28 21:42:05,622 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG开始执行
2025-03-28 21:42:05,622 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG执行通过
2025-03-28 21:42:05,622 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG开始执行
2025-03-28 21:42:05,622 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG执行通过
2025-03-28 21:42:05,623 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG开始执行
2025-03-28 21:42:05,623 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG执行通过
2025-03-28 21:42:05,624 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG开始执行
2025-03-28 21:42:05,624 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG执行通过
2025-03-28 21:42:05,625 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG开始执行
2025-03-28 21:42:05,625 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG执行通过
2025-03-28 21:42:05,625 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG开始执行
2025-03-28 21:42:05,625 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG执行通过
2025-03-28 21:42:05,626 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG开始执行
2025-03-28 21:42:05,626 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG执行通过
2025-03-28 21:42:05,627 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG开始执行
2025-03-28 21:42:05,627 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG执行通过
2025-03-28 21:42:05,628 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG开始执行
2025-03-28 21:42:05,628 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG执行通过
2025-03-28 21:42:05,629 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG开始执行
2025-03-28 21:42:05,629 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG执行通过
2025-03-28 21:42:05,630 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG开始执行
2025-03-28 21:42:05,630 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG执行通过
2025-03-28 21:42:05,631 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG开始执行
2025-03-28 21:42:05,631 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG执行通过
2025-03-28 21:42:05,631 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG开始执行
2025-03-28 21:42:05,631 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG执行通过
2025-03-28 21:42:05,632 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG开始执行
2025-03-28 21:42:05,632 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG执行通过
2025-03-28 21:42:05,633 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG开始执行
2025-03-28 21:42:05,633 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG执行通过
2025-03-28 21:42:05,634 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG开始执行
2025-03-28 21:42:05,634 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG执行通过
2025-03-28 21:42:05,634 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG开始执行
2025-03-28 21:42:05,634 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG执行通过
2025-03-28 21:42:05,635 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG开始执行
2025-03-28 21:42:05,635 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG执行通过
2025-03-28 21:42:05,636 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG开始执行
2025-03-28 21:42:05,636 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG执行通过
2025-03-28 21:42:05,637 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为小写英文开始执行=================
2025-03-28 21:42:05,637 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为小写英文执行通过=================
2025-03-28 21:42:05,638 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为大写英文开始执行=================
2025-03-28 21:42:05,638 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为大写英文执行通过=================
2025-03-28 21:42:05,639 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ==================测试用例入参值为整数开始执行==================
2025-03-28 21:42:05,639 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ==================测试用例入参值为整数执行通过==================
2025-03-28 21:42:05,639 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为浮点数开始执行==================
2025-03-28 21:42:05,640 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为浮点数执行通过==================
2025-03-28 21:42:05,640 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ==================测试用例入参值为汉字开始执行==================
2025-03-28 21:42:05,640 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ==================测试用例入参值为汉字执行通过==================
2025-03-28 21:42:05,641 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为特殊符号开始执行=================
2025-03-28 21:42:05,641 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为特殊符号执行通过=================
2025-03-28 21:42:05,642 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为空字符串开始执行=================
2025-03-28 21:42:05,642 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为空字符串执行通过=================
2025-03-28 21:42:05,643 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ==================测试用例入参值为空格开始执行==================
2025-03-28 21:42:05,643 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ==================测试用例入参值为空格执行通过==================
2025-03-28 21:42:05,643 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为空列表开始执行==================
2025-03-28 21:42:05,643 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为空列表执行通过==================
2025-03-28 21:42:05,644 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG修复情况评分计算测试结束==========
2025-03-28 21:42:05,644 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 21:42:05,645 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"开始执行=====
2025-03-28 21:42:05,645 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"执行通过=====
2025-03-28 21:42:05,646 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "开始执行====
2025-03-28 21:42:05,646 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "执行通过====
2025-03-28 21:42:05,647 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"开始执行
2025-03-28 21:42:05,647 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"执行通过
2025-03-28 21:42:05,648 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"开始执行
2025-03-28 21:42:05,648 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"执行通过
2025-03-28 21:42:05,649 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "开始执行
2025-03-28 21:42:05,649 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "执行通过
2025-03-28 21:42:05,650 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 21:42:05,650 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 21:42:05,652 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号开始执行
2025-03-28 21:42:05,652 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号执行通过
2025-03-28 21:42:05,653 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号开始执行
2025-03-28 21:42:05,653 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号执行通过
2025-03-28 21:42:05,654 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"开始执行==
2025-03-28 21:42:05,655 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"执行通过==
2025-03-28 21:42:05,656 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "开始执行===
2025-03-28 21:42:05,656 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "执行通过===
2025-03-28 21:42:05,657 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"开始执行
2025-03-28 21:42:05,657 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"执行通过
2025-03-28 21:42:05,658 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"开始执行
2025-03-28 21:42:05,658 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"执行通过
2025-03-28 21:42:05,659 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "开始执行
2025-03-28 21:42:05,659 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "执行通过
2025-03-28 21:42:05,660 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "开始执行
2025-03-28 21:42:05,660 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "执行通过
2025-03-28 21:42:05,661 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数开始执行
2025-03-28 21:42:05,661 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数执行通过
2025-03-28 21:42:05,663 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数开始执行
2025-03-28 21:42:05,663 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数执行通过
2025-03-28 21:42:05,664 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号开始执行
2025-03-28 21:42:05,664 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号执行通过
2025-03-28 21:42:05,665 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "开始执行=====
2025-03-28 21:42:05,665 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "执行通过=====
2025-03-28 21:42:05,666 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "开始执行==
2025-03-28 21:42:05,666 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "执行通过==
2025-03-28 21:42:05,667 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "开始执行==
2025-03-28 21:42:05,667 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "执行通过==
2025-03-28 21:42:05,668 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"开始执行==
2025-03-28 21:42:05,668 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"执行通过==
2025-03-28 21:42:05,669 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"开始执行==
2025-03-28 21:42:05,669 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"执行通过==
2025-03-28 21:42:05,670 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 21:42:05,670 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 21:42:05,672 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "开始执行
2025-03-28 21:42:05,672 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "执行通过
2025-03-28 21:42:05,673 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期开始执行
2025-03-28 21:42:05,673 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期执行通过
2025-03-28 21:42:05,674 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期开始执行
2025-03-28 21:42:05,674 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期执行通过
2025-03-28 21:42:05,675 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"开始执行
2025-03-28 21:42:05,675 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"执行失败, 错误信息：assert '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n' == '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹1配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n'
  
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
  - 格式错误：输入的内容数据类型不匹1配, 期望为 int 类型
  ?                 -
  + 格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n' == '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹1配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n'
  
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
  - 格式错误：输入的内容数据类型不匹1配, 期望为 int 类型
  ?                 -
  + 格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
2025-03-28 21:42:05,713 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"开始执行
2025-03-28 21:42:05,713 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"执行通过
2025-03-28 21:42:05,714 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"开始执行======
2025-03-28 21:42:05,714 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"执行通过======
2025-03-28 21:42:05,715 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "开始执行===
2025-03-28 21:42:05,715 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "执行通过===
2025-03-28 21:42:05,716 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 21:42:05,716 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 21:42:05,717 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:42:05,717 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:42:05,718 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"开始执行
2025-03-28 21:42:05,718 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"执行通过
2025-03-28 21:42:05,719 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"开始执行
2025-03-28 21:42:05,719 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"执行通过
2025-03-28 21:42:05,720 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"开始执行====
2025-03-28 21:42:05,720 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"执行通过====
2025-03-28 21:42:05,721 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "开始执行
2025-03-28 21:42:05,721 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "执行通过
2025-03-28 21:42:05,722 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容开始执行=
2025-03-28 21:42:05,722 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容执行通过=
2025-03-28 21:42:05,723 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:42:05,723 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:42:05,724 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"开始执行
2025-03-28 21:42:05,724 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"执行通过
2025-03-28 21:42:05,725 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"开始执行======
2025-03-28 21:42:05,725 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"执行通过======
2025-03-28 21:42:05,726 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 21:42:05,726 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 21:42:05,727 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:42:05,727 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:42:05,728 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 21:43:00,663 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 21:43:00,975 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"开始执行=====
2025-03-28 21:43:00,975 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"执行通过=====
2025-03-28 21:43:00,976 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "开始执行====
2025-03-28 21:43:00,976 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "执行通过====
2025-03-28 21:43:00,977 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"开始执行
2025-03-28 21:43:00,977 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"执行通过
2025-03-28 21:43:00,978 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"开始执行
2025-03-28 21:43:00,978 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"执行通过
2025-03-28 21:43:00,978 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "开始执行
2025-03-28 21:43:00,978 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "执行通过
2025-03-28 21:43:00,979 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 21:43:00,979 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 21:43:00,980 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号开始执行
2025-03-28 21:43:00,980 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号执行通过
2025-03-28 21:43:00,980 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号开始执行
2025-03-28 21:43:00,980 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号执行通过
2025-03-28 21:43:00,981 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"开始执行==
2025-03-28 21:43:00,981 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"执行通过==
2025-03-28 21:43:00,982 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "开始执行===
2025-03-28 21:43:00,982 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "执行通过===
2025-03-28 21:43:00,982 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"开始执行
2025-03-28 21:43:00,982 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"执行通过
2025-03-28 21:43:00,983 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"开始执行
2025-03-28 21:43:00,983 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"执行通过
2025-03-28 21:43:00,983 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "开始执行
2025-03-28 21:43:00,983 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "执行通过
2025-03-28 21:43:00,984 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "开始执行
2025-03-28 21:43:00,984 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "执行通过
2025-03-28 21:43:00,985 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数开始执行
2025-03-28 21:43:00,985 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数执行通过
2025-03-28 21:43:00,985 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数开始执行
2025-03-28 21:43:00,985 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数执行通过
2025-03-28 21:43:00,986 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号开始执行
2025-03-28 21:43:00,986 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号执行通过
2025-03-28 21:43:00,986 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "开始执行=====
2025-03-28 21:43:00,986 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "执行通过=====
2025-03-28 21:43:00,987 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "开始执行==
2025-03-28 21:43:00,987 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "执行通过==
2025-03-28 21:43:00,987 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "开始执行==
2025-03-28 21:43:00,987 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "执行通过==
2025-03-28 21:43:00,988 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"开始执行==
2025-03-28 21:43:00,988 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"执行通过==
2025-03-28 21:43:00,989 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"开始执行==
2025-03-28 21:43:00,989 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"执行通过==
2025-03-28 21:43:00,990 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 21:43:00,990 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 21:43:00,990 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "开始执行
2025-03-28 21:43:00,990 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "执行通过
2025-03-28 21:43:00,991 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期开始执行
2025-03-28 21:43:00,991 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期执行通过
2025-03-28 21:43:00,991 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期开始执行
2025-03-28 21:43:00,991 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期执行通过
2025-03-28 21:43:00,992 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"开始执行
2025-03-28 21:43:00,992 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"执行失败, 错误信息：assert '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n' == '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹1配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n'
  
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
  - 格式错误：输入的内容数据类型不匹1配, 期望为 int 类型
  ?                 -
  + 格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n' == '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹1配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n'
  
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
  - 格式错误：输入的内容数据类型不匹1配, 期望为 int 类型
  ?                 -
  + 格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
2025-03-28 21:43:01,027 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"开始执行
2025-03-28 21:43:01,027 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"执行通过
2025-03-28 21:43:01,028 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"开始执行======
2025-03-28 21:43:01,028 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"执行通过======
2025-03-28 21:43:01,028 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "开始执行===
2025-03-28 21:43:01,028 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "执行通过===
2025-03-28 21:43:01,029 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 21:43:01,029 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 21:43:01,029 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:43:01,029 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:43:01,030 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"开始执行
2025-03-28 21:43:01,030 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"执行通过
2025-03-28 21:43:01,030 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"开始执行
2025-03-28 21:43:01,031 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"执行通过
2025-03-28 21:43:01,031 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"开始执行====
2025-03-28 21:43:01,031 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"执行通过====
2025-03-28 21:43:01,032 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "开始执行
2025-03-28 21:43:01,032 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "执行通过
2025-03-28 21:43:01,032 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容开始执行=
2025-03-28 21:43:01,032 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容执行通过=
2025-03-28 21:43:01,033 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:43:01,033 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:43:01,034 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"开始执行
2025-03-28 21:43:01,034 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"执行通过
2025-03-28 21:43:01,034 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"开始执行======
2025-03-28 21:43:01,034 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"执行通过======
2025-03-28 21:43:01,035 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 21:43:01,035 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 21:43:01,035 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:43:01,036 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:43:01,036 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 21:43:22,046 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 21:43:22,344 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"开始执行=====
2025-03-28 21:43:22,344 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"执行通过=====
2025-03-28 21:43:22,345 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "开始执行====
2025-03-28 21:43:22,345 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "执行通过====
2025-03-28 21:43:22,346 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"开始执行
2025-03-28 21:43:22,346 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"执行通过
2025-03-28 21:43:22,346 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"开始执行
2025-03-28 21:43:22,346 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"执行通过
2025-03-28 21:43:22,347 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "开始执行
2025-03-28 21:43:22,347 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "执行通过
2025-03-28 21:43:22,347 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 21:43:22,348 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 21:43:22,348 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号开始执行
2025-03-28 21:43:22,348 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号执行通过
2025-03-28 21:43:22,349 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号开始执行
2025-03-28 21:43:22,349 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号执行通过
2025-03-28 21:43:22,349 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"开始执行==
2025-03-28 21:43:22,349 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"执行通过==
2025-03-28 21:43:22,350 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "开始执行===
2025-03-28 21:43:22,350 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "执行通过===
2025-03-28 21:43:22,350 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"开始执行
2025-03-28 21:43:22,350 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"执行通过
2025-03-28 21:43:22,351 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"开始执行
2025-03-28 21:43:22,351 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"执行通过
2025-03-28 21:43:22,352 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "开始执行
2025-03-28 21:43:22,352 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "执行通过
2025-03-28 21:43:22,352 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "开始执行
2025-03-28 21:43:22,352 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "执行通过
2025-03-28 21:43:22,353 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数开始执行
2025-03-28 21:43:22,353 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数执行通过
2025-03-28 21:43:22,354 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数开始执行
2025-03-28 21:43:22,354 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数执行通过
2025-03-28 21:43:22,354 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号开始执行
2025-03-28 21:43:22,354 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号执行通过
2025-03-28 21:43:22,355 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "开始执行=====
2025-03-28 21:43:22,355 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "执行通过=====
2025-03-28 21:43:22,356 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "开始执行==
2025-03-28 21:43:22,356 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "执行通过==
2025-03-28 21:43:22,357 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "开始执行==
2025-03-28 21:43:22,357 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "执行通过==
2025-03-28 21:43:22,357 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"开始执行==
2025-03-28 21:43:22,357 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"执行通过==
2025-03-28 21:43:22,358 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"开始执行==
2025-03-28 21:43:22,358 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"执行通过==
2025-03-28 21:43:22,359 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 21:43:22,359 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 21:43:22,359 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "开始执行
2025-03-28 21:43:22,359 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "执行通过
2025-03-28 21:43:22,360 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期开始执行
2025-03-28 21:43:22,360 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期执行通过
2025-03-28 21:43:22,360 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期开始执行
2025-03-28 21:43:22,361 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期执行通过
2025-03-28 21:43:22,361 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"开始执行
2025-03-28 21:43:22,361 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"执行失败, 错误信息：assert '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n' == '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹1配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n'
  
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
  - 格式错误：输入的内容数据类型不匹1配, 期望为 int 类型
  ?                 -
  + 格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n' == '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹1配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n'
  
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
  - 格式错误：输入的内容数据类型不匹1配, 期望为 int 类型
  ?                 -
  + 格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
    [0;91m
    格式错误：输入的内容数据类型不匹配, 期望为 int 类型
    [0m
2025-03-28 21:43:22,399 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"开始执行
2025-03-28 21:43:22,399 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"执行通过
2025-03-28 21:43:22,399 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"开始执行======
2025-03-28 21:43:22,399 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"执行通过======
2025-03-28 21:43:22,400 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "开始执行===
2025-03-28 21:43:22,400 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "执行通过===
2025-03-28 21:43:22,401 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 21:43:22,401 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 21:43:22,402 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:43:22,402 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:43:22,402 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"开始执行
2025-03-28 21:43:22,402 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"执行通过
2025-03-28 21:43:22,403 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"开始执行
2025-03-28 21:43:22,403 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"执行通过
2025-03-28 21:43:22,404 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"开始执行====
2025-03-28 21:43:22,404 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"执行通过====
2025-03-28 21:43:22,404 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "开始执行
2025-03-28 21:43:22,404 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "执行通过
2025-03-28 21:43:22,405 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容开始执行=
2025-03-28 21:43:22,405 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容执行通过=
2025-03-28 21:43:22,405 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:43:22,405 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:43:22,406 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"开始执行
2025-03-28 21:43:22,406 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"执行通过
2025-03-28 21:43:22,407 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"开始执行======
2025-03-28 21:43:22,407 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"执行通过======
2025-03-28 21:43:22,408 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 21:43:22,408 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 21:43:22,409 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 21:43:22,409 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 21:43:22,409 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 22:16:59,493 INFO [testlog] [base_case.py (setup_class:13] - ==========封装print字体处理测试开始==========
2025-03-28 22:16:59,797 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ==========测试用例_print_text_font只传必填参数开始执行==========
2025-03-28 22:16:59,798 ERROR [testlog] [test_common_method.py (test_common_print_text_font:53] - 测试用例_print_text_font只传必填参数执行失败, 错误信息：assert '\x1b[0;91m我是红色字体\x1b[0m' == '\x1b[91我是红色字体\x1b[0m'
  
  - [91我是红色字体[0m
  + [0;91m我是红色字体[0m
  ?   ++  +
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 51, in test_common_print_text_font
    assert act == exp
AssertionError: assert '\x1b[0;91m我是红色字体\x1b[0m' == '\x1b[91我是红色字体\x1b[0m'
  
  - [91我是红色字体[0m
  + [0;91m我是红色字体[0m
  ?   ++  +
2025-03-28 22:16:59,833 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的红色字体开始执行======
2025-03-28 22:16:59,833 ERROR [testlog] [test_common_method.py (test_common_print_text_font:53] - 测试用例_print_text_font传所有参数，不加粗的红色字体执行失败, 错误信息：assert '\x1b[0;91m我是红色字体\x1b[0m' == '\x1b[91我是红色字体\x1b[0m'
  
  - [91我是红色字体[0m
  + [0;91m我是红色字体[0m
  ?   ++  +
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 51, in test_common_print_text_font
    assert act == exp
AssertionError: assert '\x1b[0;91m我是红色字体\x1b[0m' == '\x1b[91我是红色字体\x1b[0m'
  
  - [91我是红色字体[0m
  + [0;91m我是红色字体[0m
  ?   ++  +
2025-03-28 22:16:59,834 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装print字体处理测试结束==========
2025-03-28 22:17:49,410 INFO [testlog] [base_case.py (setup_class:13] - ==========封装print字体处理测试开始==========
2025-03-28 22:17:49,706 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ==========测试用例_print_text_font只传必填参数开始执行==========
2025-03-28 22:17:49,706 ERROR [testlog] [test_common_method.py (test_common_print_text_font:53] - 测试用例_print_text_font只传必填参数执行失败, 错误信息：assert '\x1b[0;91m我是红色字体\x1b[0m' == '\x1b[0;91我是红色字体\x1b[0m'
  
  - [0;91我是红色字体[0m
  + [0;91m我是红色字体[0m
  ?       +
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 51, in test_common_print_text_font
    assert act == exp
AssertionError: assert '\x1b[0;91m我是红色字体\x1b[0m' == '\x1b[0;91我是红色字体\x1b[0m'
  
  - [0;91我是红色字体[0m
  + [0;91m我是红色字体[0m
  ?       +
2025-03-28 22:17:49,741 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的红色字体开始执行======
2025-03-28 22:17:49,741 ERROR [testlog] [test_common_method.py (test_common_print_text_font:53] - 测试用例_print_text_font传所有参数，不加粗的红色字体执行失败, 错误信息：assert '\x1b[0;91m我是红色字体\x1b[0m' == '\x1b[0;91我是红色字体\x1b[0m'
  
  - [0;91我是红色字体[0m
  + [0;91m我是红色字体[0m
  ?       +
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 51, in test_common_print_text_font
    assert act == exp
AssertionError: assert '\x1b[0;91m我是红色字体\x1b[0m' == '\x1b[0;91我是红色字体\x1b[0m'
  
  - [0;91我是红色字体[0m
  + [0;91m我是红色字体[0m
  ?       +
2025-03-28 22:17:49,743 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装print字体处理测试结束==========
2025-03-28 22:18:18,067 INFO [testlog] [base_case.py (setup_class:13] - ==========封装print字体处理测试开始==========
2025-03-28 22:18:18,398 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ==========测试用例_print_text_font只传必填参数开始执行==========
2025-03-28 22:18:18,398 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ==========测试用例_print_text_font只传必填参数执行通过==========
2025-03-28 22:18:18,399 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的红色字体开始执行======
2025-03-28 22:18:18,399 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的红色字体执行通过======
2025-03-28 22:18:18,400 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装print字体处理测试结束==========
2025-03-28 22:53:58,891 INFO [testlog] [base_case.py (setup_class:13] - ==========封装print字体处理测试开始==========
2025-03-28 22:53:59,208 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ==========测试用例_print_text_font只传必填参数开始执行==========
2025-03-28 22:53:59,209 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ==========测试用例_print_text_font只传必填参数执行通过==========
2025-03-28 22:53:59,209 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的红色字体开始执行======
2025-03-28 22:53:59,210 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的红色字体执行通过======
2025-03-28 22:53:59,210 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的红色字体开始执行=======
2025-03-28 22:53:59,210 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的红色字体执行通过=======
2025-03-28 22:53:59,211 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =======测试用例_print_text_font传所有参数，不加粗的空格开始执行=======
2025-03-28 22:53:59,211 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =======测试用例_print_text_font传所有参数，不加粗的空格执行通过=======
2025-03-28 22:53:59,211 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =======测试用例_print_text_font传所有参数，加粗的空格开始执行========
2025-03-28 22:53:59,211 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =======测试用例_print_text_font传所有参数，加粗的空格执行通过========
2025-03-28 22:53:59,212 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗黑色字体开始执行===
2025-03-28 22:53:59,212 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗黑色字体执行通过===
2025-03-28 22:53:59,212 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的黑色字体开始执行======
2025-03-28 22:53:59,212 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的黑色字体执行通过======
2025-03-28 22:53:59,213 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的黑色字体开始执行=======
2025-03-28 22:53:59,213 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的黑色字体执行通过=======
2025-03-28 22:53:59,214 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗绿色字体开始执行===
2025-03-28 22:53:59,214 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗绿色字体执行通过===
2025-03-28 22:53:59,214 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的绿色字体开始执行======
2025-03-28 22:53:59,214 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的绿色字体执行通过======
2025-03-28 22:53:59,215 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的绿色字体开始执行=======
2025-03-28 22:53:59,215 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的绿色字体执行通过=======
2025-03-28 22:53:59,216 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗黄色字体开始执行===
2025-03-28 22:53:59,216 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗黄色字体执行通过===
2025-03-28 22:53:59,217 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的黄色字体开始执行======
2025-03-28 22:53:59,217 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的黄色字体执行通过======
2025-03-28 22:53:59,217 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的黄色字体开始执行=======
2025-03-28 22:53:59,217 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的黄色字体执行通过=======
2025-03-28 22:53:59,218 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗蓝色字体开始执行===
2025-03-28 22:53:59,218 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗蓝色字体执行通过===
2025-03-28 22:53:59,219 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的蓝色字体开始执行======
2025-03-28 22:53:59,219 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的蓝色字体执行通过======
2025-03-28 22:53:59,220 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的蓝色字体开始执行=======
2025-03-28 22:53:59,220 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的蓝色字体执行通过=======
2025-03-28 22:53:59,220 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗紫色字体开始执行===
2025-03-28 22:53:59,220 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗紫色字体执行通过===
2025-03-28 22:53:59,221 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的紫色字体开始执行======
2025-03-28 22:53:59,221 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的紫色字体执行通过======
2025-03-28 22:53:59,222 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的紫色字体开始执行=======
2025-03-28 22:53:59,222 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的紫色字体执行通过=======
2025-03-28 22:53:59,223 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗青色字体开始执行===
2025-03-28 22:53:59,223 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗青色字体执行通过===
2025-03-28 22:53:59,224 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的青色字体开始执行======
2025-03-28 22:53:59,224 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的青色字体执行通过======
2025-03-28 22:53:59,225 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的青色字体开始执行=======
2025-03-28 22:53:59,225 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的青色字体执行通过=======
2025-03-28 22:53:59,226 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗白色字体开始执行===
2025-03-28 22:53:59,226 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗白色字体执行通过===
2025-03-28 22:53:59,226 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的白色字体开始执行======
2025-03-28 22:53:59,227 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的白色字体执行通过======
2025-03-28 22:53:59,227 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的白色字体开始执行=======
2025-03-28 22:53:59,227 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的白色字体执行通过=======
2025-03-28 22:53:59,228 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font只传text和color，颜色错误开始执行=====
2025-03-28 22:53:59,228 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font只传text和color，颜色错误执行通过=====
2025-03-28 22:53:59,229 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，加粗的错误颜色字体开始执行======
2025-03-28 22:53:59,229 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，加粗的错误颜色字体执行通过======
2025-03-28 22:53:59,230 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =测试用例_print_text_font只传text和color，color为空字符串开始执行==
2025-03-28 22:53:59,230 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =测试用例_print_text_font只传text和color，color为空字符串执行通过==
2025-03-28 22:53:59,230 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font传所有参数，color为空字符串并加粗开始执行====
2025-03-28 22:53:59,230 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font传所有参数，color为空字符串并加粗执行通过====
2025-03-28 22:53:59,231 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font只传必填参数，text传整数开始执行======
2025-03-28 22:53:59,231 ERROR [testlog] [test_common_method.py (test_common_print_text_font:53] - 测试用例_print_text_font只传必填参数，text传整数执行失败, 错误信息：assert '\x1b[0;91m1111\x1b[0m' == '\x1b[1;91m1111\x1b[0m'
  
  - [1;91m1111[0m
  ?   ^
  + [0;91m1111[0m
  ?   ^
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 51, in test_common_print_text_font
    assert act == exp
AssertionError: assert '\x1b[0;91m1111\x1b[0m' == '\x1b[1;91m1111\x1b[0m'
  
  - [1;91m1111[0m
  ?   ^
  + [0;91m1111[0m
  ?   ^
2025-03-28 22:53:59,271 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font只传必填参数，text传浮点数开始执行======
2025-03-28 22:53:59,271 ERROR [testlog] [test_common_method.py (test_common_print_text_font:53] - 测试用例_print_text_font只传必填参数，text传浮点数执行失败, 错误信息：assert '\x1b[0;91m2222.222\x1b[0m' == '\x1b[1;91m2222.222\x1b[0m'
  
  - [1;91m2222.222[0m
  ?   ^
  + [0;91m2222.222[0m
  ?   ^
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 51, in test_common_print_text_font
    assert act == exp
AssertionError: assert '\x1b[0;91m2222.222\x1b[0m' == '\x1b[1;91m2222.222\x1b[0m'
  
  - [1;91m2222.222[0m
  ?   ^
  + [0;91m2222.222[0m
  ?   ^
2025-03-28 22:53:59,274 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，text传列表开始执行=======
2025-03-28 22:53:59,274 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，text传列表执行通过=======
2025-03-28 22:53:59,274 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，text传字典开始执行=======
2025-03-28 22:53:59,275 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，text传字典执行通过=======
2025-03-28 22:53:59,275 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，text传true开始执行======
2025-03-28 22:53:59,279 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，text传false开始执行=====
2025-03-28 22:53:59,282 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，text为null开始执行======
2025-03-28 22:53:59,282 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，text为null执行通过======
2025-03-28 22:53:59,283 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，text为空字符串开始执行======
2025-03-28 22:53:59,283 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，text为空字符串执行通过======
2025-03-28 22:53:59,283 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font传所有参数，is_weight传字符串开始执行====
2025-03-28 22:53:59,284 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font传所有参数，is_weight传字符串执行通过====
2025-03-28 22:53:59,284 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font传所有参数，is_weight传整数开始执行====
2025-03-28 22:53:59,284 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font传所有参数，is_weight传整数执行通过====
2025-03-28 22:53:59,285 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font传所有参数，is_weight传浮点数开始执行====
2025-03-28 22:53:59,285 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font传所有参数，is_weight传浮点数执行通过====
2025-03-28 22:53:59,285 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font传所有参数，is_weight传列表开始执行====
2025-03-28 22:53:59,285 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font传所有参数，is_weight传列表执行通过====
2025-03-28 22:53:59,286 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font传所有参数，is_weight传字典开始执行====
2025-03-28 22:53:59,286 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font传所有参数，is_weight传字典执行通过====
2025-03-28 22:53:59,287 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font传所有参数，is_weight传null开始执行===
2025-03-28 22:53:59,287 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font传所有参数，is_weight传null执行通过===
2025-03-28 22:53:59,287 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，color传整数开始执行======
2025-03-28 22:53:59,287 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，color传整数执行通过======
2025-03-28 22:53:59,288 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，color传浮点数开始执行======
2025-03-28 22:53:59,288 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，color传浮点数执行通过======
2025-03-28 22:53:59,289 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，color传列表开始执行======
2025-03-28 22:53:59,289 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，color传列表执行通过======
2025-03-28 22:53:59,289 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，color传字典开始执行======
2025-03-28 22:53:59,289 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，color传字典执行通过======
2025-03-28 22:53:59,290 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，color传true开始执行=====
2025-03-28 22:53:59,290 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，color传true执行通过=====
2025-03-28 22:53:59,291 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font传所有参数，color传false开始执行=====
2025-03-28 22:53:59,291 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font传所有参数，color传false执行通过=====
2025-03-28 22:53:59,292 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，color传null开始执行=====
2025-03-28 22:53:59,292 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，color传null执行通过=====
2025-03-28 22:53:59,292 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装print字体处理测试结束==========
2025-03-28 22:55:42,075 INFO [testlog] [base_case.py (setup_class:13] - ==========封装print字体处理测试开始==========
2025-03-28 22:55:42,373 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ==========测试用例_print_text_font只传必填参数开始执行==========
2025-03-28 22:55:42,373 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ==========测试用例_print_text_font只传必填参数执行通过==========
2025-03-28 22:55:42,374 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的红色字体开始执行======
2025-03-28 22:55:42,374 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的红色字体执行通过======
2025-03-28 22:55:42,375 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的红色字体开始执行=======
2025-03-28 22:55:42,375 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的红色字体执行通过=======
2025-03-28 22:55:42,375 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =======测试用例_print_text_font传所有参数，不加粗的空格开始执行=======
2025-03-28 22:55:42,375 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =======测试用例_print_text_font传所有参数，不加粗的空格执行通过=======
2025-03-28 22:55:42,376 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =======测试用例_print_text_font传所有参数，加粗的空格开始执行========
2025-03-28 22:55:42,376 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =======测试用例_print_text_font传所有参数，加粗的空格执行通过========
2025-03-28 22:55:42,376 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗黑色字体开始执行===
2025-03-28 22:55:42,376 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗黑色字体执行通过===
2025-03-28 22:55:42,377 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的黑色字体开始执行======
2025-03-28 22:55:42,377 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的黑色字体执行通过======
2025-03-28 22:55:42,377 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的黑色字体开始执行=======
2025-03-28 22:55:42,377 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的黑色字体执行通过=======
2025-03-28 22:55:42,378 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗绿色字体开始执行===
2025-03-28 22:55:42,378 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗绿色字体执行通过===
2025-03-28 22:55:42,378 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的绿色字体开始执行======
2025-03-28 22:55:42,378 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的绿色字体执行通过======
2025-03-28 22:55:42,379 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的绿色字体开始执行=======
2025-03-28 22:55:42,379 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的绿色字体执行通过=======
2025-03-28 22:55:42,379 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗黄色字体开始执行===
2025-03-28 22:55:42,379 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗黄色字体执行通过===
2025-03-28 22:55:42,380 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的黄色字体开始执行======
2025-03-28 22:55:42,380 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的黄色字体执行通过======
2025-03-28 22:55:42,380 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的黄色字体开始执行=======
2025-03-28 22:55:42,380 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的黄色字体执行通过=======
2025-03-28 22:55:42,381 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗蓝色字体开始执行===
2025-03-28 22:55:42,381 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗蓝色字体执行通过===
2025-03-28 22:55:42,382 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的蓝色字体开始执行======
2025-03-28 22:55:42,382 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的蓝色字体执行通过======
2025-03-28 22:55:42,382 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的蓝色字体开始执行=======
2025-03-28 22:55:42,382 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的蓝色字体执行通过=======
2025-03-28 22:55:42,383 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗紫色字体开始执行===
2025-03-28 22:55:42,383 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗紫色字体执行通过===
2025-03-28 22:55:42,383 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的紫色字体开始执行======
2025-03-28 22:55:42,383 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的紫色字体执行通过======
2025-03-28 22:55:42,384 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的紫色字体开始执行=======
2025-03-28 22:55:42,384 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的紫色字体执行通过=======
2025-03-28 22:55:42,385 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗青色字体开始执行===
2025-03-28 22:55:42,385 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗青色字体执行通过===
2025-03-28 22:55:42,385 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的青色字体开始执行======
2025-03-28 22:55:42,385 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的青色字体执行通过======
2025-03-28 22:55:42,386 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的青色字体开始执行=======
2025-03-28 22:55:42,386 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的青色字体执行通过=======
2025-03-28 22:55:42,386 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗白色字体开始执行===
2025-03-28 22:55:42,386 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗白色字体执行通过===
2025-03-28 22:55:42,387 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的白色字体开始执行======
2025-03-28 22:55:42,387 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的白色字体执行通过======
2025-03-28 22:55:42,388 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的白色字体开始执行=======
2025-03-28 22:55:42,388 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的白色字体执行通过=======
2025-03-28 22:55:42,388 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font只传text和color，颜色错误开始执行=====
2025-03-28 22:55:42,388 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font只传text和color，颜色错误执行通过=====
2025-03-28 22:55:42,389 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，加粗的错误颜色字体开始执行======
2025-03-28 22:55:42,389 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，加粗的错误颜色字体执行通过======
2025-03-28 22:55:42,389 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =测试用例_print_text_font只传text和color，color为空字符串开始执行==
2025-03-28 22:55:42,389 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =测试用例_print_text_font只传text和color，color为空字符串执行通过==
2025-03-28 22:55:42,390 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font传所有参数，color为空字符串并加粗开始执行====
2025-03-28 22:55:42,390 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font传所有参数，color为空字符串并加粗执行通过====
2025-03-28 22:55:42,390 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font只传必填参数，text传整数开始执行======
2025-03-28 22:55:42,390 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font只传必填参数，text传整数执行通过======
2025-03-28 22:55:42,391 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font只传必填参数，text传浮点数开始执行======
2025-03-28 22:55:42,391 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font只传必填参数，text传浮点数执行通过======
2025-03-28 22:55:42,391 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，text传列表开始执行=======
2025-03-28 22:55:42,391 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，text传列表执行通过=======
2025-03-28 22:55:42,392 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，text传字典开始执行=======
2025-03-28 22:55:42,392 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，text传字典执行通过=======
2025-03-28 22:55:42,393 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，text传true开始执行======
2025-03-28 22:55:42,428 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，text传false开始执行=====
2025-03-28 22:55:42,430 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，text为null开始执行======
2025-03-28 22:55:42,431 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，text为null执行通过======
2025-03-28 22:55:42,431 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，text为空字符串开始执行======
2025-03-28 22:55:42,431 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，text为空字符串执行通过======
2025-03-28 22:55:42,432 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font传所有参数，is_weight传字符串开始执行====
2025-03-28 22:55:42,432 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font传所有参数，is_weight传字符串执行通过====
2025-03-28 22:55:42,432 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font传所有参数，is_weight传整数开始执行====
2025-03-28 22:55:42,432 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font传所有参数，is_weight传整数执行通过====
2025-03-28 22:55:42,433 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font传所有参数，is_weight传浮点数开始执行====
2025-03-28 22:55:42,433 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font传所有参数，is_weight传浮点数执行通过====
2025-03-28 22:55:42,434 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font传所有参数，is_weight传列表开始执行====
2025-03-28 22:55:42,434 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font传所有参数，is_weight传列表执行通过====
2025-03-28 22:55:42,435 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font传所有参数，is_weight传字典开始执行====
2025-03-28 22:55:42,435 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font传所有参数，is_weight传字典执行通过====
2025-03-28 22:55:42,435 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font传所有参数，is_weight传null开始执行===
2025-03-28 22:55:42,435 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font传所有参数，is_weight传null执行通过===
2025-03-28 22:55:42,437 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，color传整数开始执行======
2025-03-28 22:55:42,437 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，color传整数执行通过======
2025-03-28 22:55:42,437 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，color传浮点数开始执行======
2025-03-28 22:55:42,437 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，color传浮点数执行通过======
2025-03-28 22:55:42,438 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，color传列表开始执行======
2025-03-28 22:55:42,438 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，color传列表执行通过======
2025-03-28 22:55:42,438 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，color传字典开始执行======
2025-03-28 22:55:42,438 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，color传字典执行通过======
2025-03-28 22:55:42,439 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，color传true开始执行=====
2025-03-28 22:55:42,439 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，color传true执行通过=====
2025-03-28 22:55:42,440 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font传所有参数，color传false开始执行=====
2025-03-28 22:55:42,440 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font传所有参数，color传false执行通过=====
2025-03-28 22:55:42,440 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，color传null开始执行=====
2025-03-28 22:55:42,440 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，color传null执行通过=====
2025-03-28 22:55:42,441 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装print字体处理测试结束==========
2025-03-28 22:56:53,783 INFO [testlog] [base_case.py (setup_class:13] - ==========封装print字体处理测试开始==========
2025-03-28 22:56:54,093 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ==========测试用例_print_text_font只传必填参数开始执行==========
2025-03-28 22:56:54,093 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ==========测试用例_print_text_font只传必填参数执行通过==========
2025-03-28 22:56:54,094 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的红色字体开始执行======
2025-03-28 22:56:54,094 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的红色字体执行通过======
2025-03-28 22:56:54,095 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的红色字体开始执行=======
2025-03-28 22:56:54,095 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的红色字体执行通过=======
2025-03-28 22:56:54,095 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =======测试用例_print_text_font传所有参数，不加粗的空格开始执行=======
2025-03-28 22:56:54,095 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =======测试用例_print_text_font传所有参数，不加粗的空格执行通过=======
2025-03-28 22:56:54,096 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =======测试用例_print_text_font传所有参数，加粗的空格开始执行========
2025-03-28 22:56:54,096 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =======测试用例_print_text_font传所有参数，加粗的空格执行通过========
2025-03-28 22:56:54,096 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗黑色字体开始执行===
2025-03-28 22:56:54,096 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗黑色字体执行通过===
2025-03-28 22:56:54,097 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的黑色字体开始执行======
2025-03-28 22:56:54,097 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的黑色字体执行通过======
2025-03-28 22:56:54,098 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的黑色字体开始执行=======
2025-03-28 22:56:54,098 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的黑色字体执行通过=======
2025-03-28 22:56:54,098 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗绿色字体开始执行===
2025-03-28 22:56:54,098 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗绿色字体执行通过===
2025-03-28 22:56:54,099 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的绿色字体开始执行======
2025-03-28 22:56:54,099 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的绿色字体执行通过======
2025-03-28 22:56:54,100 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的绿色字体开始执行=======
2025-03-28 22:56:54,100 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的绿色字体执行通过=======
2025-03-28 22:56:54,101 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗黄色字体开始执行===
2025-03-28 22:56:54,101 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗黄色字体执行通过===
2025-03-28 22:56:54,101 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的黄色字体开始执行======
2025-03-28 22:56:54,102 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的黄色字体执行通过======
2025-03-28 22:56:54,102 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的黄色字体开始执行=======
2025-03-28 22:56:54,102 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的黄色字体执行通过=======
2025-03-28 22:56:54,103 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗蓝色字体开始执行===
2025-03-28 22:56:54,103 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗蓝色字体执行通过===
2025-03-28 22:56:54,103 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的蓝色字体开始执行======
2025-03-28 22:56:54,104 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的蓝色字体执行通过======
2025-03-28 22:56:54,104 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的蓝色字体开始执行=======
2025-03-28 22:56:54,104 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的蓝色字体执行通过=======
2025-03-28 22:56:54,105 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗紫色字体开始执行===
2025-03-28 22:56:54,105 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗紫色字体执行通过===
2025-03-28 22:56:54,106 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的紫色字体开始执行======
2025-03-28 22:56:54,106 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的紫色字体执行通过======
2025-03-28 22:56:54,106 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的紫色字体开始执行=======
2025-03-28 22:56:54,106 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的紫色字体执行通过=======
2025-03-28 22:56:54,107 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗青色字体开始执行===
2025-03-28 22:56:54,107 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗青色字体执行通过===
2025-03-28 22:56:54,108 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的青色字体开始执行======
2025-03-28 22:56:54,108 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的青色字体执行通过======
2025-03-28 22:56:54,109 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的青色字体开始执行=======
2025-03-28 22:56:54,109 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的青色字体执行通过=======
2025-03-28 22:56:54,109 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗白色字体开始执行===
2025-03-28 22:56:54,110 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗白色字体执行通过===
2025-03-28 22:56:54,111 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的白色字体开始执行======
2025-03-28 22:56:54,111 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的白色字体执行通过======
2025-03-28 22:56:54,111 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的白色字体开始执行=======
2025-03-28 22:56:54,112 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的白色字体执行通过=======
2025-03-28 22:56:54,113 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font只传text和color，颜色错误开始执行=====
2025-03-28 22:56:54,113 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font只传text和color，颜色错误执行通过=====
2025-03-28 22:56:54,114 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，加粗的错误颜色字体开始执行======
2025-03-28 22:56:54,114 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，加粗的错误颜色字体执行通过======
2025-03-28 22:56:54,114 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =测试用例_print_text_font只传text和color，color为空字符串开始执行==
2025-03-28 22:56:54,114 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =测试用例_print_text_font只传text和color，color为空字符串执行通过==
2025-03-28 22:56:54,115 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font传所有参数，color为空字符串并加粗开始执行====
2025-03-28 22:56:54,115 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font传所有参数，color为空字符串并加粗执行通过====
2025-03-28 22:56:54,115 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font只传必填参数，text传整数开始执行======
2025-03-28 22:56:54,115 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font只传必填参数，text传整数执行通过======
2025-03-28 22:56:54,116 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font只传必填参数，text传浮点数开始执行======
2025-03-28 22:56:54,116 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font只传必填参数，text传浮点数执行通过======
2025-03-28 22:56:54,117 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，text传列表开始执行=======
2025-03-28 22:56:54,117 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，text传列表执行通过=======
2025-03-28 22:56:54,118 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，text传字典开始执行=======
2025-03-28 22:56:54,118 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，text传字典执行通过=======
2025-03-28 22:56:54,119 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，text传true开始执行======
2025-03-28 22:56:54,157 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，text传false开始执行=====
2025-03-28 22:56:54,159 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，text为null开始执行======
2025-03-28 22:56:54,159 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，text为null执行通过======
2025-03-28 22:56:54,160 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，text为空字符串开始执行======
2025-03-28 22:56:54,160 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，text为空字符串执行通过======
2025-03-28 22:56:54,160 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font传所有参数，is_weight传字符串开始执行====
2025-03-28 22:56:54,161 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font传所有参数，is_weight传字符串执行通过====
2025-03-28 22:56:54,161 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font传所有参数，is_weight传整数开始执行====
2025-03-28 22:56:54,161 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font传所有参数，is_weight传整数执行通过====
2025-03-28 22:56:54,162 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font传所有参数，is_weight传浮点数开始执行====
2025-03-28 22:56:54,162 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font传所有参数，is_weight传浮点数执行通过====
2025-03-28 22:56:54,162 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font传所有参数，is_weight传列表开始执行====
2025-03-28 22:56:54,162 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font传所有参数，is_weight传列表执行通过====
2025-03-28 22:56:54,163 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font传所有参数，is_weight传字典开始执行====
2025-03-28 22:56:54,163 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font传所有参数，is_weight传字典执行通过====
2025-03-28 22:56:54,163 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font传所有参数，is_weight传null开始执行===
2025-03-28 22:56:54,164 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font传所有参数，is_weight传null执行通过===
2025-03-28 22:56:54,165 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，color传整数开始执行======
2025-03-28 22:56:54,165 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，color传整数执行通过======
2025-03-28 22:56:54,166 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，color传浮点数开始执行======
2025-03-28 22:56:54,166 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，color传浮点数执行通过======
2025-03-28 22:56:54,166 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，color传列表开始执行======
2025-03-28 22:56:54,167 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，color传列表执行通过======
2025-03-28 22:56:54,167 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，color传字典开始执行======
2025-03-28 22:56:54,167 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，color传字典执行通过======
2025-03-28 22:56:54,168 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，color传true开始执行=====
2025-03-28 22:56:54,168 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，color传true执行通过=====
2025-03-28 22:56:54,168 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font传所有参数，color传false开始执行=====
2025-03-28 22:56:54,169 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font传所有参数，color传false执行通过=====
2025-03-28 22:56:54,169 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，color传null开始执行=====
2025-03-28 22:56:54,169 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，color传null执行通过=====
2025-03-28 22:56:54,169 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装print字体处理测试结束==========
2025-03-28 23:05:28,934 INFO [testlog] [base_case.py (setup_class:13] - ==========封装print字体处理测试开始==========
2025-03-28 23:05:29,250 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ==========测试用例_print_text_font只传必填参数开始执行==========
2025-03-28 23:05:29,250 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ==========测试用例_print_text_font只传必填参数执行通过==========
2025-03-28 23:05:29,251 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的红色字体开始执行======
2025-03-28 23:05:29,251 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的红色字体执行通过======
2025-03-28 23:05:29,252 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的红色字体开始执行=======
2025-03-28 23:05:29,252 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的红色字体执行通过=======
2025-03-28 23:05:29,252 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =======测试用例_print_text_font传所有参数，不加粗的空格开始执行=======
2025-03-28 23:05:29,252 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =======测试用例_print_text_font传所有参数，不加粗的空格执行通过=======
2025-03-28 23:05:29,253 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =======测试用例_print_text_font传所有参数，加粗的空格开始执行========
2025-03-28 23:05:29,253 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =======测试用例_print_text_font传所有参数，加粗的空格执行通过========
2025-03-28 23:05:29,253 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗黑色字体开始执行===
2025-03-28 23:05:29,253 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗黑色字体执行通过===
2025-03-28 23:05:29,254 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的黑色字体开始执行======
2025-03-28 23:05:29,254 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的黑色字体执行通过======
2025-03-28 23:05:29,254 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的黑色字体开始执行=======
2025-03-28 23:05:29,254 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的黑色字体执行通过=======
2025-03-28 23:05:29,255 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗绿色字体开始执行===
2025-03-28 23:05:29,255 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗绿色字体执行通过===
2025-03-28 23:05:29,256 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的绿色字体开始执行======
2025-03-28 23:05:29,256 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的绿色字体执行通过======
2025-03-28 23:05:29,256 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的绿色字体开始执行=======
2025-03-28 23:05:29,256 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的绿色字体执行通过=======
2025-03-28 23:05:29,257 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗黄色字体开始执行===
2025-03-28 23:05:29,257 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗黄色字体执行通过===
2025-03-28 23:05:29,257 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的黄色字体开始执行======
2025-03-28 23:05:29,257 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的黄色字体执行通过======
2025-03-28 23:05:29,258 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的黄色字体开始执行=======
2025-03-28 23:05:29,258 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的黄色字体执行通过=======
2025-03-28 23:05:29,258 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗蓝色字体开始执行===
2025-03-28 23:05:29,258 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗蓝色字体执行通过===
2025-03-28 23:05:29,259 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的蓝色字体开始执行======
2025-03-28 23:05:29,259 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的蓝色字体执行通过======
2025-03-28 23:05:29,260 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的蓝色字体开始执行=======
2025-03-28 23:05:29,260 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的蓝色字体执行通过=======
2025-03-28 23:05:29,260 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗紫色字体开始执行===
2025-03-28 23:05:29,260 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗紫色字体执行通过===
2025-03-28 23:05:29,261 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的紫色字体开始执行======
2025-03-28 23:05:29,261 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的紫色字体执行通过======
2025-03-28 23:05:29,262 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的紫色字体开始执行=======
2025-03-28 23:05:29,262 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的紫色字体执行通过=======
2025-03-28 23:05:29,262 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗青色字体开始执行===
2025-03-28 23:05:29,262 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗青色字体执行通过===
2025-03-28 23:05:29,263 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的青色字体开始执行======
2025-03-28 23:05:29,263 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的青色字体执行通过======
2025-03-28 23:05:29,263 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的青色字体开始执行=======
2025-03-28 23:05:29,263 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的青色字体执行通过=======
2025-03-28 23:05:29,264 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗白色字体开始执行===
2025-03-28 23:05:29,264 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗白色字体执行通过===
2025-03-28 23:05:29,265 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的白色字体开始执行======
2025-03-28 23:05:29,265 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的白色字体执行通过======
2025-03-28 23:05:29,266 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的白色字体开始执行=======
2025-03-28 23:05:29,266 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的白色字体执行通过=======
2025-03-28 23:05:29,266 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font只传text和color，颜色错误开始执行=====
2025-03-28 23:05:29,266 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font只传text和color，颜色错误执行通过=====
2025-03-28 23:05:29,267 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，加粗的错误颜色字体开始执行======
2025-03-28 23:05:29,267 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，加粗的错误颜色字体执行通过======
2025-03-28 23:05:29,268 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =测试用例_print_text_font只传text和color，color为空字符串开始执行==
2025-03-28 23:05:29,268 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =测试用例_print_text_font只传text和color，color为空字符串执行通过==
2025-03-28 23:05:29,268 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font传所有参数，color为空字符串并加粗开始执行====
2025-03-28 23:05:29,268 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font传所有参数，color为空字符串并加粗执行通过====
2025-03-28 23:05:29,269 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font只传必填参数，text传整数开始执行======
2025-03-28 23:05:29,269 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font只传必填参数，text传整数执行通过======
2025-03-28 23:05:29,269 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font只传必填参数，text传浮点数开始执行======
2025-03-28 23:05:29,269 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font只传必填参数，text传浮点数执行通过======
2025-03-28 23:05:29,270 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，text传列表开始执行=======
2025-03-28 23:05:29,270 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，text传列表执行通过=======
2025-03-28 23:05:29,271 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，text传字典开始执行=======
2025-03-28 23:05:29,271 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，text传字典执行通过=======
2025-03-28 23:05:29,271 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，text传true开始执行======
2025-03-28 23:05:29,271 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，text传true执行通过======
2025-03-28 23:05:29,272 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，text传false开始执行=====
2025-03-28 23:05:29,272 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，text传false执行通过=====
2025-03-28 23:05:29,273 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，text为null开始执行======
2025-03-28 23:05:29,273 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，text为null执行通过======
2025-03-28 23:05:29,273 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，text为空字符串开始执行======
2025-03-28 23:05:29,273 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，text为空字符串执行通过======
2025-03-28 23:05:29,274 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font传所有参数，is_weight传字符串开始执行====
2025-03-28 23:05:29,274 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font传所有参数，is_weight传字符串执行通过====
2025-03-28 23:05:29,275 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font传所有参数，is_weight传整数开始执行====
2025-03-28 23:05:29,275 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font传所有参数，is_weight传整数执行通过====
2025-03-28 23:05:29,275 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font传所有参数，is_weight传浮点数开始执行====
2025-03-28 23:05:29,275 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font传所有参数，is_weight传浮点数执行通过====
2025-03-28 23:05:29,276 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font传所有参数，is_weight传列表开始执行====
2025-03-28 23:05:29,276 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font传所有参数，is_weight传列表执行通过====
2025-03-28 23:05:29,277 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font传所有参数，is_weight传字典开始执行====
2025-03-28 23:05:29,277 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font传所有参数，is_weight传字典执行通过====
2025-03-28 23:05:29,278 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font传所有参数，is_weight传null开始执行===
2025-03-28 23:05:29,278 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font传所有参数，is_weight传null执行通过===
2025-03-28 23:05:29,278 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，color传整数开始执行======
2025-03-28 23:05:29,278 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，color传整数执行通过======
2025-03-28 23:05:29,279 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，color传浮点数开始执行======
2025-03-28 23:05:29,279 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，color传浮点数执行通过======
2025-03-28 23:05:29,280 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，color传列表开始执行======
2025-03-28 23:05:29,280 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，color传列表执行通过======
2025-03-28 23:05:29,280 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，color传字典开始执行======
2025-03-28 23:05:29,280 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，color传字典执行通过======
2025-03-28 23:05:29,281 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，color传true开始执行=====
2025-03-28 23:05:29,281 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，color传true执行通过=====
2025-03-28 23:05:29,282 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font传所有参数，color传false开始执行=====
2025-03-28 23:05:29,282 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font传所有参数，color传false执行通过=====
2025-03-28 23:05:29,282 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，color传null开始执行=====
2025-03-28 23:05:29,282 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，color传null执行通过=====
2025-03-28 23:05:29,282 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装print字体处理测试结束==========
2025-03-28 23:06:02,093 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG密度计算BUG数评分测试开始==========
2025-03-28 23:06:02,402 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例BUG密度为0，期望20分开始执行===============
2025-03-28 23:06:02,402 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==============测试用例BUG密度为0，期望20分执行通过===============
2025-03-28 23:06:02,403 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为0.1，期望20分开始执行==============
2025-03-28 23:06:02,403 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =============测试用例BUG密度为0.1，期望20分执行通过==============
2025-03-28 23:06:02,404 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为0.9，期望20分开始执行==============
2025-03-28 23:06:02,404 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =============测试用例BUG密度为0.9，期望20分执行通过==============
2025-03-28 23:06:02,404 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例BUG密度为1，期望20分开始执行===============
2025-03-28 23:06:02,404 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==============测试用例BUG密度为1，期望20分执行通过===============
2025-03-28 23:06:02,405 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为1.1，期望15分开始执行==============
2025-03-28 23:06:02,405 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =============测试用例BUG密度为1.1，期望15分执行通过==============
2025-03-28 23:06:02,406 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为1.2，期望15分开始执行==============
2025-03-28 23:06:02,406 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =============测试用例BUG密度为1.2，期望15分执行通过==============
2025-03-28 23:06:02,407 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为1.4，期望15分开始执行==============
2025-03-28 23:06:02,407 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =============测试用例BUG密度为1.4，期望15分执行通过==============
2025-03-28 23:06:02,407 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为1.5，期望15分开始执行==============
2025-03-28 23:06:02,407 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =============测试用例BUG密度为1.5，期望15分执行通过==============
2025-03-28 23:06:02,408 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为1.6，期望10分开始执行==============
2025-03-28 23:06:02,408 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =============测试用例BUG密度为1.6，期望10分执行通过==============
2025-03-28 23:06:02,409 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为1.7，期望10分开始执行==============
2025-03-28 23:06:02,409 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =============测试用例BUG密度为1.7，期望10分执行通过==============
2025-03-28 23:06:02,409 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =============测试用例BUG密度为1.9，期望10分开始执行==============
2025-03-28 23:06:02,409 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =============测试用例BUG密度为1.9，期望10分执行通过==============
2025-03-28 23:06:02,410 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例BUG密度为2，期望10分开始执行===============
2025-03-28 23:06:02,410 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==============测试用例BUG密度为2，期望10分执行通过===============
2025-03-28 23:06:02,411 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例BUG密度为2.1，期望5分开始执行==============
2025-03-28 23:06:02,411 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==============测试用例BUG密度为2.1，期望5分执行通过==============
2025-03-28 23:06:02,411 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例BUG密度为2.2，期望5分开始执行==============
2025-03-28 23:06:02,411 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==============测试用例BUG密度为2.2，期望5分执行通过==============
2025-03-28 23:06:02,412 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例BUG密度为2.9，期望5分开始执行==============
2025-03-28 23:06:02,412 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==============测试用例BUG密度为2.9，期望5分执行通过==============
2025-03-28 23:06:02,412 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ===============测试用例BUG密度为3，期望5分开始执行===============
2025-03-28 23:06:02,412 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ===============测试用例BUG密度为3，期望5分执行通过===============
2025-03-28 23:06:02,413 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例BUG密度为3.1，期望1分开始执行==============
2025-03-28 23:06:02,413 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==============测试用例BUG密度为3.1，期望1分执行通过==============
2025-03-28 23:06:02,414 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例BUG密度为999，期望1分开始执行==============
2025-03-28 23:06:02,414 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==============测试用例BUG密度为999，期望1分执行通过==============
2025-03-28 23:06:02,414 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ===============测试用例BUG密度为很多小数点开始执行================
2025-03-28 23:06:02,414 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ===============测试用例BUG密度为很多小数点执行通过================
2025-03-28 23:06:02,415 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==========测试用例BUG密度为-1，输入值不在任何评分区间内开始执行===========
2025-03-28 23:06:02,415 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==========测试用例BUG密度为-1，输入值不在任何评分区间内执行通过===========
2025-03-28 23:06:02,416 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =========测试用例BUG密度为小写英文，输入参数X必须是数字类型开始执行==========
2025-03-28 23:06:02,416 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =========测试用例BUG密度为小写英文，输入参数X必须是数字类型执行通过==========
2025-03-28 23:06:02,416 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =========测试用例BUG密度为大写英文，输入参数X必须是数字类型开始执行==========
2025-03-28 23:06:02,416 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =========测试用例BUG密度为大写英文，输入参数X必须是数字类型执行通过==========
2025-03-28 23:06:02,417 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==========测试用例BUG密度为汉字，输入参数X必须是数字类型开始执行===========
2025-03-28 23:06:02,417 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==========测试用例BUG密度为汉字，输入参数X必须是数字类型执行通过===========
2025-03-28 23:06:02,417 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =========测试用例BUG密度为特殊符号，输入参数X必须是数字类型开始执行==========
2025-03-28 23:06:02,417 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =========测试用例BUG密度为特殊符号，输入参数X必须是数字类型执行通过==========
2025-03-28 23:06:02,418 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ===========测试用例BUG密度为空字符串，输入参数X不能为空开始执行===========
2025-03-28 23:06:02,418 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ===========测试用例BUG密度为空字符串，输入参数X不能为空执行通过===========
2025-03-28 23:06:02,419 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - =========测试用例BUG密度为字符串空格，输入参数X必须是数字类型开始执行=========
2025-03-28 23:06:02,419 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - =========测试用例BUG密度为字符串空格，输入参数X必须是数字类型执行通过=========
2025-03-28 23:06:02,419 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ===========测试用例BUG密度为null，输入参数X不能为空开始执行===========
2025-03-28 23:06:02,419 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ===========测试用例BUG密度为null，输入参数X不能为空执行通过===========
2025-03-28 23:06:02,420 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:19] - ==============测试用例不传值，输入参数X不能为空开始执行===============
2025-03-28 23:06:02,420 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_count_rating:28] - ==============测试用例不传值，输入参数X不能为空执行通过===============
2025-03-28 23:06:02,420 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG密度计算BUG数评分测试结束==========
2025-03-28 23:06:02,421 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG重启和未修复数量计算评分测试开始==========
2025-03-28 23:06:02,421 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ==============测试用例BUG重启数0，期望20分开始执行===============
2025-03-28 23:06:02,421 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ==============测试用例BUG重启数0，期望20分执行通过===============
2025-03-28 23:06:02,421 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ==============测试用例BUG重启数1，期望15分开始执行===============
2025-03-28 23:06:02,421 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ==============测试用例BUG重启数1，期望15分执行通过===============
2025-03-28 23:06:02,422 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ==============测试用例BUG重启数2，期望10分开始执行===============
2025-03-28 23:06:02,422 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ==============测试用例BUG重启数2，期望10分执行通过===============
2025-03-28 23:06:02,423 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ===============测试用例BUG重启数3，期望5分开始执行===============
2025-03-28 23:06:02,423 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ===============测试用例BUG重启数3，期望5分执行通过===============
2025-03-28 23:06:02,423 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ===============测试用例BUG重启数4，期望1分开始执行===============
2025-03-28 23:06:02,424 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ===============测试用例BUG重启数4，期望1分执行通过===============
2025-03-28 23:06:02,424 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ===============测试用例BUG重启数5，期望1分开始执行===============
2025-03-28 23:06:02,424 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ===============测试用例BUG重启数5，期望1分执行通过===============
2025-03-28 23:06:02,425 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - =============测试用例BUG重启数9999，期望1分开始执行==============
2025-03-28 23:06:02,425 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - =============测试用例BUG重启数9999，期望1分执行通过==============
2025-03-28 23:06:02,425 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ==============测试用例BUG重启数很长，期望1分开始执行===============
2025-03-28 23:06:02,426 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ==============测试用例BUG重启数很长，期望1分执行通过===============
2025-03-28 23:06:02,426 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - =================测试用例BUG重启数-1开始执行=================
2025-03-28 23:06:02,426 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - =================测试用例BUG重启数-1执行通过=================
2025-03-28 23:06:02,427 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ================测试用例BUG重启数为浮点数开始执行================
2025-03-28 23:06:02,427 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ================测试用例BUG重启数为浮点数执行通过================
2025-03-28 23:06:02,427 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ===============测试用例BUG重启数为小写英文开始执行================
2025-03-28 23:06:02,427 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ===============测试用例BUG重启数为小写英文执行通过================
2025-03-28 23:06:02,428 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ===============测试用例BUG重启数为大写英文开始执行================
2025-03-28 23:06:02,428 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ===============测试用例BUG重启数为大写英文执行通过================
2025-03-28 23:06:02,429 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ================测试用例BUG重启数为汉字开始执行=================
2025-03-28 23:06:02,429 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ================测试用例BUG重启数为汉字执行通过=================
2025-03-28 23:06:02,429 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ===============测试用例BUG重启数为特殊符号开始执行================
2025-03-28 23:06:02,429 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ===============测试用例BUG重启数为特殊符号执行通过================
2025-03-28 23:06:02,430 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ================测试用例BUG重启数为空格开始执行=================
2025-03-28 23:06:02,430 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ================测试用例BUG重启数为空格执行通过=================
2025-03-28 23:06:02,431 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ===============测试用例BUG重启数为空字符串开始执行================
2025-03-28 23:06:02,431 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ===============测试用例BUG重启数为空字符串执行通过================
2025-03-28 23:06:02,431 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - ===============测试用例BUG重启数为null开始执行================
2025-03-28 23:06:02,431 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - ===============测试用例BUG重启数为null执行通过================
2025-03-28 23:06:02,432 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:47] - =================测试用例不传BUG重启数开始执行=================
2025-03-28 23:06:02,432 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_reopen_rating:56] - =================测试用例不传BUG重启数执行通过=================
2025-03-28 23:06:02,432 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG重启和未修复数量计算评分测试结束==========
2025-03-28 23:06:02,433 INFO [testlog] [base_case.py (setup_class:13] - ==========BUG修复情况评分计算测试开始==========
2025-03-28 23:06:02,433 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ===测试用例入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG开始执行====
2025-03-28 23:06:02,433 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ===测试用例入参为完整的数据结构，不存在上线当天未修复BUG和创建当天未修复BUG执行通过====
2025-03-28 23:06:02,433 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =测试用例入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行==
2025-03-28 23:06:02,433 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =测试用例入参中未传BUG等级字段，代表不存在上线当天未修复BUG和创建当天未修复BUG执行通过==
2025-03-28 23:06:02,434 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ====测试用例入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行=====
2025-03-28 23:06:02,434 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ====测试用例入参为空字典，代表不存在上线当天未修复BUG和创建当天未修复BUG执行通过=====
2025-03-28 23:06:02,434 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ====测试用例入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行====
2025-03-28 23:06:02,434 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ====测试用例入参为null，代表不存在上线当天未修复BUG和创建当天未修复BUG执行通过====
2025-03-28 23:06:02,435 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =====测试用例不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行======
2025-03-28 23:06:02,435 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =====测试用例不传参数，代表不存在上线当天未修复BUG和创建当天未修复BUG执行通过======
2025-03-28 23:06:02,436 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ==测试用例入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG开始执行===
2025-03-28 23:06:02,436 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ==测试用例入参的数据格式不正确，代表不存在上线当天未修复BUG和创建当天未修复BUG执行通过===
2025-03-28 23:06:02,436 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG开始执行
2025-03-28 23:06:02,436 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P2级BUG执行通过
2025-03-28 23:06:02,437 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG开始执行
2025-03-28 23:06:02,437 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在创建当天未修复BUG的P2列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P2级BUG执行通过
2025-03-28 23:06:02,437 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG开始执行
2025-03-28 23:06:02,437 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P1级BUG执行通过
2025-03-28 23:06:02,438 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG开始执行
2025-03-28 23:06:02,438 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P1级BUG执行通过
2025-03-28 23:06:02,439 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG开始执行
2025-03-28 23:06:02,439 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P1级和P2级BUG执行通过
2025-03-28 23:06:02,439 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG开始执行
2025-03-28 23:06:02,439 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在创建当天未修复BUG的P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG各存在一个P1级和P2级BUG执行通过
2025-03-28 23:06:02,440 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG开始执行
2025-03-28 23:06:02,440 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG只存在多个P0级BUG执行通过
2025-03-28 23:06:02,440 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG开始执行
2025-03-28 23:06:02,441 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在创建当天未修复BUG的P0列表数据，不存在上线当天未修复BUG，创建当天未修复BUG只存在一个P0级BUG执行通过
2025-03-28 23:06:02,441 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG开始执行
2025-03-28 23:06:02,441 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P1级BUG执行通过
2025-03-28 23:06:02,442 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG开始执行
2025-03-28 23:06:02,442 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P1级BUG执行通过
2025-03-28 23:06:02,443 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG开始执行
2025-03-28 23:06:02,443 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级和P2级BUG执行通过
2025-03-28 23:06:02,443 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG开始执行
2025-03-28 23:06:02,443 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在创建当天未修复BUG的P0和P1列表数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级和一个P2级BUG执行通过
2025-03-28 23:06:02,444 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG开始执行
2025-03-28 23:06:02,444 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，不存在上线当天未修复BUG，创建当天未修复BUG存在多个P0级、P1级和P2级BUG执行通过
2025-03-28 23:06:02,445 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG开始执行
2025-03-28 23:06:02,445 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在创建当天未修复BUG的完整数据，不存在上线当天未修复BUG，创建当天未修复BUG存在一个P0级、一个P1级和一个P2级BUG执行通过
2025-03-28 23:06:02,445 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG开始执行
2025-03-28 23:06:02,445 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，不存在创建当天未修复BUG执行通过
2025-03-28 23:06:02,446 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG开始执行
2025-03-28 23:06:02,446 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在上线当天未修复BUG的P2列表数据，上线当天未修复BUG只存在一个P2级BUG，不存在创建当天未修复BUG执行通过
2025-03-28 23:06:02,447 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG开始执行
2025-03-28 23:06:02,447 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P2级BUG，创建当天未修复BUG所有等级都存在多个BUG执行通过
2025-03-28 23:06:02,447 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG开始执行
2025-03-28 23:06:02,447 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参存在上线当天未修复BUG的P2列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P2级BUG，创建当天未修复BUG所有等级都各存在一个BUG执行通过
2025-03-28 23:06:02,448 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG开始执行
2025-03-28 23:06:02,448 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，不存在创建当天未修复BUG执行通过
2025-03-28 23:06:02,449 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG开始执行
2025-03-28 23:06:02,449 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参只存在上线当天未修复BUG的P0P1列表数据，上线当天未修复BUG只存在一个P0P1级BUG，不存在创建当天未修复BUG执行通过
2025-03-28 23:06:02,450 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG开始执行
2025-03-28 23:06:02,450 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，上线当天未修复BUG只存在多个P0P1级BUG，创建当天未修复BUG所有等级都存在多个BUG执行通过
2025-03-28 23:06:02,450 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG开始执行
2025-03-28 23:06:02,450 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参存在上线当天未修复BUG的P0P1列表数据和创建当天未修复BUG的完整数据，上线当天未修复BUG只存在一个P0P1级BUG，创建当天未修复BUG所有等级都各存在一个BUG执行通过
2025-03-28 23:06:02,451 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - 测试用例入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG开始执行
2025-03-28 23:06:02,451 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - 测试用例入参为完整的数据结构，上线当天未修复BUG和创建当天未修复BUG的所有等级都各存在一个BUG执行通过
2025-03-28 23:06:02,452 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为小写英文开始执行=================
2025-03-28 23:06:02,452 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为小写英文执行通过=================
2025-03-28 23:06:02,452 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为大写英文开始执行=================
2025-03-28 23:06:02,452 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为大写英文执行通过=================
2025-03-28 23:06:02,453 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ==================测试用例入参值为整数开始执行==================
2025-03-28 23:06:02,453 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ==================测试用例入参值为整数执行通过==================
2025-03-28 23:06:02,454 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为浮点数开始执行==================
2025-03-28 23:06:02,454 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为浮点数执行通过==================
2025-03-28 23:06:02,455 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ==================测试用例入参值为汉字开始执行==================
2025-03-28 23:06:02,455 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ==================测试用例入参值为汉字执行通过==================
2025-03-28 23:06:02,455 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为特殊符号开始执行=================
2025-03-28 23:06:02,455 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为特殊符号执行通过=================
2025-03-28 23:06:02,456 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为空字符串开始执行=================
2025-03-28 23:06:02,456 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为空字符串执行通过=================
2025-03-28 23:06:02,457 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - ==================测试用例入参值为空格开始执行==================
2025-03-28 23:06:02,457 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - ==================测试用例入参值为空格执行通过==================
2025-03-28 23:06:02,457 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:74] - =================测试用例入参值为空列表开始执行==================
2025-03-28 23:06:02,457 DEBUG [testlog] [test_calculate_rating.py (test_calculate_bug_repair_rating:83] - =================测试用例入参值为空列表执行通过==================
2025-03-28 23:06:02,457 INFO [testlog] [base_case.py (teardown_class:17] - ==========BUG修复情况评分计算测试结束==========
2025-03-28 23:06:02,458 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 23:06:02,458 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"开始执行=====
2025-03-28 23:06:02,458 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"执行通过=====
2025-03-28 23:06:02,459 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "开始执行====
2025-03-28 23:06:02,459 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "执行通过====
2025-03-28 23:06:02,461 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"开始执行
2025-03-28 23:06:02,461 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"执行通过
2025-03-28 23:06:02,462 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"开始执行
2025-03-28 23:06:02,462 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"执行通过
2025-03-28 23:06:02,463 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "开始执行
2025-03-28 23:06:02,463 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "执行通过
2025-03-28 23:06:02,463 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 23:06:02,464 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 23:06:02,464 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号开始执行
2025-03-28 23:06:02,465 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号执行通过
2025-03-28 23:06:02,466 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号开始执行
2025-03-28 23:06:02,466 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号执行通过
2025-03-28 23:06:02,467 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"开始执行==
2025-03-28 23:06:02,467 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"执行通过==
2025-03-28 23:06:02,467 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "开始执行===
2025-03-28 23:06:02,467 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "执行通过===
2025-03-28 23:06:02,468 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"开始执行
2025-03-28 23:06:02,468 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"执行通过
2025-03-28 23:06:02,469 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"开始执行
2025-03-28 23:06:02,469 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"执行通过
2025-03-28 23:06:02,470 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "开始执行
2025-03-28 23:06:02,470 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "执行通过
2025-03-28 23:06:02,471 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "开始执行
2025-03-28 23:06:02,471 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "执行通过
2025-03-28 23:06:02,472 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数开始执行
2025-03-28 23:06:02,472 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数执行通过
2025-03-28 23:06:02,474 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数开始执行
2025-03-28 23:06:02,474 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数执行通过
2025-03-28 23:06:02,475 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号开始执行
2025-03-28 23:06:02,475 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号执行通过
2025-03-28 23:06:02,476 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "开始执行=====
2025-03-28 23:06:02,476 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "执行通过=====
2025-03-28 23:06:02,477 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "开始执行==
2025-03-28 23:06:02,477 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "执行通过==
2025-03-28 23:06:02,478 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "开始执行==
2025-03-28 23:06:02,478 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "执行通过==
2025-03-28 23:06:02,479 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"开始执行==
2025-03-28 23:06:02,479 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"执行通过==
2025-03-28 23:06:02,480 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"开始执行==
2025-03-28 23:06:02,480 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"执行通过==
2025-03-28 23:06:02,481 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 23:06:02,481 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 23:06:02,482 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "开始执行
2025-03-28 23:06:02,482 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "执行通过
2025-03-28 23:06:02,483 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期开始执行
2025-03-28 23:06:02,483 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期执行通过
2025-03-28 23:06:02,484 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期开始执行
2025-03-28 23:06:02,484 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期执行通过
2025-03-28 23:06:02,485 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"开始执行
2025-03-28 23:06:02,485 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"执行通过
2025-03-28 23:06:02,486 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"开始执行
2025-03-28 23:06:02,486 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"执行通过
2025-03-28 23:06:02,487 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"开始执行======
2025-03-28 23:06:02,487 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"执行通过======
2025-03-28 23:06:02,488 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "开始执行===
2025-03-28 23:06:02,488 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "执行通过===
2025-03-28 23:06:02,489 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 23:06:02,489 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 23:06:02,490 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 23:06:02,490 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 23:06:02,491 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"开始执行
2025-03-28 23:06:02,491 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"执行通过
2025-03-28 23:06:02,491 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"开始执行
2025-03-28 23:06:02,492 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"执行通过
2025-03-28 23:06:02,492 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"开始执行====
2025-03-28 23:06:02,493 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"执行通过====
2025-03-28 23:06:02,493 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "开始执行
2025-03-28 23:06:02,493 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "执行通过
2025-03-28 23:06:02,494 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容开始执行=
2025-03-28 23:06:02,494 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容执行通过=
2025-03-28 23:06:02,495 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 23:06:02,495 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 23:06:02,496 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"开始执行
2025-03-28 23:06:02,496 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"执行通过
2025-03-28 23:06:02,497 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"开始执行======
2025-03-28 23:06:02,497 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"执行通过======
2025-03-28 23:06:02,498 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 23:06:02,498 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 23:06:02,499 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 23:06:02,499 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 23:06:02,500 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 23:06:02,500 INFO [testlog] [base_case.py (setup_class:13] - ==========封装print字体处理测试开始==========
2025-03-28 23:06:02,500 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ==========测试用例_print_text_font只传必填参数开始执行==========
2025-03-28 23:06:02,500 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ==========测试用例_print_text_font只传必填参数执行通过==========
2025-03-28 23:06:02,501 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的红色字体开始执行======
2025-03-28 23:06:02,501 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的红色字体执行通过======
2025-03-28 23:06:02,502 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的红色字体开始执行=======
2025-03-28 23:06:02,502 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的红色字体执行通过=======
2025-03-28 23:06:02,502 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =======测试用例_print_text_font传所有参数，不加粗的空格开始执行=======
2025-03-28 23:06:02,502 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =======测试用例_print_text_font传所有参数，不加粗的空格执行通过=======
2025-03-28 23:06:02,503 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =======测试用例_print_text_font传所有参数，加粗的空格开始执行========
2025-03-28 23:06:02,503 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =======测试用例_print_text_font传所有参数，加粗的空格执行通过========
2025-03-28 23:06:02,504 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗黑色字体开始执行===
2025-03-28 23:06:02,504 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗黑色字体执行通过===
2025-03-28 23:06:02,504 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的黑色字体开始执行======
2025-03-28 23:06:02,504 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的黑色字体执行通过======
2025-03-28 23:06:02,505 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的黑色字体开始执行=======
2025-03-28 23:06:02,505 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的黑色字体执行通过=======
2025-03-28 23:06:02,505 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗绿色字体开始执行===
2025-03-28 23:06:02,506 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗绿色字体执行通过===
2025-03-28 23:06:02,506 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的绿色字体开始执行======
2025-03-28 23:06:02,506 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的绿色字体执行通过======
2025-03-28 23:06:02,507 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的绿色字体开始执行=======
2025-03-28 23:06:02,507 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的绿色字体执行通过=======
2025-03-28 23:06:02,507 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗黄色字体开始执行===
2025-03-28 23:06:02,507 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗黄色字体执行通过===
2025-03-28 23:06:02,508 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的黄色字体开始执行======
2025-03-28 23:06:02,508 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的黄色字体执行通过======
2025-03-28 23:06:02,509 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的黄色字体开始执行=======
2025-03-28 23:06:02,509 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的黄色字体执行通过=======
2025-03-28 23:06:02,510 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗蓝色字体开始执行===
2025-03-28 23:06:02,510 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗蓝色字体执行通过===
2025-03-28 23:06:02,510 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的蓝色字体开始执行======
2025-03-28 23:06:02,510 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的蓝色字体执行通过======
2025-03-28 23:06:02,511 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的蓝色字体开始执行=======
2025-03-28 23:06:02,511 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的蓝色字体执行通过=======
2025-03-28 23:06:02,512 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗紫色字体开始执行===
2025-03-28 23:06:02,512 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗紫色字体执行通过===
2025-03-28 23:06:02,512 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的紫色字体开始执行======
2025-03-28 23:06:02,512 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的紫色字体执行通过======
2025-03-28 23:06:02,513 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的紫色字体开始执行=======
2025-03-28 23:06:02,513 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的紫色字体执行通过=======
2025-03-28 23:06:02,514 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗青色字体开始执行===
2025-03-28 23:06:02,514 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗青色字体执行通过===
2025-03-28 23:06:02,514 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的青色字体开始执行======
2025-03-28 23:06:02,514 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的青色字体执行通过======
2025-03-28 23:06:02,515 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的青色字体开始执行=======
2025-03-28 23:06:02,515 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的青色字体执行通过=======
2025-03-28 23:06:02,515 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font只传text和color，不加粗白色字体开始执行===
2025-03-28 23:06:02,515 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font只传text和color，不加粗白色字体执行通过===
2025-03-28 23:06:02,516 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，不加粗的白色字体开始执行======
2025-03-28 23:06:02,516 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，不加粗的白色字体执行通过======
2025-03-28 23:06:02,517 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，加粗的白色字体开始执行=======
2025-03-28 23:06:02,517 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，加粗的白色字体执行通过=======
2025-03-28 23:06:02,517 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font只传text和color，颜色错误开始执行=====
2025-03-28 23:06:02,517 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font只传text和color，颜色错误执行通过=====
2025-03-28 23:06:02,518 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，加粗的错误颜色字体开始执行======
2025-03-28 23:06:02,518 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，加粗的错误颜色字体执行通过======
2025-03-28 23:06:02,519 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =测试用例_print_text_font只传text和color，color为空字符串开始执行==
2025-03-28 23:06:02,519 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =测试用例_print_text_font只传text和color，color为空字符串执行通过==
2025-03-28 23:06:02,519 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font传所有参数，color为空字符串并加粗开始执行====
2025-03-28 23:06:02,519 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font传所有参数，color为空字符串并加粗执行通过====
2025-03-28 23:06:02,520 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font只传必填参数，text传整数开始执行======
2025-03-28 23:06:02,520 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font只传必填参数，text传整数执行通过======
2025-03-28 23:06:02,520 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font只传必填参数，text传浮点数开始执行======
2025-03-28 23:06:02,520 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font只传必填参数，text传浮点数执行通过======
2025-03-28 23:06:02,521 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，text传列表开始执行=======
2025-03-28 23:06:02,521 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，text传列表执行通过=======
2025-03-28 23:06:02,522 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，text传字典开始执行=======
2025-03-28 23:06:02,522 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，text传字典执行通过=======
2025-03-28 23:06:02,522 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，text传true开始执行======
2025-03-28 23:06:02,522 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，text传true执行通过======
2025-03-28 23:06:02,523 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，text传false开始执行=====
2025-03-28 23:06:02,523 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，text传false执行通过=====
2025-03-28 23:06:02,524 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，text为null开始执行======
2025-03-28 23:06:02,524 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，text为null执行通过======
2025-03-28 23:06:02,524 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，text为空字符串开始执行======
2025-03-28 23:06:02,524 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，text为空字符串执行通过======
2025-03-28 23:06:02,525 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font传所有参数，is_weight传字符串开始执行====
2025-03-28 23:06:02,525 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font传所有参数，is_weight传字符串执行通过====
2025-03-28 23:06:02,526 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font传所有参数，is_weight传整数开始执行====
2025-03-28 23:06:02,526 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font传所有参数，is_weight传整数执行通过====
2025-03-28 23:06:02,527 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font传所有参数，is_weight传浮点数开始执行====
2025-03-28 23:06:02,527 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font传所有参数，is_weight传浮点数执行通过====
2025-03-28 23:06:02,527 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font传所有参数，is_weight传列表开始执行====
2025-03-28 23:06:02,527 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font传所有参数，is_weight传列表执行通过====
2025-03-28 23:06:02,528 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font传所有参数，is_weight传字典开始执行====
2025-03-28 23:06:02,528 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font传所有参数，is_weight传字典执行通过====
2025-03-28 23:06:02,528 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ===测试用例_print_text_font传所有参数，is_weight传null开始执行===
2025-03-28 23:06:02,528 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ===测试用例_print_text_font传所有参数，is_weight传null执行通过===
2025-03-28 23:06:02,529 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，color传整数开始执行======
2025-03-28 23:06:02,529 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，color传整数执行通过======
2025-03-28 23:06:02,530 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，color传浮点数开始执行======
2025-03-28 23:06:02,530 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，color传浮点数执行通过======
2025-03-28 23:06:02,530 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，color传列表开始执行======
2025-03-28 23:06:02,530 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，color传列表执行通过======
2025-03-28 23:06:02,531 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ======测试用例_print_text_font传所有参数，color传字典开始执行======
2025-03-28 23:06:02,531 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ======测试用例_print_text_font传所有参数，color传字典执行通过======
2025-03-28 23:06:02,532 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，color传true开始执行=====
2025-03-28 23:06:02,532 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，color传true执行通过=====
2025-03-28 23:06:02,532 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - ====测试用例_print_text_font传所有参数，color传false开始执行=====
2025-03-28 23:06:02,532 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - ====测试用例_print_text_font传所有参数，color传false执行通过=====
2025-03-28 23:06:02,533 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:46] - =====测试用例_print_text_font传所有参数，color传null开始执行=====
2025-03-28 23:06:02,533 DEBUG [testlog] [test_common_method.py (test_common_print_text_font:55] - =====测试用例_print_text_font传所有参数，color传null执行通过=====
2025-03-28 23:06:02,533 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装print字体处理测试结束==========
2025-03-28 23:54:05,512 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 23:54:05,823 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"开始执行=====
2025-03-28 23:54:05,824 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为int，输入内容为字符串:"999"执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,862 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "开始执行====
2025-03-28 23:54:05,862 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,864 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"开始执行
2025-03-28 23:54:05,864 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,866 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"开始执行
2025-03-28 23:54:05,866 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,869 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "开始执行
2025-03-28 23:54:05,869 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,871 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 23:54:05,871 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,873 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号开始执行
2025-03-28 23:54:05,873 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,875 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号开始执行
2025-03-28 23:54:05,875 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,878 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"开始执行==
2025-03-28 23:54:05,878 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,880 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "开始执行===
2025-03-28 23:54:05,881 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,882 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"开始执行
2025-03-28 23:54:05,883 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,886 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"开始执行
2025-03-28 23:54:05,886 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,889 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "开始执行
2025-03-28 23:54:05,889 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,892 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "开始执行
2025-03-28 23:54:05,892 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,895 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数开始执行
2025-03-28 23:54:05,895 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,898 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数开始执行
2025-03-28 23:54:05,899 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,901 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号开始执行
2025-03-28 23:54:05,901 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,904 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "开始执行=====
2025-03-28 23:54:05,904 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,906 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "开始执行==
2025-03-28 23:54:05,906 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,910 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "开始执行==
2025-03-28 23:54:05,910 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,912 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"开始执行==
2025-03-28 23:54:05,912 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,914 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"开始执行==
2025-03-28 23:54:05,915 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,918 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 23:54:05,918 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,920 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "开始执行
2025-03-28 23:54:05,920 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,922 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期开始执行
2025-03-28 23:54:05,922 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,925 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期开始执行
2025-03-28 23:54:05,925 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期执行失败, 错误信息：assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='', err='')\n" == ''
  
  + CaptureResult(out='', err='')
2025-03-28 23:54:05,927 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"开始执行
2025-03-28 23:54:05,928 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"执行失败, 错误信息：assert "CaptureResult(out='\\x1b[0;91m\\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n', err='')
  - [0;91m
  - 格式错误：输入的内容数据类型不匹配, 期望为 int 类型
  - [0m
  - [0;91m
  - 格式错误：输入的内容数据类型不匹配, 期望为 int 类型
  - [0m
  - [0;91m
  - 格式错误：输入的内容数据类型不匹配, 期望为 int 类型
  - [0m
  - [0;91m
  - 格式错误：输入的内容数据类型不匹配, 期望为 int 类型
  - [0m
  - [0;91m
  - 格式错误：输入的内容数据类型不匹配, 期望为 int 类型
  - [0m
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='\\x1b[0;91m\\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n', err='')
  - [0;91m
  - 格式错误：输入的内容数据类型不匹配, 期望为 int 类型
  - [0m
  - [0;91m
  - 格式错误：输入的内容数据类型不匹配, 期望为 int 类型
  - [0m
  - [0;91m
  - 格式错误：输入的内容数据类型不匹配, 期望为 int 类型
  - [0m
  - [0;91m
  - 格式错误：输入的内容数据类型不匹配, 期望为 int 类型
  - [0m
  - [0;91m
  - 格式错误：输入的内容数据类型不匹配, 期望为 int 类型
  - [0m
2025-03-28 23:54:05,931 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"开始执行
2025-03-28 23:54:05,931 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"执行失败, 错误信息：assert "CaptureResult(out='\\x1b[0;91m\\n错误：输入值必须在 [10,20] 范围内\\n\\x1b[0m\\n\\x1b[0;91m\\n错误：输入值必须在 [10,20] 范围内\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n错误：输入值必须在 [10,20] 范围内\n\x1b[0m\n\x1b[0;91m\n错误：输入值必须在 [10,20] 范围内\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n错误：输入值必须在 [10,20] 范围内\n\x1b[0m\n\x1b[0;91m\n错误：输入值必须在 [10,20] 范围内\n\x1b[0m\n', err='')
  - [0;91m
  - 错误：输入值必须在 [10,20] 范围内
  - [0m
  - [0;91m
  - 错误：输入值必须在 [10,20] 范围内
  - [0m
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='\\x1b[0;91m\\n错误：输入值必须在 [10,20] 范围内\\n\\x1b[0m\\n\\x1b[0;91m\\n错误：输入值必须在 [10,20] 范围内\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n错误：输入值必须在 [10,20] 范围内\n\x1b[0m\n\x1b[0;91m\n错误：输入值必须在 [10,20] 范围内\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n错误：输入值必须在 [10,20] 范围内\n\x1b[0m\n\x1b[0;91m\n错误：输入值必须在 [10,20] 范围内\n\x1b[0m\n', err='')
  - [0;91m
  - 错误：输入值必须在 [10,20] 范围内
  - [0m
  - [0;91m
  - 错误：输入值必须在 [10,20] 范围内
  - [0m
2025-03-28 23:54:05,933 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"开始执行======
2025-03-28 23:54:05,933 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为int，不输入内容，在输入"20"执行失败, 错误信息：assert "CaptureResult(out='\\x1b[0;91m\\n错误：请输入内容\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n错误：请输入内容\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n错误：请输入内容\n\x1b[0m\n', err='')
  - [0;91m
  - 错误：请输入内容
  - [0m
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='\\x1b[0;91m\\n错误：请输入内容\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n错误：请输入内容\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n错误：请输入内容\n\x1b[0m\n', err='')
  - [0;91m
  - 错误：请输入内容
  - [0m
2025-03-28 23:54:05,935 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "开始执行===
2025-03-28 23:54:05,935 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "执行失败, 错误信息：assert "CaptureResult(out='\\x1b[0;91m\\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n', err='')
  - [0;91m
  - 格式错误：输入的内容数据类型不匹配, 期望为 int 类型
  - [0m
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='\\x1b[0;91m\\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 int 类型\n\x1b[0m\n', err='')
  - [0;91m
  - 格式错误：输入的内容数据类型不匹配, 期望为 int 类型
  - [0m
2025-03-28 23:54:05,937 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 23:54:05,937 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容执行失败, 错误信息：assert "CaptureResult(out='\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: ^1\\\\d{10}$\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: ^1\\\\d{10}$\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: ^1\\\\d{10}$\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^1\\d{10}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^1\\d{10}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^1\\d{10}$\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^1\\d{10}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^1\\d{10}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^1\\d{10}$\n\x1b[0m\n', err='')
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: ^1\d{10}$
  - [0m
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: ^1\d{10}$
  - [0m
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: ^1\d{10}$
  - [0m
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: ^1\\\\d{10}$\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: ^1\\\\d{10}$\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: ^1\\\\d{10}$\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^1\\d{10}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^1\\d{10}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^1\\d{10}$\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^1\\d{10}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^1\\d{10}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^1\\d{10}$\n\x1b[0m\n', err='')
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: ^1\d{10}$
  - [0m
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: ^1\d{10}$
  - [0m
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: ^1\d{10}$
  - [0m
2025-03-28 23:54:05,939 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 23:54:05,939 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行失败, 错误信息：assert "CaptureResult(out='\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: 1XXXXXXXXXX\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: 1XXXXXXXXXX\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: 1XXXXXXXXXX\n\x1b[0m\n', err='')
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: 1XXXXXXXXXX
  - [0m
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: 1XXXXXXXXXX\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: 1XXXXXXXXXX\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: 1XXXXXXXXXX\n\x1b[0m\n', err='')
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: 1XXXXXXXXXX
  - [0m
2025-03-28 23:54:05,942 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"开始执行
2025-03-28 23:54:05,942 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"执行失败, 错误信息：assert "CaptureResult(out='\\x1b[0;91m\\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\n\x1b[0m\n', err='')
  - [0;91m
  - 格式错误：输入的内容数据类型不匹配, 期望为 float 类型
  - [0m
  - [0;91m
  - 格式错误：输入的内容数据类型不匹配, 期望为 float 类型
  - [0m
  - [0;91m
  - 格式错误：输入的内容数据类型不匹配, 期望为 float 类型
  - [0m
  - [0;91m
  - 格式错误：输入的内容数据类型不匹配, 期望为 float 类型
  - [0m
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='\\x1b[0;91m\\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\n\x1b[0m\n\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\n\x1b[0m\n', err='')
  - [0;91m
  - 格式错误：输入的内容数据类型不匹配, 期望为 float 类型
  - [0m
  - [0;91m
  - 格式错误：输入的内容数据类型不匹配, 期望为 float 类型
  - [0m
  - [0;91m
  - 格式错误：输入的内容数据类型不匹配, 期望为 float 类型
  - [0m
  - [0;91m
  - 格式错误：输入的内容数据类型不匹配, 期望为 float 类型
  - [0m
2025-03-28 23:54:05,944 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"开始执行
2025-03-28 23:54:05,944 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"执行失败, 错误信息：assert "CaptureResult(out='\\x1b[0;91m\\n错误：输入值必须在 [10.1,20.2] 范围内\\n\\x1b[0m\\n\\x1b[0;91m\\n错误：输入值必须在 [10.1,20.2] 范围内\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n错误：输入值必须在 [10.1,20.2] 范围内\n\x1b[0m\n\x1b[0;91m\n错误：输入值必须在 [10.1,20.2] 范围内\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n错误：输入值必须在 [10.1,20.2] 范围内\n\x1b[0m\n\x1b[0;91m\n错误：输入值必须在 [10.1,20.2] 范围内\n\x1b[0m\n', err='')
  - [0;91m
  - 错误：输入值必须在 [10.1,20.2] 范围内
  - [0m
  - [0;91m
  - 错误：输入值必须在 [10.1,20.2] 范围内
  - [0m
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='\\x1b[0;91m\\n错误：输入值必须在 [10.1,20.2] 范围内\\n\\x1b[0m\\n\\x1b[0;91m\\n错误：输入值必须在 [10.1,20.2] 范围内\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n错误：输入值必须在 [10.1,20.2] 范围内\n\x1b[0m\n\x1b[0;91m\n错误：输入值必须在 [10.1,20.2] 范围内\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n错误：输入值必须在 [10.1,20.2] 范围内\n\x1b[0m\n\x1b[0;91m\n错误：输入值必须在 [10.1,20.2] 范围内\n\x1b[0m\n', err='')
  - [0;91m
  - 错误：输入值必须在 [10.1,20.2] 范围内
  - [0m
  - [0;91m
  - 错误：输入值必须在 [10.1,20.2] 范围内
  - [0m
2025-03-28 23:54:05,946 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"开始执行====
2025-03-28 23:54:05,946 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"执行失败, 错误信息：assert "CaptureResult(out='\\x1b[0;91m\\n错误：请输入内容\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n错误：请输入内容\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n错误：请输入内容\n\x1b[0m\n', err='')
  - [0;91m
  - 错误：请输入内容
  - [0m
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='\\x1b[0;91m\\n错误：请输入内容\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n错误：请输入内容\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n错误：请输入内容\n\x1b[0m\n', err='')
  - [0;91m
  - 错误：请输入内容
  - [0m
2025-03-28 23:54:05,948 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "开始执行
2025-03-28 23:54:05,948 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "执行失败, 错误信息：assert "CaptureResult(out='\\x1b[0;91m\\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\n\x1b[0m\n', err='')
  - [0;91m
  - 格式错误：输入的内容数据类型不匹配, 期望为 float 类型
  - [0m
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='\\x1b[0;91m\\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n格式错误：输入的内容数据类型不匹配, 期望为 float 类型\n\x1b[0m\n', err='')
  - [0;91m
  - 格式错误：输入的内容数据类型不匹配, 期望为 float 类型
  - [0m
2025-03-28 23:54:05,950 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容开始执行=
2025-03-28 23:54:05,950 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容执行失败, 错误信息：assert "CaptureResult(out='\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: ^\\\\d{3}\\\\.\\\\d{2}$\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: ^\\\\d{3}\\\\.\\\\d{2}$\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: ^\\\\d{3}\\\\.\\\\d{2}$\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: ^\\\\d{3}\\\\.\\\\d{2}$\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{3}\\.\\d{2}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{3}\\.\\d{2}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{3}\\.\\d{2}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{3}\\.\\d{2}$\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{3}\\.\\d{2}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{3}\\.\\d{2}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{3}\\.\\d{2}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{3}\\.\\d{2}$\n\x1b[0m\n', err='')
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: ^\d{3}\.\d{2}$
  - [0m
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: ^\d{3}\.\d{2}$
  - [0m
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: ^\d{3}\.\d{2}$
  - [0m
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: ^\d{3}\.\d{2}$
  - [0m
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: ^\\\\d{3}\\\\.\\\\d{2}$\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: ^\\\\d{3}\\\\.\\\\d{2}$\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: ^\\\\d{3}\\\\.\\\\d{2}$\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: ^\\\\d{3}\\\\.\\\\d{2}$\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{3}\\.\\d{2}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{3}\\.\\d{2}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{3}\\.\\d{2}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{3}\\.\\d{2}$\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{3}\\.\\d{2}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{3}\\.\\d{2}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{3}\\.\\d{2}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{3}\\.\\d{2}$\n\x1b[0m\n', err='')
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: ^\d{3}\.\d{2}$
  - [0m
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: ^\d{3}\.\d{2}$
  - [0m
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: ^\d{3}\.\d{2}$
  - [0m
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: ^\d{3}\.\d{2}$
  - [0m
2025-03-28 23:54:05,952 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 23:54:05,952 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行失败, 错误信息：assert "CaptureResult(out='\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: XXX.XX\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: XXX.XX\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: XXX.XX\n\x1b[0m\n', err='')
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: XXX.XX
  - [0m
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: XXX.XX\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: XXX.XX\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: XXX.XX\n\x1b[0m\n', err='')
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: XXX.XX
  - [0m
2025-03-28 23:54:05,954 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"开始执行
2025-03-28 23:54:05,954 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"执行失败, 错误信息：assert "CaptureResult(out='\\x1b[0;91m\\n错误：输入值必须在 [y,n] 范围内\\n\\x1b[0m\\n\\x1b[0;91m\\n错误：输入值必须在 [y,n] 范围内\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n错误：输入值必须在 [y,n] 范围内\n\x1b[0m\n\x1b[0;91m\n错误：输入值必须在 [y,n] 范围内\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n错误：输入值必须在 [y,n] 范围内\n\x1b[0m\n\x1b[0;91m\n错误：输入值必须在 [y,n] 范围内\n\x1b[0m\n', err='')
  - [0;91m
  - 错误：输入值必须在 [y,n] 范围内
  - [0m
  - [0;91m
  - 错误：输入值必须在 [y,n] 范围内
  - [0m
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='\\x1b[0;91m\\n错误：输入值必须在 [y,n] 范围内\\n\\x1b[0m\\n\\x1b[0;91m\\n错误：输入值必须在 [y,n] 范围内\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n错误：输入值必须在 [y,n] 范围内\n\x1b[0m\n\x1b[0;91m\n错误：输入值必须在 [y,n] 范围内\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n错误：输入值必须在 [y,n] 范围内\n\x1b[0m\n\x1b[0;91m\n错误：输入值必须在 [y,n] 范围内\n\x1b[0m\n', err='')
  - [0;91m
  - 错误：输入值必须在 [y,n] 范围内
  - [0m
  - [0;91m
  - 错误：输入值必须在 [y,n] 范围内
  - [0m
2025-03-28 23:54:05,956 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"开始执行======
2025-03-28 23:54:05,956 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为str，不输入内容，在输入"20"执行失败, 错误信息：assert "CaptureResult(out='\\x1b[0;91m\\n错误：请输入内容\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n错误：请输入内容\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n错误：请输入内容\n\x1b[0m\n', err='')
  - [0;91m
  - 错误：请输入内容
  - [0m
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='\\x1b[0;91m\\n错误：请输入内容\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n错误：请输入内容\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n错误：请输入内容\n\x1b[0m\n', err='')
  - [0;91m
  - 错误：请输入内容
  - [0m
2025-03-28 23:54:05,959 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 23:54:05,959 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容执行失败, 错误信息：assert "CaptureResult(out='\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: ^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}$\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: ^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}$\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: ^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}$\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: ^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}$\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{4}-\\d{1,2}-\\d{1,2}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{4}-\\d{1,2}-\\d{1,2}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{4}-\\d{1,2}-\\d{1,2}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{4}-\\d{1,2}-\\d{1,2}$\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{4}-\\d{1,2}-\\d{1,2}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{4}-\\d{1,2}-\\d{1,2}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{4}-\\d{1,2}-\\d{1,2}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{4}-\\d{1,2}-\\d{1,2}$\n\x1b[0m\n', err='')
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: ^\d{4}-\d{1,2}-\d{1,2}$
  - [0m
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: ^\d{4}-\d{1,2}-\d{1,2}$
  - [0m
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: ^\d{4}-\d{1,2}-\d{1,2}$
  - [0m
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: ^\d{4}-\d{1,2}-\d{1,2}$
  - [0m
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: ^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}$\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: ^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}$\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: ^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}$\\n\\x1b[0m\\n\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: ^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}$\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{4}-\\d{1,2}-\\d{1,2}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{4}-\\d{1,2}-\\d{1,2}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{4}-\\d{1,2}-\\d{1,2}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{4}-\\d{1,2}-\\d{1,2}$\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{4}-\\d{1,2}-\\d{1,2}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{4}-\\d{1,2}-\\d{1,2}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{4}-\\d{1,2}-\\d{1,2}$\n\x1b[0m\n\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: ^\\d{4}-\\d{1,2}-\\d{1,2}$\n\x1b[0m\n', err='')
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: ^\d{4}-\d{1,2}-\d{1,2}$
  - [0m
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: ^\d{4}-\d{1,2}-\d{1,2}$
  - [0m
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: ^\d{4}-\d{1,2}-\d{1,2}$
  - [0m
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: ^\d{4}-\d{1,2}-\d{1,2}$
  - [0m
2025-03-28 23:54:05,962 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 23:54:05,962 ERROR [testlog] [test_common_method.py (test_common_input:26] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行失败, 错误信息：assert "CaptureResult(out='\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: YYYY-MM-DD\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: YYYY-MM-DD\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: YYYY-MM-DD\n\x1b[0m\n', err='')
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: YYYY-MM-DD
  - [0m
Traceback (most recent call last):
  File "/Users/pengjianbin/PycharmProjects/SoftwareQualityRating/test_program/test_case/test_common_method.py", line 24, in test_common_input
    assert act == exp
AssertionError: assert "CaptureResult(out='\\x1b[0;91m\\n格式错误：输入内容格式不匹配, 期望格式: YYYY-MM-DD\\n\\x1b[0m\\n', err='')\n" == '\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: YYYY-MM-DD\n\x1b[0m\n'
  
  + CaptureResult(out='\x1b[0;91m\n格式错误：输入内容格式不匹配, 期望格式: YYYY-MM-DD\n\x1b[0m\n', err='')
  - [0;91m
  - 格式错误：输入内容格式不匹配, 期望格式: YYYY-MM-DD
  - [0m
2025-03-28 23:54:05,963 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 23:58:00,189 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 23:58:00,499 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"开始执行=====
2025-03-28 23:58:00,499 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"执行通过=====
2025-03-28 23:58:00,500 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "开始执行====
2025-03-28 23:58:00,500 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "执行通过====
2025-03-28 23:58:00,501 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"开始执行
2025-03-28 23:58:00,501 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"执行通过
2025-03-28 23:58:00,501 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"开始执行
2025-03-28 23:58:00,501 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"执行通过
2025-03-28 23:58:00,502 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "开始执行
2025-03-28 23:58:00,502 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "执行通过
2025-03-28 23:58:00,502 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 23:58:00,502 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 23:58:00,503 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号开始执行
2025-03-28 23:58:00,503 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号执行通过
2025-03-28 23:58:00,504 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号开始执行
2025-03-28 23:58:00,504 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号执行通过
2025-03-28 23:58:00,505 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"开始执行==
2025-03-28 23:58:00,505 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"执行通过==
2025-03-28 23:58:00,505 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "开始执行===
2025-03-28 23:58:00,505 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "执行通过===
2025-03-28 23:58:00,506 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"开始执行
2025-03-28 23:58:00,506 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"执行通过
2025-03-28 23:58:00,507 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"开始执行
2025-03-28 23:58:00,507 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"执行通过
2025-03-28 23:58:00,508 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "开始执行
2025-03-28 23:58:00,508 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "执行通过
2025-03-28 23:58:00,509 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "开始执行
2025-03-28 23:58:00,509 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "执行通过
2025-03-28 23:58:00,509 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数开始执行
2025-03-28 23:58:00,510 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数执行通过
2025-03-28 23:58:00,510 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数开始执行
2025-03-28 23:58:00,510 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数执行通过
2025-03-28 23:58:00,511 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号开始执行
2025-03-28 23:58:00,511 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号执行通过
2025-03-28 23:58:00,512 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "开始执行=====
2025-03-28 23:58:00,512 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "执行通过=====
2025-03-28 23:58:00,512 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "开始执行==
2025-03-28 23:58:00,512 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "执行通过==
2025-03-28 23:58:00,513 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "开始执行==
2025-03-28 23:58:00,513 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "执行通过==
2025-03-28 23:58:00,513 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"开始执行==
2025-03-28 23:58:00,513 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"执行通过==
2025-03-28 23:58:00,514 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"开始执行==
2025-03-28 23:58:00,514 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"执行通过==
2025-03-28 23:58:00,515 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 23:58:00,515 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 23:58:00,515 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "开始执行
2025-03-28 23:58:00,516 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "执行通过
2025-03-28 23:58:00,516 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期开始执行
2025-03-28 23:58:00,516 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期执行通过
2025-03-28 23:58:00,517 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期开始执行
2025-03-28 23:58:00,517 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期执行通过
2025-03-28 23:58:00,517 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"开始执行
2025-03-28 23:58:00,517 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"执行通过
2025-03-28 23:58:00,518 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"开始执行
2025-03-28 23:58:00,518 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"执行通过
2025-03-28 23:58:00,519 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"开始执行======
2025-03-28 23:58:00,519 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"执行通过======
2025-03-28 23:58:00,519 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "开始执行===
2025-03-28 23:58:00,519 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "执行通过===
2025-03-28 23:58:00,520 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 23:58:00,520 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 23:58:00,521 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 23:58:00,521 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 23:58:00,521 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"开始执行
2025-03-28 23:58:00,521 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"执行通过
2025-03-28 23:58:00,522 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"开始执行
2025-03-28 23:58:00,522 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"执行通过
2025-03-28 23:58:00,522 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"开始执行====
2025-03-28 23:58:00,522 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"执行通过====
2025-03-28 23:58:00,523 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "开始执行
2025-03-28 23:58:00,523 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "执行通过
2025-03-28 23:58:00,523 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容开始执行=
2025-03-28 23:58:00,524 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容执行通过=
2025-03-28 23:58:00,525 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 23:58:00,525 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 23:58:00,525 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"开始执行
2025-03-28 23:58:00,525 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"执行通过
2025-03-28 23:58:00,526 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"开始执行======
2025-03-28 23:58:00,526 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"执行通过======
2025-03-28 23:58:00,526 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 23:58:00,527 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 23:58:00,527 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 23:58:00,527 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 23:58:00,527 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 23:58:23,366 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 23:58:23,673 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"开始执行=====
2025-03-28 23:58:23,673 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"执行通过=====
2025-03-28 23:58:23,675 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "开始执行====
2025-03-28 23:58:23,675 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "执行通过====
2025-03-28 23:58:23,676 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"开始执行
2025-03-28 23:58:23,676 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"执行通过
2025-03-28 23:58:23,676 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"开始执行
2025-03-28 23:58:23,676 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"执行通过
2025-03-28 23:58:23,677 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "开始执行
2025-03-28 23:58:23,677 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "执行通过
2025-03-28 23:58:23,678 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 23:58:23,678 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 23:58:23,678 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号开始执行
2025-03-28 23:58:23,678 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号执行通过
2025-03-28 23:58:23,679 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号开始执行
2025-03-28 23:58:23,679 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号执行通过
2025-03-28 23:58:23,680 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"开始执行==
2025-03-28 23:58:23,680 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"执行通过==
2025-03-28 23:58:23,681 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "开始执行===
2025-03-28 23:58:23,681 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "执行通过===
2025-03-28 23:58:23,681 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"开始执行
2025-03-28 23:58:23,682 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"执行通过
2025-03-28 23:58:23,682 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"开始执行
2025-03-28 23:58:23,682 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"执行通过
2025-03-28 23:58:23,683 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "开始执行
2025-03-28 23:58:23,683 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "执行通过
2025-03-28 23:58:23,684 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "开始执行
2025-03-28 23:58:23,684 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "执行通过
2025-03-28 23:58:23,684 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数开始执行
2025-03-28 23:58:23,684 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数执行通过
2025-03-28 23:58:23,685 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数开始执行
2025-03-28 23:58:23,685 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数执行通过
2025-03-28 23:58:23,686 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号开始执行
2025-03-28 23:58:23,686 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号执行通过
2025-03-28 23:58:23,686 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "开始执行=====
2025-03-28 23:58:23,686 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "执行通过=====
2025-03-28 23:58:23,687 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "开始执行==
2025-03-28 23:58:23,687 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "执行通过==
2025-03-28 23:58:23,688 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "开始执行==
2025-03-28 23:58:23,688 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "执行通过==
2025-03-28 23:58:23,688 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"开始执行==
2025-03-28 23:58:23,688 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"执行通过==
2025-03-28 23:58:23,689 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"开始执行==
2025-03-28 23:58:23,689 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"执行通过==
2025-03-28 23:58:23,690 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 23:58:23,690 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 23:58:23,691 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "开始执行
2025-03-28 23:58:23,691 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "执行通过
2025-03-28 23:58:23,692 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期开始执行
2025-03-28 23:58:23,692 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期执行通过
2025-03-28 23:58:23,693 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期开始执行
2025-03-28 23:58:23,693 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期执行通过
2025-03-28 23:58:23,694 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"开始执行
2025-03-28 23:58:23,694 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"执行通过
2025-03-28 23:58:23,694 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"开始执行
2025-03-28 23:58:23,694 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"执行通过
2025-03-28 23:58:23,695 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"开始执行======
2025-03-28 23:58:23,695 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"执行通过======
2025-03-28 23:58:23,696 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "开始执行===
2025-03-28 23:58:23,696 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "执行通过===
2025-03-28 23:58:23,697 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 23:58:23,697 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 23:58:23,698 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 23:58:23,698 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 23:58:23,698 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"开始执行
2025-03-28 23:58:23,698 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"执行通过
2025-03-28 23:58:23,699 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"开始执行
2025-03-28 23:58:23,699 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"执行通过
2025-03-28 23:58:23,700 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"开始执行====
2025-03-28 23:58:23,700 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"执行通过====
2025-03-28 23:58:23,701 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "开始执行
2025-03-28 23:58:23,701 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "执行通过
2025-03-28 23:58:23,701 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容开始执行=
2025-03-28 23:58:23,701 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容执行通过=
2025-03-28 23:58:23,702 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 23:58:23,702 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 23:58:23,703 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"开始执行
2025-03-28 23:58:23,703 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"执行通过
2025-03-28 23:58:23,704 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"开始执行======
2025-03-28 23:58:23,704 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"执行通过======
2025-03-28 23:58:23,704 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 23:58:23,705 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 23:58:23,705 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 23:58:23,705 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 23:58:23,706 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
2025-03-28 23:59:07,131 INFO [testlog] [base_case.py (setup_class:13] - ==========封装公用input方法测试开始==========
2025-03-28 23:59:07,451 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"开始执行=====
2025-03-28 23:59:07,451 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，输入内容为字符串:"999"执行通过=====
2025-03-28 23:59:07,452 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "开始执行====
2025-03-28 23:59:07,452 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为int，输入内容为字符串:" 666 "执行通过====
2025-03-28 23:59:07,452 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"开始执行
2025-03-28 23:59:07,453 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"10"执行通过
2025-03-28 23:59:07,453 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"开始执行
2025-03-28 23:59:07,453 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，输入内容为字符串:"20"执行通过
2025-03-28 23:59:07,454 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "开始执行
2025-03-28 23:59:07,454 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除前后空格，输入内容为字符串:" 20 "执行通过
2025-03-28 23:59:07,454 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 23:59:07,454 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置去除所有空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 23:59:07,455 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号开始执行
2025-03-28 23:59:07,455 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式，输入符合格式的手机号执行通过
2025-03-28 23:59:07,456 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号开始执行
2025-03-28 23:59:07,456 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，手动配置正则表达式只允许输入手机号格式和不通过提示，输入符合格式的手机号执行通过
2025-03-28 23:59:07,457 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"开始执行==
2025-03-28 23:59:07,457 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为float，输入内容为字符串:"999,999"执行通过==
2025-03-28 23:59:07,458 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "开始执行===
2025-03-28 23:59:07,458 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，输入内容为字符串:" 666 "执行通过===
2025-03-28 23:59:07,458 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"开始执行
2025-03-28 23:59:07,458 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"10.1"执行通过
2025-03-28 23:59:07,459 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"开始执行
2025-03-28 23:59:07,459 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.22，输入内容为字符串:"20.22"执行通过
2025-03-28 23:59:07,460 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "开始执行
2025-03-28 23:59:07,460 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除前后空格，输入内容为字符串:" 20.1 "执行通过
2025-03-28 23:59:07,460 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "开始执行
2025-03-28 23:59:07,460 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置去除所有空格，输入内容为字符串:" 2 0 . 1 2 "执行通过
2025-03-28 23:59:07,461 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数开始执行
2025-03-28 23:59:07,461 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数，输入符合格式的浮点数执行通过
2025-03-28 23:59:07,461 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数开始执行
2025-03-28 23:59:07,461 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，手动配置正则表达式只允许输入三位数加两位小数和不通过提示，输入符合格式的浮点数执行通过
2025-03-28 23:59:07,462 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号开始执行
2025-03-28 23:59:07,462 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，输入内容包含大小写英文、行子、数字、浮点数和特殊符号执行通过
2025-03-28 23:59:07,463 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "开始执行=====
2025-03-28 23:59:07,463 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ====测试用例公用input方法配置类型为str，输入内容为字符串:" 10 "执行通过=====
2025-03-28 23:59:07,463 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "开始执行==
2025-03-28 23:59:07,463 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为str，关闭前后去空格配置，输入" as d "执行通过==
2025-03-28 23:59:07,464 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "开始执行==
2025-03-28 23:59:07,464 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，关闭去除所有空格配置，输入" as d "执行通过==
2025-03-28 23:59:07,465 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"开始执行==
2025-03-28 23:59:07,465 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"y"执行通过==
2025-03-28 23:59:07,465 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"开始执行==
2025-03-28 23:59:07,465 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，只支持输入y和n，输入内容为字符串:"N"执行通过==
2025-03-28 23:59:07,466 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "开始执行
2025-03-28 23:59:07,466 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除前后空格，输入内容为字符串:" 2 0 "执行通过
2025-03-28 23:59:07,467 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "开始执行
2025-03-28 23:59:07,467 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置去除所有空格，输入内容为字符串:" 存 在 空 格 "执行通过
2025-03-28 23:59:07,467 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期开始执行
2025-03-28 23:59:07,467 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期，输入符合格式的日期执行通过
2025-03-28 23:59:07,468 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期开始执行
2025-03-28 23:59:07,468 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，手动配置正则表达式只允许输入日期和不通过提示，输入符合格式的日期执行通过
2025-03-28 23:59:07,468 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"开始执行
2025-03-28 23:59:07,469 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，先依次输入小写英文、大写英文、汉字、浮点数、特殊符号，在输入"20"执行通过
2025-03-28 23:59:07,469 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"开始执行
2025-03-28 23:59:07,469 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，只支持输入10和20，先依次输入"9"、"21"，在输入"20"执行通过
2025-03-28 23:59:07,470 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"开始执行======
2025-03-28 23:59:07,470 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为int，不输入内容，在输入"20"执行通过======
2025-03-28 23:59:07,471 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "开始执行===
2025-03-28 23:59:07,471 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ==测试用例公用input方法配置类型为int，不配置去所有空格，在输入" 2 0 "执行通过===
2025-03-28 23:59:07,471 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 23:59:07,471 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为int，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 23:59:07,472 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 23:59:07,472 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为int，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 23:59:07,472 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"开始执行
2025-03-28 23:59:07,472 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，先依次输入小写英文、大写英文、汉字、特殊符号，在输入"20.1"执行通过
2025-03-28 23:59:07,473 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"开始执行
2025-03-28 23:59:07,473 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，只支持输入10.1和20.2，先依次输入"10.2"、"20.3"，在输入"20.2"执行通过
2025-03-28 23:59:07,474 DEBUG [testlog] [test_common_method.py (test_common_input:19] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"开始执行====
2025-03-28 23:59:07,474 DEBUG [testlog] [test_common_method.py (test_common_input:28] - ===测试用例公用input方法配置类型为float，不输入内容，在输入"20.2"执行通过====
2025-03-28 23:59:07,474 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "开始执行
2025-03-28 23:59:07,474 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，不配置去所有空格，在输入" 2 0 . 1 "执行通过
2025-03-28 23:59:07,475 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容开始执行=
2025-03-28 23:59:07,475 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验，输入不符合格式的内容执行通过=
2025-03-28 23:59:07,475 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 23:59:07,475 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为float，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 23:59:07,476 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"开始执行
2025-03-28 23:59:07,476 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，只支持输入y和n，先依次输入"z"、"m"，在输入"y"执行通过
2025-03-28 23:59:07,477 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"开始执行======
2025-03-28 23:59:07,477 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =====测试用例公用input方法配置类型为str，不输入内容，在输入"20"执行通过======
2025-03-28 23:59:07,477 DEBUG [testlog] [test_common_method.py (test_common_input:19] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容开始执行==
2025-03-28 23:59:07,477 DEBUG [testlog] [test_common_method.py (test_common_input:28] - =测试用例公用input方法配置类型为str，配置了正则表达式校验，输入不符合格式的内容执行通过==
2025-03-28 23:59:07,478 DEBUG [testlog] [test_common_method.py (test_common_input:19] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容开始执行
2025-03-28 23:59:07,478 DEBUG [testlog] [test_common_method.py (test_common_input:28] - 测试用例公用input方法配置类型为str，配置了正则表达式校验和不通过提示，输入不符合格式的内容执行通过
2025-03-28 23:59:07,478 INFO [testlog] [base_case.py (teardown_class:17] - ==========封装公用input方法测试结束==========
