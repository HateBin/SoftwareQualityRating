import matplotlib.pyplot as plt


def create_bar_plot(data: dict):
    """
    创建一个条形图。

    参数:
    - title: 图表的标题。
    - data: 包含图表数据的字典，其中键是类别名称，值是每个类别的数值列表。

    返回:
    - desired_width_data: 计算出的图表宽度数据。
    - labels: 图表的标签列表。
    - title: 图表的标题。
    - max_total_height: 最大条形的总高度。
    - ax: matplotlib Axes对象，用于绘制图表。
    """
    # 获取数据的键，即类别名称
    keys = list(data.keys())

    # 创建图表对象
    fig, ax = plt.subplots()
    # 类型注释，帮助IDE和代码阅读者理解变量类型
    fig: plt.Figure
    ax: plt.Axes

    # 计算理想的条形宽度和图表宽度数据
    return calculate_plot_width(keys, fig)


def calculate_plot_width(keys: list, fig: plt.Figure, bar_width: float = 0.073):
    """
    根据名称列表和图形对象来计算和设置柱状图的宽度。

    :param keys: 名称列表，用于确定柱状图的名称长度和数量。
    :param fig: matplotlib 图形对象，用于设置图形的宽度。
    :param bar_width: 单个柱子的基础宽度。
    :return: 返回调整后的柱子宽度和图形宽度的字典。
    """
    # 计算最长的名称长度
    max_key_length = max(len(key) for key in keys)
    # 获取柱状图数据的数量
    num_bars = len(keys)

    # 根据最长名称长度和柱子数量调整图形宽度
    base_width = 0  # 基础宽度
    # 名称长度影响因子
    key_length_factor = max_key_length * 1.0
    # 柱子数量影响因子
    bar_count_factor = num_bars * 0.3

    # 设置图片最小宽度和最大宽度
    min_width = 9
    max_width = 20
    # 计算最终的宽度
    desired_width = min(max(base_width + key_length_factor + bar_count_factor, min_width), max_width)

    desired_bar_width = bar_width + num_bars * 0.057

    # 设置图形的尺寸
    fig.set_size_inches(desired_width, 4.8)

    # 设置 x 轴的限制
    plt.xlim(-1, num_bars)

    # 返回调整后的柱子宽度和图形宽度的字典
    return desired_bar_width, {'width': desired_width}


if __name__ == '__main__':
    datas = [
        {'林洵锋': 103.0, '王镇': 120.0, '龚进': 163.5, '陈育林': 90.0, '韦江': 100.5, '汪勇奇': 47.0},
        {'T5王改朝': 1, 'T5龚进': 26, 'T5林洵锋': 4, 'T5王镇': 4, 'T5韦江': 11, 'T5汪勇奇': 5, 'T5陈育林': 3},
        {'API': {'致命': 0, '严重': 1, '一般': 7, '提示': 0, '建议': 0, '空': 0},
         'H5': {'致命': 0, '严重': 5, '一般': 15, '提示': 0, '建议': 0, '空': 0},
         'PC': {'致命': 0, '严重': 1, '一般': 14, '提示': 0, '建议': 0, '空': 0},
         'IOS': {'致命': 0, '严重': 0, '一般': 4, '提示': 0, '建议': 0, '空': 0},
         'Flutter': {'致命': 0, '严重': 0, '一般': 6, '提示': 0, '建议': 0, '空': 0},
         '空': {'致命': 0, '严重': 0, '一般': 0, '提示': 0, '建议': 0, '空': 1}},
        {'API': {'实现与文档不符': 2, '需求缺陷': 0, '技术方案考虑不足': 4, '环境问题': 1, '历史遗留缺陷': 1,
                 '第三方依赖': 0, '兼容性': 0, '性能问题': 0, '安全问题': 0, 'Bugfix 引入': 0, '无效缺陷': 0},
         'H5': {'实现与文档不符': 3, '需求缺陷': 0, '技术方案考虑不足': 2, '环境问题': 2, '历史遗留缺陷': 2,
                '第三方依赖': 0, '兼容性': 9, '性能问题': 0, '安全问题': 0, 'Bugfix 引入': 0, '无效缺陷': 2},
         'PC': {'实现与文档不符': 2, '需求缺陷': 1, '技术方案考虑不足': 7, '环境问题': 2, '历史遗留缺陷': 1,
                '第三方依赖': 1, '兼容性': 1, '性能问题': 0, '安全问题': 0, 'Bugfix 引入': 0, '无效缺陷': 0},
         'IOS': {'实现与文档不符': 0, '需求缺陷': 1, '技术方案考虑不足': 2, '环境问题': 0, '历史遗留缺陷': 0,
                 '第三方依赖': 0, '兼容性': 1, '性能问题': 0, '安全问题': 0, 'Bugfix 引入': 0, '无效缺陷': 0},
         'Flutter': {'实现与文档不符': 3, '需求缺陷': 0, '技术方案考虑不足': 2, '环境问题': 0, '历史遗留缺陷': 0,
                     '第三方依赖': 0, '兼容性': 1, '性能问题': 0, '安全问题': 0, 'Bugfix 引入': 0, '无效缺陷': 0},
         '空': {'实现与文档不符': 0, '需求缺陷': 0, '技术方案考虑不足': 1, '环境问题': 0, '历史遗留缺陷': 0,
                '第三方依赖': 0, '兼容性': 0, '性能问题': 0, '安全问题': 0, 'Bugfix 引入': 0, '无效缺陷': 0},
         },
        {'API': {'实现与文档不符': 2, '需求缺陷': 0, '技术方案考虑不足': 4, '环境问题': 1, '历史遗留缺陷': 1,
                 '第三方依赖': 0, '兼容性': 0, '性能问题': 0, '安全问题': 0, 'Bugfix 引入': 0, '无效缺陷': 0},
         'H5': {'实现与文档不符': 3, '需求缺陷': 0, '技术方案考虑不足': 2, '环境问题': 2, '历史遗留缺陷': 2,
                '第三方依赖': 0, '兼容性': 9, '性能问题': 0, '安全问题': 0, 'Bugfix 引入': 0, '无效缺陷': 2},
         'PC': {'实现与文档不符': 2, '需求缺陷': 1, '技术方案考虑不足': 7, '环境问题': 2, '历史遗留缺陷': 1,
                '第三方依赖': 1, '兼容性': 1, '性能问题': 0, '安全问题': 0, 'Bugfix 引入': 0, '无效缺陷': 0},
         'IOS': {'实现与文档不符': 0, '需求缺陷': 1, '技术方案考虑不足': 2, '环境问题': 0, '历史遗留缺陷': 0,
                 '第三方依赖': 0, '兼容性': 1, '性能问题': 0, '安全问题': 0, 'Bugfix 引入': 0, '无效缺陷': 0},
         'Flutter': {'实现与文档不符': 3, '需求缺陷': 0, '技术方案考虑不足': 2, '环境问题': 0, '历史遗留缺陷': 0,
                     '第三方依赖': 0, '兼容性': 1, '性能问题': 0, '安全问题': 0, 'Bugfix 引入': 0, '无效缺陷': 0},
         '空': {'实现与文档不符': 0, '需求缺陷': 0, '技术方案考虑不足': 1, '环境问题': 0, '历史遗留缺陷': 0,
                '第三方依赖': 0, '兼容性': 0, '性能问题': 0, '安全问题': 0, 'Bugfix 引入': 0, '无效缺陷': 0},
         'API1': {'实现与文档不符': 2, '需求缺陷': 0, '技术方案考虑不足': 4, '环境问题': 1, '历史遗留缺陷': 1,
                  '第三方依赖': 0, '兼容性': 0, '性能问题': 0, '安全问题': 0, 'Bugfix 引入': 0, '无效缺陷': 0},
         'H51': {'实现与文档不符': 3, '需求缺陷': 0, '技术方案考虑不足': 2, '环境问题': 2, '历史遗留缺陷': 2,
                 '第三方依赖': 0, '兼容性': 9, '性能问题': 0, '安全问题': 0, 'Bugfix 引入': 0, '无效缺陷': 2},
         'PC1': {'实现与文档不符': 2, '需求缺陷': 1, '技术方案考虑不足': 7, '环境问题': 2, '历史遗留缺陷': 1,
                 '第三方依赖': 1, '兼容性': 1, '性能问题': 0, '安全问题': 0, 'Bugfix 引入': 0, '无效缺陷': 0},
         'IOS1': {'实现与文档不符': 0, '需求缺陷': 1, '技术方案考虑不足': 2, '环境问题': 0, '历史遗留缺陷': 0,
                  '第三方依赖': 0, '兼容性': 1, '性能问题': 0, '安全问题': 0, 'Bugfix 引入': 0, '无效缺陷': 0},
         'Flutter1': {'实现与文档不符': 3, '需求缺陷': 0, '技术方案考虑不足': 2, '环境问题': 0, '历史遗留缺陷': 0,
                      '第三方依赖': 0, '兼容性': 1, '性能问题': 0, '安全问题': 0, 'Bugfix 引入': 0, '无效缺陷': 0},
         '空1': {'实现与文档不符': 0, '需求缺陷': 0, '技术方案考虑不足': 1, '环境问题': 0, '历史遗留缺陷': 0,
                 '第三方依赖': 0, '兼容性': 0, '性能问题': 0, '安全问题': 0, 'Bugfix 引入': 0, '无效缺陷': 0},
         }
    ]
    for data in datas:
        print(create_bar_plot(data))
